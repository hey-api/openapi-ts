// This file is auto-generated by @hey-api/openapi-ts

import type {
  Client,
  Options as ClientOptions,
  TDataShape,
} from '@hey-api/client-fetch';

import { client as _heyApiClient } from './client.gen';
import type {
  CreatePetsData,
  CreatePetsError,
  ListPetsData,
  ListPetsError,
  ListPetsResponse,
  ShowPetByIdData,
  ShowPetByIdError,
  ShowPetByIdResponse,
} from './types.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
};

/**
 * List all pets
 */
export const listPets = <ThrowOnError extends boolean = false>(
  options?: Options<ListPetsData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).get<
    ListPetsResponse,
    ListPetsError,
    ThrowOnError
  >({
    url: '/pets',
    ...options,
  });

/**
 * Create a pet
 */
export const createPets = <ThrowOnError extends boolean = false>(
  options?: Options<CreatePetsData, ThrowOnError>,
) =>
  (options?.client ?? _heyApiClient).post<
    unknown,
    CreatePetsError,
    ThrowOnError
  >({
    url: '/pets',
    ...options,
  });

/**
 * Info for a specific pet
 */
export const showPetById = <ThrowOnError extends boolean = false>(
  options: Options<ShowPetByIdData, ThrowOnError>,
) =>
  (options.client ?? _heyApiClient).get<
    ShowPetByIdResponse,
    ShowPetByIdError,
    ThrowOnError
  >({
    url: '/pets/{petId}',
    ...options,
  });
