// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
  baseUrl: 'https://api.openai.com/v1' | (string & {});
};

export type Webhooks =
  | PostBatchCancelledWebhookRequest
  | PostBatchCompletedWebhookRequest
  | PostBatchExpiredWebhookRequest
  | PostBatchFailedWebhookRequest
  | PostEvalRunCanceledWebhookRequest
  | PostEvalRunFailedWebhookRequest
  | PostEvalRunSucceededWebhookRequest
  | PostFineTuningJobCancelledWebhookRequest
  | PostFineTuningJobFailedWebhookRequest
  | PostFineTuningJobSucceededWebhookRequest
  | PostResponseCancelledWebhookRequest
  | PostResponseCompletedWebhookRequest
  | PostResponseFailedWebhookRequest
  | PostResponseIncompleteWebhookRequest;

export type AddUploadPartRequest = {
  /**
   * The chunk of bytes for this Part.
   *
   */
  data: Blob | File;
};

/**
 * Represents an individual Admin API key in an org.
 */
export type AdminApiKey = {
  /**
   * The Unix timestamp (in seconds) of when the API key was created
   */
  created_at: number;
  /**
   * The identifier, which can be referenced in API endpoints
   */
  id: string;
  /**
   * The Unix timestamp (in seconds) of when the API key was last used
   */
  last_used_at: number;
  /**
   * The name of the API key
   */
  name: string;
  /**
   * The object type, which is always `organization.admin_api_key`
   */
  object: string;
  owner: {
    /**
     * The Unix timestamp (in seconds) of when the user was created
     */
    created_at?: number;
    /**
     * The identifier, which can be referenced in API endpoints
     */
    id?: string;
    /**
     * The name of the user
     */
    name?: string;
    /**
     * The object type, which is always organization.user
     */
    object?: string;
    /**
     * Always `owner`
     */
    role?: string;
    /**
     * Always `user`
     */
    type?: string;
  };
  /**
   * The redacted value of the API key
   */
  redacted_value: string;
  /**
   * The value of the API key. Only shown on create.
   */
  value?: string;
};

export type ApiKeyList = {
  data?: Array<AdminApiKey>;
  first_id?: string;
  has_more?: boolean;
  last_id?: string;
  object?: string;
};

/**
 * Assistant
 *
 * Represents an `assistant` that can call the model and use tools.
 */
export type AssistantObject = {
  /**
   * The Unix timestamp (in seconds) for when the assistant was created.
   */
  created_at: number;
  /**
   * The description of the assistant. The maximum length is 512 characters.
   *
   */
  description: string;
  /**
   * The identifier, which can be referenced in API endpoints.
   */
  id: string;
  /**
   * The system instructions that the assistant uses. The maximum length is 256,000 characters.
   *
   */
  instructions: string;
  metadata: Metadata;
  /**
   * ID of the model to use. You can use the [List models](https://platform.openai.com/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](https://platform.openai.com/docs/models) for descriptions of them.
   *
   */
  model: string;
  /**
   * The name of the assistant. The maximum length is 256 characters.
   *
   */
  name: string;
  /**
   * The object type, which is always `assistant`.
   */
  object: 'assistant';
  response_format?: AssistantsApiResponseFormatOption;
  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
   *
   */
  temperature?: number;
  /**
   * A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
   *
   */
  tool_resources?: {
    code_interpreter?: {
      /**
       * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter`` tool. There can be a maximum of 20 files associated with the tool.
       *
       */
      file_ids?: Array<string>;
    };
    file_search?: {
      /**
       * The ID of the [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
       *
       */
      vector_store_ids?: Array<string>;
    };
  };
  /**
   * A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
   *
   */
  tools: Array<AssistantTool>;
  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
   *
   * We generally recommend altering this or temperature but not both.
   *
   */
  top_p?: number;
};

/**
 * Represents an event emitted when streaming a Run.
 *
 * Each event in a server-sent events stream has an `event` and `data` property:
 *
 * ```
 * event: thread.created
 * data: {"id": "thread_123", "object": "thread", ...}
 * ```
 *
 * We emit events whenever a new object is created, transitions to a new state, or is being
 * streamed in parts (deltas). For example, we emit `thread.run.created` when a new run
 * is created, `thread.run.completed` when a run completes, and so on. When an Assistant chooses
 * to create a message during a run, we emit a `thread.message.created event`, a
 * `thread.message.in_progress` event, many `thread.message.delta` events, and finally a
 * `thread.message.completed` event.
 *
 * We may add additional events over time, so we recommend handling unknown events gracefully
 * in your code. See the [Assistants API quickstart](https://platform.openai.com/docs/assistants/overview) to learn how to
 * integrate the Assistants API with streaming.
 *
 */
export type AssistantStreamEvent =
  | ({
      event?: 'ThreadStreamEvent';
    } & ThreadStreamEvent)
  | ({
      event?: 'RunStreamEvent';
    } & RunStreamEvent)
  | ({
      event?: 'RunStepStreamEvent';
    } & RunStepStreamEvent)
  | ({
      event?: 'MessageStreamEvent';
    } & MessageStreamEvent)
  | ({
      event?: 'ErrorEvent';
    } & ErrorEvent);

export const AssistantSupportedModels = {
  GPT_3_5_TURBO: 'gpt-3.5-turbo',
  GPT_3_5_TURBO_0125: 'gpt-3.5-turbo-0125',
  GPT_3_5_TURBO_0613: 'gpt-3.5-turbo-0613',
  GPT_3_5_TURBO_1106: 'gpt-3.5-turbo-1106',
  GPT_3_5_TURBO_16K: 'gpt-3.5-turbo-16k',
  GPT_3_5_TURBO_16K_0613: 'gpt-3.5-turbo-16k-0613',
  GPT_4: 'gpt-4',
  GPT_4O: 'gpt-4o',
  GPT_4O_2024_05_13: 'gpt-4o-2024-05-13',
  GPT_4O_2024_08_06: 'gpt-4o-2024-08-06',
  GPT_4O_2024_11_20: 'gpt-4o-2024-11-20',
  GPT_4O_MINI: 'gpt-4o-mini',
  GPT_4O_MINI_2024_07_18: 'gpt-4o-mini-2024-07-18',
  GPT_4_0125_PREVIEW: 'gpt-4-0125-preview',
  GPT_4_0314: 'gpt-4-0314',
  GPT_4_0613: 'gpt-4-0613',
  GPT_4_1: 'gpt-4.1',
  GPT_4_1106_PREVIEW: 'gpt-4-1106-preview',
  GPT_4_1_2025_04_14: 'gpt-4.1-2025-04-14',
  GPT_4_1_MINI: 'gpt-4.1-mini',
  GPT_4_1_MINI_2025_04_14: 'gpt-4.1-mini-2025-04-14',
  GPT_4_1_NANO: 'gpt-4.1-nano',
  GPT_4_1_NANO_2025_04_14: 'gpt-4.1-nano-2025-04-14',
  GPT_4_32K: 'gpt-4-32k',
  GPT_4_32K_0314: 'gpt-4-32k-0314',
  GPT_4_32K_0613: 'gpt-4-32k-0613',
  GPT_4_5_PREVIEW: 'gpt-4.5-preview',
  GPT_4_5_PREVIEW_2025_02_27: 'gpt-4.5-preview-2025-02-27',
  GPT_4_TURBO: 'gpt-4-turbo',
  GPT_4_TURBO_2024_04_09: 'gpt-4-turbo-2024-04-09',
  GPT_4_TURBO_PREVIEW: 'gpt-4-turbo-preview',
  GPT_4_VISION_PREVIEW: 'gpt-4-vision-preview',
  GPT_5: 'gpt-5',
  GPT_5_2025_08_07: 'gpt-5-2025-08-07',
  GPT_5_MINI: 'gpt-5-mini',
  GPT_5_MINI_2025_08_07: 'gpt-5-mini-2025-08-07',
  GPT_5_NANO: 'gpt-5-nano',
  GPT_5_NANO_2025_08_07: 'gpt-5-nano-2025-08-07',
  O1: 'o1',
  O1_2024_12_17: 'o1-2024-12-17',
  O3_MINI: 'o3-mini',
  O3_MINI_2025_01_31: 'o3-mini-2025-01-31',
} as const;

export type AssistantSupportedModels =
  (typeof AssistantSupportedModels)[keyof typeof AssistantSupportedModels];

/**
 * Code interpreter tool
 */
export type AssistantToolsCode = {
  /**
   * The type of tool being defined: `code_interpreter`
   */
  type: 'code_interpreter';
};

/**
 * FileSearch tool
 */
export type AssistantToolsFileSearch = {
  /**
   * Overrides for the file search tool.
   */
  file_search?: {
    /**
     * The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.
     *
     * Note that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.
     *
     */
    max_num_results?: number;
    ranking_options?: FileSearchRankingOptions;
  };
  /**
   * The type of tool being defined: `file_search`
   */
  type: 'file_search';
};

/**
 * FileSearch tool
 */
export type AssistantToolsFileSearchTypeOnly = {
  /**
   * The type of tool being defined: `file_search`
   */
  type: 'file_search';
};

/**
 * Function tool
 */
export type AssistantToolsFunction = {
  function: FunctionObject;
  /**
   * The type of tool being defined: `function`
   */
  type: 'function';
};

/**
 * Specifies the format that the model must output. Compatible with [GPT-4o](https://platform.openai.com/docs/models#gpt-4o), [GPT-4 Turbo](https://platform.openai.com/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.
 *
 * Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).
 *
 * Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
 *
 */
export type AssistantsApiResponseFormatOption =
  | 'auto'
  | ResponseFormatText
  | ResponseFormatJsonObject
  | ResponseFormatJsonSchema;

/**
 * Controls which (if any) tool is called by the model.
 * `none` means the model will not call any tools and instead generates a message.
 * `auto` is the default value and means the model can pick between generating a message or calling one or more tools.
 * `required` means the model must call one or more tools before responding to the user.
 * Specifying a particular tool like `{"type": "file_search"}` or `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
 *
 */
export type AssistantsApiToolChoiceOption =
  | 'none'
  | 'auto'
  | 'required'
  | AssistantsNamedToolChoice;

/**
 * Specifies a tool the model should use. Use to force the model to call a specific tool.
 */
export type AssistantsNamedToolChoice = {
  function?: {
    /**
     * The name of the function to call.
     */
    name: string;
  };
  /**
   * The type of the tool. If type is `function`, the function name must be set
   */
  type: 'function' | 'code_interpreter' | 'file_search';
};

/**
 * The format of the output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`. For `gpt-4o-transcribe` and `gpt-4o-mini-transcribe`, the only supported format is `json`.
 *
 */
export const AudioResponseFormat = {
  JSON: 'json',
  SRT: 'srt',
  TEXT: 'text',
  VERBOSE_JSON: 'verbose_json',
  VTT: 'vtt',
} as const;

/**
 * The format of the output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`. For `gpt-4o-transcribe` and `gpt-4o-mini-transcribe`, the only supported format is `json`.
 *
 */
export type AudioResponseFormat =
  (typeof AudioResponseFormat)[keyof typeof AudioResponseFormat];

/**
 * A log of a user action or configuration change within this organization.
 */
export type AuditLog = {
  actor: AuditLogActor;
  /**
   * The details for events with this `type`.
   */
  'api_key.created'?: {
    /**
     * The payload used to create the API key.
     */
    data?: {
      /**
       * A list of scopes allowed for the API key, e.g. `["api.model.request"]`
       */
      scopes?: Array<string>;
    };
    /**
     * The tracking ID of the API key.
     */
    id?: string;
  };
  /**
   * The details for events with this `type`.
   */
  'api_key.deleted'?: {
    /**
     * The tracking ID of the API key.
     */
    id?: string;
  };
  /**
   * The details for events with this `type`.
   */
  'api_key.updated'?: {
    /**
     * The payload used to update the API key.
     */
    changes_requested?: {
      /**
       * A list of scopes allowed for the API key, e.g. `["api.model.request"]`
       */
      scopes?: Array<string>;
    };
    /**
     * The tracking ID of the API key.
     */
    id?: string;
  };
  /**
   * The details for events with this `type`.
   */
  'certificate.created'?: {
    /**
     * The certificate ID.
     */
    id?: string;
    /**
     * The name of the certificate.
     */
    name?: string;
  };
  /**
   * The details for events with this `type`.
   */
  'certificate.deleted'?: {
    /**
     * The certificate content in PEM format.
     */
    certificate?: string;
    /**
     * The certificate ID.
     */
    id?: string;
    /**
     * The name of the certificate.
     */
    name?: string;
  };
  /**
   * The details for events with this `type`.
   */
  'certificate.updated'?: {
    /**
     * The certificate ID.
     */
    id?: string;
    /**
     * The name of the certificate.
     */
    name?: string;
  };
  /**
   * The details for events with this `type`.
   */
  'certificates.activated'?: {
    certificates?: Array<{
      /**
       * The certificate ID.
       */
      id?: string;
      /**
       * The name of the certificate.
       */
      name?: string;
    }>;
  };
  /**
   * The details for events with this `type`.
   */
  'certificates.deactivated'?: {
    certificates?: Array<{
      /**
       * The certificate ID.
       */
      id?: string;
      /**
       * The name of the certificate.
       */
      name?: string;
    }>;
  };
  /**
   * The project and fine-tuned model checkpoint that the checkpoint permission was created for.
   */
  'checkpoint_permission.created'?: {
    /**
     * The payload used to create the checkpoint permission.
     */
    data?: {
      /**
       * The ID of the fine-tuned model checkpoint.
       */
      fine_tuned_model_checkpoint?: string;
      /**
       * The ID of the project that the checkpoint permission was created for.
       */
      project_id?: string;
    };
    /**
     * The ID of the checkpoint permission.
     */
    id?: string;
  };
  /**
   * The details for events with this `type`.
   */
  'checkpoint_permission.deleted'?: {
    /**
     * The ID of the checkpoint permission.
     */
    id?: string;
  };
  /**
   * The Unix timestamp (in seconds) of the event.
   */
  effective_at: number;
  /**
   * The ID of this log.
   */
  id: string;
  /**
   * The details for events with this `type`.
   */
  'invite.accepted'?: {
    /**
     * The ID of the invite.
     */
    id?: string;
  };
  /**
   * The details for events with this `type`.
   */
  'invite.deleted'?: {
    /**
     * The ID of the invite.
     */
    id?: string;
  };
  /**
   * The details for events with this `type`.
   */
  'invite.sent'?: {
    /**
     * The payload used to create the invite.
     */
    data?: {
      /**
       * The email invited to the organization.
       */
      email?: string;
      /**
       * The role the email was invited to be. Is either `owner` or `member`.
       */
      role?: string;
    };
    /**
     * The ID of the invite.
     */
    id?: string;
  };
  /**
   * The details for events with this `type`.
   */
  'login.failed'?: {
    /**
     * The error code of the failure.
     */
    error_code?: string;
    /**
     * The error message of the failure.
     */
    error_message?: string;
  };
  /**
   * The details for events with this `type`.
   */
  'logout.failed'?: {
    /**
     * The error code of the failure.
     */
    error_code?: string;
    /**
     * The error message of the failure.
     */
    error_message?: string;
  };
  /**
   * The details for events with this `type`.
   */
  'organization.updated'?: {
    /**
     * The payload used to update the organization settings.
     */
    changes_requested?: {
      /**
       * How your organization logs data from supported API calls. One of `disabled`, `enabled_per_call`, `enabled_for_all_projects`, or `enabled_for_selected_projects`
       */
      api_call_logging?: string;
      /**
       * The list of project ids if api_call_logging is set to `enabled_for_selected_projects`
       */
      api_call_logging_project_ids?: string;
      /**
       * The organization description.
       */
      description?: string;
      /**
       * The organization name.
       */
      name?: string;
      /**
       * Visibility of the threads page which shows messages created with the Assistants API and Playground. One of `ANY_ROLE`, `OWNERS`, or `NONE`.
       */
      threads_ui_visibility?: string;
      /**
       * The organization title.
       */
      title?: string;
      /**
       * Visibility of the usage dashboard which shows activity and costs for your organization. One of `ANY_ROLE` or `OWNERS`.
       */
      usage_dashboard_visibility?: string;
    };
    /**
     * The organization ID.
     */
    id?: string;
  };
  /**
   * The project that the action was scoped to. Absent for actions not scoped to projects. Note that any admin actions taken via Admin API keys are associated with the default project.
   */
  project?: {
    /**
     * The project ID.
     */
    id?: string;
    /**
     * The project title.
     */
    name?: string;
  };
  /**
   * The details for events with this `type`.
   */
  'project.archived'?: {
    /**
     * The project ID.
     */
    id?: string;
  };
  /**
   * The details for events with this `type`.
   */
  'project.created'?: {
    /**
     * The payload used to create the project.
     */
    data?: {
      /**
       * The project name.
       */
      name?: string;
      /**
       * The title of the project as seen on the dashboard.
       */
      title?: string;
    };
    /**
     * The project ID.
     */
    id?: string;
  };
  /**
   * The details for events with this `type`.
   */
  'project.updated'?: {
    /**
     * The payload used to update the project.
     */
    changes_requested?: {
      /**
       * The title of the project as seen on the dashboard.
       */
      title?: string;
    };
    /**
     * The project ID.
     */
    id?: string;
  };
  /**
   * The details for events with this `type`.
   */
  'rate_limit.deleted'?: {
    /**
     * The rate limit ID
     */
    id?: string;
  };
  /**
   * The details for events with this `type`.
   */
  'rate_limit.updated'?: {
    /**
     * The payload used to update the rate limits.
     */
    changes_requested?: {
      /**
       * The maximum batch input tokens per day. Only relevant for certain models.
       */
      batch_1_day_max_input_tokens?: number;
      /**
       * The maximum audio megabytes per minute. Only relevant for certain models.
       */
      max_audio_megabytes_per_1_minute?: number;
      /**
       * The maximum images per minute. Only relevant for certain models.
       */
      max_images_per_1_minute?: number;
      /**
       * The maximum requests per day. Only relevant for certain models.
       */
      max_requests_per_1_day?: number;
      /**
       * The maximum requests per minute.
       */
      max_requests_per_1_minute?: number;
      /**
       * The maximum tokens per minute.
       */
      max_tokens_per_1_minute?: number;
    };
    /**
     * The rate limit ID
     */
    id?: string;
  };
  /**
   * The details for events with this `type`.
   */
  'service_account.created'?: {
    /**
     * The payload used to create the service account.
     */
    data?: {
      /**
       * The role of the service account. Is either `owner` or `member`.
       */
      role?: string;
    };
    /**
     * The service account ID.
     */
    id?: string;
  };
  /**
   * The details for events with this `type`.
   */
  'service_account.deleted'?: {
    /**
     * The service account ID.
     */
    id?: string;
  };
  /**
   * The details for events with this `type`.
   */
  'service_account.updated'?: {
    /**
     * The payload used to updated the service account.
     */
    changes_requested?: {
      /**
       * The role of the service account. Is either `owner` or `member`.
       */
      role?: string;
    };
    /**
     * The service account ID.
     */
    id?: string;
  };
  type: AuditLogEventType;
  /**
   * The details for events with this `type`.
   */
  'user.added'?: {
    /**
     * The payload used to add the user to the project.
     */
    data?: {
      /**
       * The role of the user. Is either `owner` or `member`.
       */
      role?: string;
    };
    /**
     * The user ID.
     */
    id?: string;
  };
  /**
   * The details for events with this `type`.
   */
  'user.deleted'?: {
    /**
     * The user ID.
     */
    id?: string;
  };
  /**
   * The details for events with this `type`.
   */
  'user.updated'?: {
    /**
     * The payload used to update the user.
     */
    changes_requested?: {
      /**
       * The role of the user. Is either `owner` or `member`.
       */
      role?: string;
    };
    /**
     * The project ID.
     */
    id?: string;
  };
};

/**
 * The actor who performed the audit logged action.
 */
export type AuditLogActor = {
  api_key?: AuditLogActorApiKey;
  session?: AuditLogActorSession;
  /**
   * The type of actor. Is either `session` or `api_key`.
   */
  type?: 'session' | 'api_key';
};

/**
 * The API Key used to perform the audit logged action.
 */
export type AuditLogActorApiKey = {
  /**
   * The tracking id of the API key.
   */
  id?: string;
  service_account?: AuditLogActorServiceAccount;
  /**
   * The type of API key. Can be either `user` or `service_account`.
   */
  type?: 'user' | 'service_account';
  user?: AuditLogActorUser;
};

/**
 * The service account that performed the audit logged action.
 */
export type AuditLogActorServiceAccount = {
  /**
   * The service account id.
   */
  id?: string;
};

/**
 * The session in which the audit logged action was performed.
 */
export type AuditLogActorSession = {
  /**
   * The IP address from which the action was performed.
   */
  ip_address?: string;
  user?: AuditLogActorUser;
};

/**
 * The user who performed the audit logged action.
 */
export type AuditLogActorUser = {
  /**
   * The user email.
   */
  email?: string;
  /**
   * The user id.
   */
  id?: string;
};

/**
 * The event type.
 */
export const AuditLogEventType = {
  API_KEY_CREATED: 'api_key.created',
  API_KEY_DELETED: 'api_key.deleted',
  API_KEY_UPDATED: 'api_key.updated',
  CHECKPOINT_PERMISSION_CREATED: 'checkpoint_permission.created',
  CHECKPOINT_PERMISSION_DELETED: 'checkpoint_permission.deleted',
  INVITE_ACCEPTED: 'invite.accepted',
  INVITE_DELETED: 'invite.deleted',
  INVITE_SENT: 'invite.sent',
  LOGIN_FAILED: 'login.failed',
  LOGIN_SUCCEEDED: 'login.succeeded',
  LOGOUT_FAILED: 'logout.failed',
  LOGOUT_SUCCEEDED: 'logout.succeeded',
  ORGANIZATION_UPDATED: 'organization.updated',
  PROJECT_ARCHIVED: 'project.archived',
  PROJECT_CREATED: 'project.created',
  PROJECT_UPDATED: 'project.updated',
  RATE_LIMIT_DELETED: 'rate_limit.deleted',
  RATE_LIMIT_UPDATED: 'rate_limit.updated',
  SERVICE_ACCOUNT_CREATED: 'service_account.created',
  SERVICE_ACCOUNT_DELETED: 'service_account.deleted',
  SERVICE_ACCOUNT_UPDATED: 'service_account.updated',
  USER_ADDED: 'user.added',
  USER_DELETED: 'user.deleted',
  USER_UPDATED: 'user.updated',
} as const;

/**
 * The event type.
 */
export type AuditLogEventType =
  (typeof AuditLogEventType)[keyof typeof AuditLogEventType];

/**
 * Auto Chunking Strategy
 *
 * The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.
 */
export type AutoChunkingStrategyRequestParam = {
  /**
   * Always `auto`.
   */
  type: 'auto';
};

export type Batch = {
  /**
   * The Unix timestamp (in seconds) for when the batch was cancelled.
   */
  cancelled_at?: number;
  /**
   * The Unix timestamp (in seconds) for when the batch started cancelling.
   */
  cancelling_at?: number;
  /**
   * The Unix timestamp (in seconds) for when the batch was completed.
   */
  completed_at?: number;
  /**
   * The time frame within which the batch should be processed.
   */
  completion_window: string;
  /**
   * The Unix timestamp (in seconds) for when the batch was created.
   */
  created_at: number;
  /**
   * The OpenAI API endpoint used by the batch.
   */
  endpoint: string;
  /**
   * The ID of the file containing the outputs of requests with errors.
   */
  error_file_id?: string;
  errors?: {
    data?: Array<BatchError>;
    /**
     * The object type, which is always `list`.
     */
    object?: string;
  };
  /**
   * The Unix timestamp (in seconds) for when the batch expired.
   */
  expired_at?: number;
  /**
   * The Unix timestamp (in seconds) for when the batch will expire.
   */
  expires_at?: number;
  /**
   * The Unix timestamp (in seconds) for when the batch failed.
   */
  failed_at?: number;
  /**
   * The Unix timestamp (in seconds) for when the batch started finalizing.
   */
  finalizing_at?: number;
  id: string;
  /**
   * The Unix timestamp (in seconds) for when the batch started processing.
   */
  in_progress_at?: number;
  /**
   * The ID of the input file for the batch.
   */
  input_file_id: string;
  metadata?: Metadata;
  /**
   * The object type, which is always `batch`.
   */
  object: 'batch';
  /**
   * The ID of the file containing the outputs of successfully executed requests.
   */
  output_file_id?: string;
  request_counts?: BatchRequestCounts;
  /**
   * The current status of the batch.
   */
  status:
    | 'validating'
    | 'failed'
    | 'in_progress'
    | 'finalizing'
    | 'completed'
    | 'expired'
    | 'cancelling'
    | 'cancelled';
};

/**
 * File expiration policy
 *
 * The expiration policy for the output and/or error file that are generated for a batch.
 */
export type BatchFileExpirationAfter = {
  /**
   * Anchor timestamp after which the expiration policy applies. Supported anchors: `created_at`. Note that the anchor is the file creation time, not the time the batch is created.
   */
  anchor: 'created_at';
  /**
   * The number of seconds after the anchor time that the file will expire. Must be between 3600 (1 hour) and 2592000 (30 days).
   */
  seconds: number;
};

/**
 * The per-line object of the batch input file
 */
export type BatchRequestInput = {
  /**
   * A developer-provided per-request id that will be used to match outputs to inputs. Must be unique for each request in a batch.
   */
  custom_id?: string;
  /**
   * The HTTP method to be used for the request. Currently only `POST` is supported.
   */
  method?: 'POST';
  /**
   * The OpenAI API relative URL to be used for the request. Currently `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported.
   */
  url?: string;
};

/**
 * The per-line object of the batch output and error files
 */
export type BatchRequestOutput = {
  /**
   * A developer-provided per-request id that will be used to match outputs to inputs.
   */
  custom_id?: string;
  /**
   * For requests that failed with a non-HTTP error, this will contain more information on the cause of the failure.
   */
  error?: {
    /**
     * A machine-readable error code.
     */
    code?: string;
    /**
     * A human-readable error message.
     */
    message?: string;
  };
  id?: string;
  response?: {
    /**
     * The JSON body of the response
     */
    body?: {
      [key: string]: unknown;
    };
    /**
     * An unique identifier for the OpenAI API request. Please include this request ID when contacting support.
     */
    request_id?: string;
    /**
     * The HTTP status code of the response
     */
    status_code?: number;
  };
};

/**
 * Represents an individual `certificate` uploaded to the organization.
 */
export type Certificate = {
  /**
   * Whether the certificate is currently active at the specified scope. Not returned when getting details for a specific certificate.
   */
  active?: boolean;
  certificate_details: {
    /**
     * The content of the certificate in PEM format.
     */
    content?: string;
    /**
     * The Unix timestamp (in seconds) of when the certificate expires.
     */
    expires_at?: number;
    /**
     * The Unix timestamp (in seconds) of when the certificate becomes valid.
     */
    valid_at?: number;
  };
  /**
   * The Unix timestamp (in seconds) of when the certificate was uploaded.
   */
  created_at: number;
  /**
   * The identifier, which can be referenced in API endpoints
   */
  id: string;
  /**
   * The name of the certificate.
   */
  name: string;
  /**
   * The object type.
   *
   * - If creating, updating, or getting a specific certificate, the object type is `certificate`.
   * - If listing, activating, or deactivating certificates for the organization, the object type is `organization.certificate`.
   * - If listing, activating, or deactivating certificates for a project, the object type is `organization.project.certificate`.
   *
   */
  object:
    | 'certificate'
    | 'organization.certificate'
    | 'organization.project.certificate';
};

/**
 * Allowed tools
 *
 * Constrains the tools available to the model to a pre-defined set.
 *
 */
export type ChatCompletionAllowedTools = {
  /**
   * Constrains the tools available to the model to a pre-defined set.
   *
   * `auto` allows the model to pick from among the allowed tools and generate a
   * message.
   *
   * `required` requires the model to call one or more of the allowed tools.
   *
   */
  mode: 'auto' | 'required';
  /**
   * A list of tool definitions that the model should be allowed to call.
   *
   * For the Chat Completions API, the list of tool definitions might look like:
   * ```json
   * [
   * { "type": "function", "function": { "name": "get_weather" } },
   * { "type": "function", "function": { "name": "get_time" } }
   * ]
   * ```
   *
   */
  tools: Array<{
    [key: string]: unknown;
  }>;
};

/**
 * Allowed tools
 *
 * Constrains the tools available to the model to a pre-defined set.
 *
 */
export type ChatCompletionAllowedToolsChoice = {
  allowed_tools: ChatCompletionAllowedTools;
  /**
   * Allowed tool configuration type. Always `allowed_tools`.
   */
  type: 'allowed_tools';
};

export type ChatCompletionDeleted = {
  /**
   * Whether the chat completion was deleted.
   */
  deleted: boolean;
  /**
   * The ID of the chat completion that was deleted.
   */
  id: string;
  /**
   * The type of object being deleted.
   */
  object: 'chat.completion.deleted';
};

/**
 * Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
 *
 */
export type ChatCompletionFunctionCallOption = {
  /**
   * The name of the function to call.
   */
  name: string;
};

/**
 * @deprecated
 */
export type ChatCompletionFunctions = {
  /**
   * A description of what the function does, used by the model to choose when and how to call the function.
   */
  description?: string;
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  parameters?: FunctionParameters;
};

/**
 * ChatCompletionList
 *
 * An object representing a list of Chat Completions.
 *
 */
export type ChatCompletionList = {
  /**
   * An array of chat completion objects.
   *
   */
  data: Array<CreateChatCompletionResponse>;
  /**
   * The identifier of the first chat completion in the data array.
   */
  first_id: string;
  /**
   * Indicates whether there are more Chat Completions available.
   */
  has_more: boolean;
  /**
   * The identifier of the last chat completion in the data array.
   */
  last_id: string;
  /**
   * The type of this object. It is always set to "list".
   *
   */
  object: 'list';
};

/**
 * Custom tool call
 *
 * A call to a custom tool created by the model.
 *
 */
export type ChatCompletionMessageCustomToolCall = {
  /**
   * The custom tool that the model called.
   */
  custom: {
    /**
     * The input for the custom tool call generated by the model.
     */
    input: string;
    /**
     * The name of the custom tool to call.
     */
    name: string;
  };
  /**
   * The ID of the tool call.
   */
  id: string;
  /**
   * The type of the tool. Always `custom`.
   */
  type: 'custom';
};

/**
 * ChatCompletionMessageList
 *
 * An object representing a list of chat completion messages.
 *
 */
export type ChatCompletionMessageList = {
  /**
   * An array of chat completion message objects.
   *
   */
  data: Array<
    ChatCompletionResponseMessage & {
      /**
       * If a content parts array was provided, this is an array of `text` and `image_url` parts.
       * Otherwise, null.
       *
       */
      content_parts?: Array<
        | ChatCompletionRequestMessageContentPartText
        | ChatCompletionRequestMessageContentPartImage
      >;
      /**
       * The identifier of the chat message.
       */
      id: string;
    }
  >;
  /**
   * The identifier of the first chat message in the data array.
   */
  first_id: string;
  /**
   * Indicates whether there are more chat messages available.
   */
  has_more: boolean;
  /**
   * The identifier of the last chat message in the data array.
   */
  last_id: string;
  /**
   * The type of this object. It is always set to "list".
   *
   */
  object: 'list';
};

/**
 * Function tool call
 *
 * A call to a function tool created by the model.
 *
 */
export type ChatCompletionMessageToolCall = {
  /**
   * The function that the model called.
   */
  function: {
    /**
     * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
     */
    arguments: string;
    /**
     * The name of the function to call.
     */
    name: string;
  };
  /**
   * The ID of the tool call.
   */
  id: string;
  /**
   * The type of the tool. Currently, only `function` is supported.
   */
  type: 'function';
};

export type ChatCompletionMessageToolCallChunk = {
  function?: {
    /**
     * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
     */
    arguments?: string;
    /**
     * The name of the function to call.
     */
    name?: string;
  };
  /**
   * The ID of the tool call.
   */
  id?: string;
  index: number;
  /**
   * The type of the tool. Currently, only `function` is supported.
   */
  type?: 'function';
};

/**
 * The tool calls generated by the model, such as function calls.
 */
export type ChatCompletionMessageToolCalls = Array<
  | ({
      type?: 'ChatCompletionMessageToolCall';
    } & ChatCompletionMessageToolCall)
  | ({
      type?: 'ChatCompletionMessageCustomToolCall';
    } & ChatCompletionMessageCustomToolCall)
>;

/**
 * Output types that you would like the model to generate for this request.
 * Most models are capable of generating text, which is the default:
 *
 * `["text"]`
 *
 * The `gpt-4o-audio-preview` model can also be used to [generate audio](https://platform.openai.com/docs/guides/audio). To
 * request that this model generate both text and audio responses, you can
 * use:
 *
 * `["text", "audio"]`
 *
 */
export type ChatCompletionModalities = Array<'text' | 'audio'>;

/**
 * Function tool choice
 *
 * Specifies a tool the model should use. Use to force the model to call a specific function.
 */
export type ChatCompletionNamedToolChoice = {
  function: {
    /**
     * The name of the function to call.
     */
    name: string;
  };
  /**
   * For function calling, the type is always `function`.
   */
  type: 'function';
};

/**
 * Custom tool choice
 *
 * Specifies a tool the model should use. Use to force the model to call a specific custom tool.
 */
export type ChatCompletionNamedToolChoiceCustom = {
  custom: {
    /**
     * The name of the custom tool to call.
     */
    name: string;
  };
  /**
   * For custom tool calling, the type is always `custom`.
   */
  type: 'custom';
};

/**
 * Assistant message
 *
 * Messages sent by the model in response to user messages.
 *
 */
export type ChatCompletionRequestAssistantMessage = {
  /**
   * Data about a previous audio response from the model.
   * [Learn more](https://platform.openai.com/docs/guides/audio).
   *
   */
  audio?: {
    /**
     * Unique identifier for a previous audio response from the model.
     *
     */
    id: string;
  };
  /**
   * The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
   *
   */
  content?: string | Array<ChatCompletionRequestAssistantMessageContentPart>;
  /**
   * Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
   *
   * @deprecated
   */
  function_call?: {
    /**
     * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
     */
    arguments: string;
    /**
     * The name of the function to call.
     */
    name: string;
  };
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string;
  /**
   * The refusal message by the assistant.
   */
  refusal?: string;
  /**
   * The role of the messages author, in this case `assistant`.
   */
  role: 'assistant';
  tool_calls?: ChatCompletionMessageToolCalls;
};

export type ChatCompletionRequestAssistantMessageContentPart =
  | ({
      type?: 'ChatCompletionRequestMessageContentPartText';
    } & ChatCompletionRequestMessageContentPartText)
  | ({
      type?: 'ChatCompletionRequestMessageContentPartRefusal';
    } & ChatCompletionRequestMessageContentPartRefusal);

/**
 * Developer message
 *
 * Developer-provided instructions that the model should follow, regardless of
 * messages sent by the user. With o1 models and newer, `developer` messages
 * replace the previous `system` messages.
 *
 */
export type ChatCompletionRequestDeveloperMessage = {
  /**
   * The contents of the developer message.
   */
  content: string | Array<ChatCompletionRequestMessageContentPartText>;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string;
  /**
   * The role of the messages author, in this case `developer`.
   */
  role: 'developer';
};

/**
 * Function message
 *
 * @deprecated
 */
export type ChatCompletionRequestFunctionMessage = {
  /**
   * The contents of the function message.
   */
  content: string;
  /**
   * The name of the function to call.
   */
  name: string;
  /**
   * The role of the messages author, in this case `function`.
   */
  role: 'function';
};

export type ChatCompletionRequestMessage =
  | ({
      role?: 'ChatCompletionRequestDeveloperMessage';
    } & ChatCompletionRequestDeveloperMessage)
  | ({
      role?: 'ChatCompletionRequestSystemMessage';
    } & ChatCompletionRequestSystemMessage)
  | ({
      role?: 'ChatCompletionRequestUserMessage';
    } & ChatCompletionRequestUserMessage)
  | ({
      role?: 'ChatCompletionRequestAssistantMessage';
    } & ChatCompletionRequestAssistantMessage)
  | ({
      role?: 'ChatCompletionRequestToolMessage';
    } & ChatCompletionRequestToolMessage)
  | ({
      role?: 'ChatCompletionRequestFunctionMessage';
    } & ChatCompletionRequestFunctionMessage);

/**
 * Audio content part
 *
 * Learn about [audio inputs](https://platform.openai.com/docs/guides/audio).
 *
 */
export type ChatCompletionRequestMessageContentPartAudio = {
  input_audio: {
    /**
     * Base64 encoded audio data.
     */
    data: string;
    /**
     * The format of the encoded audio data. Currently supports "wav" and "mp3".
     *
     */
    format: 'wav' | 'mp3';
  };
  /**
   * The type of the content part. Always `input_audio`.
   */
  type: 'input_audio';
};

/**
 * File content part
 *
 * Learn about [file inputs](https://platform.openai.com/docs/guides/text) for text generation.
 *
 */
export type ChatCompletionRequestMessageContentPartFile = {
  file: {
    /**
     * The base64 encoded file data, used when passing the file to the model
     * as a string.
     *
     */
    file_data?: string;
    /**
     * The ID of an uploaded file to use as input.
     *
     */
    file_id?: string;
    /**
     * The name of the file, used when passing the file to the model as a
     * string.
     *
     */
    filename?: string;
  };
  /**
   * The type of the content part. Always `file`.
   */
  type: 'file';
};

/**
 * Image content part
 *
 * Learn about [image inputs](https://platform.openai.com/docs/guides/vision).
 *
 */
export type ChatCompletionRequestMessageContentPartImage = {
  image_url: {
    /**
     * Specifies the detail level of the image. Learn more in the [Vision guide](https://platform.openai.com/docs/guides/vision#low-or-high-fidelity-image-understanding).
     */
    detail?: 'auto' | 'low' | 'high';
    /**
     * Either a URL of the image or the base64 encoded image data.
     */
    url: string;
  };
  /**
   * The type of the content part.
   */
  type: 'image_url';
};

/**
 * Refusal content part
 */
export type ChatCompletionRequestMessageContentPartRefusal = {
  /**
   * The refusal message generated by the model.
   */
  refusal: string;
  /**
   * The type of the content part.
   */
  type: 'refusal';
};

/**
 * Text content part
 *
 * Learn about [text inputs](https://platform.openai.com/docs/guides/text-generation).
 *
 */
export type ChatCompletionRequestMessageContentPartText = {
  /**
   * The text content.
   */
  text: string;
  /**
   * The type of the content part.
   */
  type: 'text';
};

/**
 * System message
 *
 * Developer-provided instructions that the model should follow, regardless of
 * messages sent by the user. With o1 models and newer, use `developer` messages
 * for this purpose instead.
 *
 */
export type ChatCompletionRequestSystemMessage = {
  /**
   * The contents of the system message.
   */
  content: string | Array<ChatCompletionRequestSystemMessageContentPart>;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string;
  /**
   * The role of the messages author, in this case `system`.
   */
  role: 'system';
};

export type ChatCompletionRequestSystemMessageContentPart =
  ChatCompletionRequestMessageContentPartText;

/**
 * Tool message
 */
export type ChatCompletionRequestToolMessage = {
  /**
   * The contents of the tool message.
   */
  content: string | Array<ChatCompletionRequestToolMessageContentPart>;
  /**
   * The role of the messages author, in this case `tool`.
   */
  role: 'tool';
  /**
   * Tool call that this message is responding to.
   */
  tool_call_id: string;
};

export type ChatCompletionRequestToolMessageContentPart =
  ChatCompletionRequestMessageContentPartText;

/**
 * User message
 *
 * Messages sent by an end user, containing prompts or additional context
 * information.
 *
 */
export type ChatCompletionRequestUserMessage = {
  /**
   * The contents of the user message.
   *
   */
  content: string | Array<ChatCompletionRequestUserMessageContentPart>;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string;
  /**
   * The role of the messages author, in this case `user`.
   */
  role: 'user';
};

export type ChatCompletionRequestUserMessageContentPart =
  | ({
      type?: 'ChatCompletionRequestMessageContentPartText';
    } & ChatCompletionRequestMessageContentPartText)
  | ({
      type?: 'ChatCompletionRequestMessageContentPartImage';
    } & ChatCompletionRequestMessageContentPartImage)
  | ({
      type?: 'ChatCompletionRequestMessageContentPartAudio';
    } & ChatCompletionRequestMessageContentPartAudio)
  | ({
      type?: 'ChatCompletionRequestMessageContentPartFile';
    } & ChatCompletionRequestMessageContentPartFile);

/**
 * A chat completion message generated by the model.
 */
export type ChatCompletionResponseMessage = {
  /**
   * Annotations for the message, when applicable, as when using the
   * [web search tool](https://platform.openai.com/docs/guides/tools-web-search?api-mode=chat).
   *
   */
  annotations?: Array<{
    /**
     * The type of the URL citation. Always `url_citation`.
     */
    type: 'url_citation';
    /**
     * A URL citation when using web search.
     */
    url_citation: {
      /**
       * The index of the last character of the URL citation in the message.
       */
      end_index: number;
      /**
       * The index of the first character of the URL citation in the message.
       */
      start_index: number;
      /**
       * The title of the web resource.
       */
      title: string;
      /**
       * The URL of the web resource.
       */
      url: string;
    };
  }>;
  /**
   * If the audio output modality is requested, this object contains data
   * about the audio response from the model. [Learn more](https://platform.openai.com/docs/guides/audio).
   *
   */
  audio?: {
    /**
     * Base64 encoded audio bytes generated by the model, in the format
     * specified in the request.
     *
     */
    data: string;
    /**
     * The Unix timestamp (in seconds) for when this audio response will
     * no longer be accessible on the server for use in multi-turn
     * conversations.
     *
     */
    expires_at: number;
    /**
     * Unique identifier for this audio response.
     */
    id: string;
    /**
     * Transcript of the audio generated by the model.
     */
    transcript: string;
  };
  /**
   * The contents of the message.
   */
  content: string;
  /**
   * Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
   *
   * @deprecated
   */
  function_call?: {
    /**
     * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
     */
    arguments: string;
    /**
     * The name of the function to call.
     */
    name: string;
  };
  /**
   * The refusal message generated by the model.
   */
  refusal: string;
  /**
   * The role of the author of this message.
   */
  role: 'assistant';
  tool_calls?: ChatCompletionMessageToolCalls;
};

/**
 * The role of the author of a message
 */
export const ChatCompletionRole = {
  ASSISTANT: 'assistant',
  DEVELOPER: 'developer',
  FUNCTION: 'function',
  SYSTEM: 'system',
  TOOL: 'tool',
  USER: 'user',
} as const;

/**
 * The role of the author of a message
 */
export type ChatCompletionRole =
  (typeof ChatCompletionRole)[keyof typeof ChatCompletionRole];

/**
 * Options for streaming response. Only set this when you set `stream: true`.
 *
 */
export type ChatCompletionStreamOptions = {
  /**
   * When true, stream obfuscation will be enabled. Stream obfuscation adds
   * random characters to an `obfuscation` field on streaming delta events to
   * normalize payload sizes as a mitigation to certain side-channel attacks.
   * These obfuscation fields are included by default, but add a small amount
   * of overhead to the data stream. You can set `include_obfuscation` to
   * false to optimize for bandwidth if you trust the network links between
   * your application and the OpenAI API.
   *
   */
  include_obfuscation?: boolean;
  /**
   * If set, an additional chunk will be streamed before the `data: [DONE]`
   * message. The `usage` field on this chunk shows the token usage statistics
   * for the entire request, and the `choices` field will always be an empty
   * array.
   *
   * All other chunks will also include a `usage` field, but with a null
   * value. **NOTE:** If the stream is interrupted, you may not receive the
   * final usage chunk which contains the total token usage for the request.
   *
   */
  include_usage?: boolean;
};

/**
 * A chat completion delta generated by streamed model responses.
 */
export type ChatCompletionStreamResponseDelta = {
  /**
   * The contents of the chunk message.
   */
  content?: string;
  /**
   * Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
   *
   * @deprecated
   */
  function_call?: {
    /**
     * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
     */
    arguments?: string;
    /**
     * The name of the function to call.
     */
    name?: string;
  };
  /**
   * The refusal message generated by the model.
   */
  refusal?: string;
  /**
   * The role of the author of this message.
   */
  role?: 'developer' | 'system' | 'user' | 'assistant' | 'tool';
  tool_calls?: Array<ChatCompletionMessageToolCallChunk>;
};

export type ChatCompletionTokenLogprob = {
  /**
   * A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
   */
  bytes: Array<number>;
  /**
   * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
   */
  logprob: number;
  /**
   * The token.
   */
  token: string;
  /**
   * List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
   */
  top_logprobs: Array<{
    /**
     * A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
     */
    bytes: Array<number>;
    /**
     * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
     */
    logprob: number;
    /**
     * The token.
     */
    token: string;
  }>;
};

/**
 * Function tool
 *
 * A function tool that can be used to generate a response.
 *
 */
export type ChatCompletionTool = {
  function: FunctionObject;
  /**
   * The type of the tool. Currently, only `function` is supported.
   */
  type: 'function';
};

/**
 * Controls which (if any) tool is called by the model.
 * `none` means the model will not call any tool and instead generates a message.
 * `auto` means the model can pick between generating a message or calling one or more tools.
 * `required` means the model must call one or more tools.
 * Specifying a particular tool via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
 *
 * `none` is the default when no tools are present. `auto` is the default if tools are present.
 *
 */
export type ChatCompletionToolChoiceOption =
  | 'none'
  | 'auto'
  | 'required'
  | ChatCompletionAllowedToolsChoice
  | ChatCompletionNamedToolChoice
  | ChatCompletionNamedToolChoiceCustom;

/**
 * The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. Only applicable if `file_ids` is non-empty.
 */
export type ChunkingStrategyRequestParam =
  | ({
      type?: 'AutoChunkingStrategyRequestParam';
    } & AutoChunkingStrategyRequestParam)
  | ({
      type?: 'StaticChunkingStrategyRequestParam';
    } & StaticChunkingStrategyRequestParam);

/**
 * Click
 *
 * A click action.
 *
 */
export type Click = {
  /**
   * Indicates which mouse button was pressed during the click. One of `left`, `right`, `wheel`, `back`, or `forward`.
   *
   */
  button: 'left' | 'right' | 'wheel' | 'back' | 'forward';
  /**
   * Specifies the event type. For a click action, this property is
   * always set to `click`.
   *
   */
  type: 'click';
  /**
   * The x-coordinate where the click occurred.
   *
   */
  x: number;
  /**
   * The y-coordinate where the click occurred.
   *
   */
  y: number;
};

/**
 * Code interpreter file output
 *
 * The output of a code interpreter tool call that is a file.
 *
 */
export type CodeInterpreterFileOutput = {
  files: Array<{
    /**
     * The ID of the file.
     *
     */
    file_id: string;
    /**
     * The MIME type of the file.
     *
     */
    mime_type: string;
  }>;
  /**
   * The type of the code interpreter file output. Always `files`.
   *
   */
  type: 'files';
};

/**
 * Code interpreter output image
 *
 * The image output from the code interpreter.
 *
 */
export type CodeInterpreterOutputImage = {
  /**
   * The type of the output. Always 'image'.
   */
  type: 'image';
  /**
   * The URL of the image output from the code interpreter.
   */
  url: string;
};

/**
 * Code interpreter output logs
 *
 * The logs output from the code interpreter.
 *
 */
export type CodeInterpreterOutputLogs = {
  /**
   * The logs output from the code interpreter.
   */
  logs: string;
  /**
   * The type of the output. Always 'logs'.
   */
  type: 'logs';
};

/**
 * Code interpreter text output
 *
 * The output of a code interpreter tool call that is text.
 *
 */
export type CodeInterpreterTextOutput = {
  /**
   * The logs of the code interpreter tool call.
   *
   */
  logs: string;
  /**
   * The type of the code interpreter text output. Always `logs`.
   *
   */
  type: 'logs';
};

/**
 * Code interpreter
 *
 * A tool that runs Python code to help generate a response to a prompt.
 *
 */
export type CodeInterpreterTool = {
  /**
   * The code interpreter container. Can be a container ID or an object that
   * specifies uploaded file IDs to make available to your code.
   *
   */
  container: string | CodeInterpreterToolAuto;
  /**
   * The type of the code interpreter tool. Always `code_interpreter`.
   *
   */
  type: 'code_interpreter';
};

/**
 * CodeInterpreterContainerAuto
 *
 * Configuration for a code interpreter container. Optionally specify the IDs
 * of the files to run the code on.
 *
 */
export type CodeInterpreterToolAuto = {
  /**
   * An optional list of uploaded files to make available to your code.
   *
   */
  file_ids?: Array<string>;
  /**
   * Always `auto`.
   */
  type: 'auto';
};

/**
 * Code interpreter tool call
 *
 * A tool call to run code.
 *
 */
export type CodeInterpreterToolCall = {
  /**
   * The code to run, or null if not available.
   *
   */
  code: string;
  /**
   * The ID of the container used to run the code.
   *
   */
  container_id: string;
  /**
   * The unique ID of the code interpreter tool call.
   *
   */
  id: string;
  /**
   * The outputs generated by the code interpreter, such as logs or images.
   * Can be null if no outputs are available.
   *
   */
  outputs: Array<
    | ({
        type?: 'CodeInterpreterOutputLogs';
      } & CodeInterpreterOutputLogs)
    | ({
        type?: 'CodeInterpreterOutputImage';
      } & CodeInterpreterOutputImage)
  >;
  /**
   * The status of the code interpreter tool call. Valid values are `in_progress`, `completed`, `incomplete`, `interpreting`, and `failed`.
   *
   */
  status:
    | 'in_progress'
    | 'completed'
    | 'incomplete'
    | 'interpreting'
    | 'failed';
  /**
   * The type of the code interpreter tool call. Always `code_interpreter_call`.
   *
   */
  type: 'code_interpreter_call';
};

/**
 * Comparison Filter
 *
 * A filter used to compare a specified attribute key to a given value using a defined comparison operation.
 *
 */
export type ComparisonFilter = {
  /**
   * The key to compare against the value.
   */
  key: string;
  /**
   * Specifies the comparison operator: `eq`, `ne`, `gt`, `gte`, `lt`, `lte`.
   * - `eq`: equals
   * - `ne`: not equal
   * - `gt`: greater than
   * - `gte`: greater than or equal
   * - `lt`: less than
   * - `lte`: less than or equal
   *
   */
  type: 'eq' | 'ne' | 'gt' | 'gte' | 'lt' | 'lte';
  /**
   * The value to compare against the attribute key; supports string, number, or boolean types.
   */
  value: string | number | boolean;
};

export type CompleteUploadRequest = {
  /**
   * The optional md5 checksum for the file contents to verify if the bytes uploaded matches what you expect.
   *
   */
  md5?: string;
  /**
   * The ordered list of Part IDs.
   *
   */
  part_ids: Array<string>;
};

/**
 * Usage statistics for the completion request.
 */
export type CompletionUsage = {
  /**
   * Number of tokens in the generated completion.
   */
  completion_tokens: number;
  /**
   * Breakdown of tokens used in a completion.
   */
  completion_tokens_details?: {
    /**
     * When using Predicted Outputs, the number of tokens in the
     * prediction that appeared in the completion.
     *
     */
    accepted_prediction_tokens?: number;
    /**
     * Audio input tokens generated by the model.
     */
    audio_tokens?: number;
    /**
     * Tokens generated by the model for reasoning.
     */
    reasoning_tokens?: number;
    /**
     * When using Predicted Outputs, the number of tokens in the
     * prediction that did not appear in the completion. However, like
     * reasoning tokens, these tokens are still counted in the total
     * completion tokens for purposes of billing, output, and context window
     * limits.
     *
     */
    rejected_prediction_tokens?: number;
  };
  /**
   * Number of tokens in the prompt.
   */
  prompt_tokens: number;
  /**
   * Breakdown of tokens used in the prompt.
   */
  prompt_tokens_details?: {
    /**
     * Audio input tokens present in the prompt.
     */
    audio_tokens?: number;
    /**
     * Cached tokens present in the prompt.
     */
    cached_tokens?: number;
  };
  /**
   * Total number of tokens used in the request (prompt + completion).
   */
  total_tokens: number;
};

/**
 * Compound Filter
 *
 * Combine multiple filters using `and` or `or`.
 */
export type CompoundFilter = {
  /**
   * Array of filters to combine. Items can be `ComparisonFilter` or `CompoundFilter`.
   */
  filters: Array<ComparisonFilter | unknown>;
  /**
   * Type of operation: `and` or `or`.
   */
  type: 'and' | 'or';
};

export type ComputerAction =
  | ({
      type?: 'Click';
    } & Click)
  | ({
      type?: 'DoubleClick';
    } & DoubleClick)
  | ({
      type?: 'Drag';
    } & Drag)
  | ({
      type?: 'KeyPress';
    } & KeyPress)
  | ({
      type?: 'Move';
    } & Move)
  | ({
      type?: 'Screenshot';
    } & Screenshot)
  | ({
      type?: 'Scroll';
    } & Scroll)
  | ({
      type?: 'Type';
    } & Type)
  | ({
      type?: 'Wait';
    } & Wait);

/**
 * A computer screenshot image used with the computer use tool.
 *
 */
export type ComputerScreenshotImage = {
  /**
   * The identifier of an uploaded file that contains the screenshot.
   */
  file_id?: string;
  /**
   * The URL of the screenshot image.
   */
  image_url?: string;
  /**
   * Specifies the event type. For a computer screenshot, this property is
   * always set to `computer_screenshot`.
   *
   */
  type: 'computer_screenshot';
};

/**
 * Computer tool call
 *
 * A tool call to a computer use tool. See the
 * [computer use guide](https://platform.openai.com/docs/guides/tools-computer-use) for more information.
 *
 */
export type ComputerToolCall = {
  action: ComputerAction;
  /**
   * An identifier used when responding to the tool call with output.
   *
   */
  call_id: string;
  /**
   * The unique ID of the computer call.
   */
  id: string;
  /**
   * The pending safety checks for the computer call.
   *
   */
  pending_safety_checks: Array<ComputerToolCallSafetyCheck>;
  /**
   * The status of the item. One of `in_progress`, `completed`, or
   * `incomplete`. Populated when items are returned via API.
   *
   */
  status: 'in_progress' | 'completed' | 'incomplete';
  /**
   * The type of the computer call. Always `computer_call`.
   */
  type: 'computer_call';
};

/**
 * Computer tool call output
 *
 * The output of a computer tool call.
 *
 */
export type ComputerToolCallOutput = {
  /**
   * The safety checks reported by the API that have been acknowledged by the
   * developer.
   *
   */
  acknowledged_safety_checks?: Array<ComputerToolCallSafetyCheck>;
  /**
   * The ID of the computer tool call that produced the output.
   *
   */
  call_id: string;
  /**
   * The ID of the computer tool call output.
   *
   */
  id?: string;
  output: ComputerScreenshotImage;
  /**
   * The status of the message input. One of `in_progress`, `completed`, or
   * `incomplete`. Populated when input items are returned via API.
   *
   */
  status?: 'in_progress' | 'completed' | 'incomplete';
  /**
   * The type of the computer tool call output. Always `computer_call_output`.
   *
   */
  type: 'computer_call_output';
};

export type ComputerToolCallOutputResource = ComputerToolCallOutput & {
  /**
   * The unique ID of the computer call tool output.
   *
   */
  id: string;
};

/**
 * A pending safety check for the computer call.
 *
 */
export type ComputerToolCallSafetyCheck = {
  /**
   * The type of the pending safety check.
   */
  code: string;
  /**
   * The ID of the pending safety check.
   */
  id: string;
  /**
   * Details about the pending safety check.
   */
  message: string;
};

export type ContainerFileListResource = {
  /**
   * A list of container files.
   */
  data: Array<ContainerFileResource>;
  /**
   * The ID of the first file in the list.
   */
  first_id: string;
  /**
   * Whether there are more files available.
   */
  has_more: boolean;
  /**
   * The ID of the last file in the list.
   */
  last_id: string;
  /**
   * The type of object returned, must be 'list'.
   */
  object: 'list';
};

/**
 * The container file object
 */
export type ContainerFileResource = {
  /**
   * Size of the file in bytes.
   */
  bytes: number;
  /**
   * The container this file belongs to.
   */
  container_id: string;
  /**
   * Unix timestamp (in seconds) when the file was created.
   */
  created_at: number;
  /**
   * Unique identifier for the file.
   */
  id: string;
  /**
   * The type of this object (`container.file`).
   */
  object: 'container.file';
  /**
   * Path of the file in the container.
   */
  path: string;
  /**
   * Source of the file (e.g., `user`, `assistant`).
   */
  source: string;
};

export type ContainerListResource = {
  /**
   * A list of containers.
   */
  data: Array<ContainerResource>;
  /**
   * The ID of the first container in the list.
   */
  first_id: string;
  /**
   * Whether there are more containers available.
   */
  has_more: boolean;
  /**
   * The ID of the last container in the list.
   */
  last_id: string;
  /**
   * The type of object returned, must be 'list'.
   */
  object: 'list';
};

/**
 * The container object
 */
export type ContainerResource = {
  /**
   * Unix timestamp (in seconds) when the container was created.
   */
  created_at: number;
  /**
   * The container will expire after this time period.
   * The anchor is the reference point for the expiration.
   * The minutes is the number of minutes after the anchor before the container expires.
   *
   */
  expires_after?: {
    /**
     * The reference point for the expiration.
     */
    anchor?: 'last_active_at';
    /**
     * The number of minutes after the anchor before the container expires.
     */
    minutes?: number;
  };
  /**
   * Unique identifier for the container.
   */
  id: string;
  /**
   * Name of the container.
   */
  name: string;
  /**
   * The type of this object.
   */
  object: string;
  /**
   * Status of the container (e.g., active, deleted).
   */
  status: string;
};

/**
 * Multi-modal input and output contents.
 *
 */
export type Content = InputContent | OutputContent;

/**
 * Coordinate
 *
 * An x/y coordinate pair, e.g. `{ x: 100, y: 200 }`.
 *
 */
export type Coordinate = {
  /**
   * The x-coordinate.
   *
   */
  x: number;
  /**
   * The y-coordinate.
   *
   */
  y: number;
};

/**
 * The aggregated costs details of the specific time bucket.
 */
export type CostsResult = {
  /**
   * The monetary value in its associated currency.
   */
  amount?: {
    /**
     * Lowercase ISO-4217 currency e.g. "usd"
     */
    currency?: string;
    /**
     * The numeric value of the cost.
     */
    value?: number;
  };
  /**
   * When `group_by=line_item`, this field provides the line item of the grouped costs result.
   */
  line_item?: string;
  object: 'organization.costs.result';
  /**
   * When `group_by=project_id`, this field provides the project ID of the grouped costs result.
   */
  project_id?: string;
};

export type CreateAssistantRequest = {
  /**
   * The description of the assistant. The maximum length is 512 characters.
   *
   */
  description?: string;
  /**
   * The system instructions that the assistant uses. The maximum length is 256,000 characters.
   *
   */
  instructions?: string;
  metadata?: Metadata;
  /**
   * ID of the model to use. You can use the [List models](https://platform.openai.com/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](https://platform.openai.com/docs/models) for descriptions of them.
   *
   */
  model: string | AssistantSupportedModels;
  /**
   * The name of the assistant. The maximum length is 256 characters.
   *
   */
  name?: string;
  reasoning_effort?: ReasoningEffort;
  response_format?: AssistantsApiResponseFormatOption;
  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
   *
   */
  temperature?: number;
  /**
   * A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
   *
   */
  tool_resources?: {
    code_interpreter?: {
      /**
       * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
       *
       */
      file_ids?: Array<string>;
    };
    file_search?: unknown & {
      /**
       * The [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
       *
       */
      vector_store_ids?: Array<string>;
      /**
       * A helper to create a [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) with file_ids and attach it to this assistant. There can be a maximum of 1 vector store attached to the assistant.
       *
       */
      vector_stores?: Array<{
        /**
         * The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
         */
        chunking_strategy?:
          | {
              /**
               * Always `auto`.
               */
              type: 'auto';
            }
          | {
              static: {
                /**
                 * The number of tokens that overlap between chunks. The default value is `400`.
                 *
                 * Note that the overlap must not exceed half of `max_chunk_size_tokens`.
                 *
                 */
                chunk_overlap_tokens: number;
                /**
                 * The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`.
                 */
                max_chunk_size_tokens: number;
              };
              /**
               * Always `static`.
               */
              type: 'static';
            };
        /**
         * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.
         *
         */
        file_ids?: Array<string>;
        metadata?: Metadata;
      }>;
    };
  };
  /**
   * A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
   *
   */
  tools?: Array<AssistantTool>;
  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
   *
   * We generally recommend altering this or temperature but not both.
   *
   */
  top_p?: number;
};

export type CreateChatCompletionRequest = CreateModelResponseProperties & {
  /**
   * Parameters for audio output. Required when audio output is requested with
   * `modalities: ["audio"]`. [Learn more](https://platform.openai.com/docs/guides/audio).
   *
   */
  audio?: {
    /**
     * Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,
     * `opus`, or `pcm16`.
     *
     */
    format: 'wav' | 'aac' | 'mp3' | 'flac' | 'opus' | 'pcm16';
    /**
     * The voice the model uses to respond. Supported voices are
     * `alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`, `nova`, `onyx`, `sage`, and `shimmer`.
     *
     */
    voice: VoiceIdsShared;
  };
  /**
   * Number between -2.0 and 2.0. Positive values penalize new tokens based on
   * their existing frequency in the text so far, decreasing the model's
   * likelihood to repeat the same line verbatim.
   *
   */
  frequency_penalty?: number;
  /**
   * Deprecated in favor of `tool_choice`.
   *
   * Controls which (if any) function is called by the model.
   *
   * `none` means the model will not call a function and instead generates a
   * message.
   *
   * `auto` means the model can pick between generating a message or calling a
   * function.
   *
   * Specifying a particular function via `{"name": "my_function"}` forces the
   * model to call that function.
   *
   * `none` is the default when no functions are present. `auto` is the default
   * if functions are present.
   *
   *
   * @deprecated
   */
  function_call?: 'none' | 'auto' | ChatCompletionFunctionCallOption;
  /**
   * Deprecated in favor of `tools`.
   *
   * A list of functions the model may generate JSON inputs for.
   *
   *
   * @deprecated
   */
  functions?: Array<ChatCompletionFunctions>;
  /**
   * Modify the likelihood of specified tokens appearing in the completion.
   *
   * Accepts a JSON object that maps tokens (specified by their token ID in the
   * tokenizer) to an associated bias value from -100 to 100. Mathematically,
   * the bias is added to the logits generated by the model prior to sampling.
   * The exact effect will vary per model, but values between -1 and 1 should
   * decrease or increase likelihood of selection; values like -100 or 100
   * should result in a ban or exclusive selection of the relevant token.
   *
   */
  logit_bias?: {
    [key: string]: number;
  };
  /**
   * Whether to return log probabilities of the output tokens or not. If true,
   * returns the log probabilities of each output token returned in the
   * `content` of `message`.
   *
   */
  logprobs?: boolean;
  /**
   * An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](https://platform.openai.com/docs/guides/reasoning).
   *
   */
  max_completion_tokens?: number;
  /**
   * The maximum number of [tokens](/tokenizer) that can be generated in the
   * chat completion. This value can be used to control
   * [costs](https://openai.com/api/pricing/) for text generated via API.
   *
   * This value is now deprecated in favor of `max_completion_tokens`, and is
   * not compatible with [o-series models](https://platform.openai.com/docs/guides/reasoning).
   *
   *
   * @deprecated
   */
  max_tokens?: number;
  /**
   * A list of messages comprising the conversation so far. Depending on the
   * [model](https://platform.openai.com/docs/models) you use, different message types (modalities) are
   * supported, like [text](https://platform.openai.com/docs/guides/text-generation),
   * [images](https://platform.openai.com/docs/guides/vision), and [audio](https://platform.openai.com/docs/guides/audio).
   *
   */
  messages: Array<ChatCompletionRequestMessage>;
  modalities?: ResponseModalities;
  /**
   * Model ID used to generate the response, like `gpt-4o` or `o3`. OpenAI
   * offers a wide range of models with different capabilities, performance
   * characteristics, and price points. Refer to the [model guide](https://platform.openai.com/docs/models)
   * to browse and compare available models.
   *
   */
  model: ModelIdsShared;
  /**
   * How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
   */
  n?: number;
  parallel_tool_calls?: ParallelToolCalls;
  /**
   * Configuration for a [Predicted Output](https://platform.openai.com/docs/guides/predicted-outputs),
   * which can greatly improve response times when large parts of the model
   * response are known ahead of time. This is most common when you are
   * regenerating a file with only minor changes to most of the content.
   *
   */
  prediction?: {
    type?: 'PredictionContent';
  } & PredictionContent;
  /**
   * Number between -2.0 and 2.0. Positive values penalize new tokens based on
   * whether they appear in the text so far, increasing the model's likelihood
   * to talk about new topics.
   *
   */
  presence_penalty?: number;
  reasoning_effort?: ReasoningEffort;
  /**
   * An object specifying the format that the model must output.
   *
   * Setting to `{ "type": "json_schema", "json_schema": {...} }` enables
   * Structured Outputs which ensures the model will match your supplied JSON
   * schema. Learn more in the [Structured Outputs
   * guide](https://platform.openai.com/docs/guides/structured-outputs).
   *
   * Setting to `{ "type": "json_object" }` enables the older JSON mode, which
   * ensures the message the model generates is valid JSON. Using `json_schema`
   * is preferred for models that support it.
   *
   */
  response_format?:
    | ResponseFormatText
    | ResponseFormatJsonSchema
    | ResponseFormatJsonObject;
  /**
   * This feature is in Beta.
   * If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
   * Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
   *
   *
   * @deprecated
   */
  seed?: number;
  stop?: StopConfiguration;
  /**
   * Whether or not to store the output of this chat completion request for
   * use in our [model distillation](https://platform.openai.com/docs/guides/distillation) or
   * [evals](https://platform.openai.com/docs/guides/evals) products.
   *
   * Supports text and image inputs. Note: image inputs over 8MB will be dropped.
   *
   */
  store?: boolean;
  /**
   * If set to true, the model response data will be streamed to the client
   * as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).
   * See the [Streaming section below](https://platform.openai.com/docs/api-reference/chat/streaming)
   * for more information, along with the [streaming responses](https://platform.openai.com/docs/guides/streaming-responses)
   * guide for more information on how to handle the streaming events.
   *
   */
  stream?: boolean;
  stream_options?: ChatCompletionStreamOptions;
  tool_choice?: ChatCompletionToolChoiceOption;
  /**
   * A list of tools the model may call. You can provide either
   * [custom tools](https://platform.openai.com/docs/guides/function-calling#custom-tools) or
   * [function tools](https://platform.openai.com/docs/guides/function-calling).
   *
   */
  tools?: Array<
    | ({
        type?: 'ChatCompletionTool';
      } & ChatCompletionTool)
    | ({
        type?: 'CustomToolChatCompletions';
      } & CustomToolChatCompletions)
  >;
  /**
   * An integer between 0 and 20 specifying the number of most likely tokens to
   * return at each token position, each with an associated log probability.
   * `logprobs` must be set to `true` if this parameter is used.
   *
   */
  top_logprobs?: number;
  verbosity?: Verbosity;
  /**
   * Web search
   *
   * This tool searches the web for relevant results to use in a response.
   * Learn more about the [web search tool](https://platform.openai.com/docs/guides/tools-web-search?api-mode=chat).
   *
   */
  web_search_options?: {
    search_context_size?: WebSearchContextSize;
    /**
     * Approximate location parameters for the search.
     *
     */
    user_location?: {
      approximate: WebSearchLocation;
      /**
       * The type of location approximation. Always `approximate`.
       *
       */
      type: 'approximate';
    };
  };
};

/**
 * Represents a chat completion response returned by model, based on the provided input.
 */
export type CreateChatCompletionResponse = {
  /**
   * A list of chat completion choices. Can be more than one if `n` is greater than 1.
   */
  choices: Array<{
    /**
     * The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
     * `length` if the maximum number of tokens specified in the request was reached,
     * `content_filter` if content was omitted due to a flag from our content filters,
     * `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
     *
     */
    finish_reason:
      | 'stop'
      | 'length'
      | 'tool_calls'
      | 'content_filter'
      | 'function_call';
    /**
     * The index of the choice in the list of choices.
     */
    index: number;
    /**
     * Log probability information for the choice.
     */
    logprobs: {
      /**
       * A list of message content tokens with log probability information.
       */
      content: Array<ChatCompletionTokenLogprob>;
      /**
       * A list of message refusal tokens with log probability information.
       */
      refusal: Array<ChatCompletionTokenLogprob>;
    };
    message: ChatCompletionResponseMessage;
  }>;
  /**
   * The Unix timestamp (in seconds) of when the chat completion was created.
   */
  created: number;
  /**
   * A unique identifier for the chat completion.
   */
  id: string;
  /**
   * The model used for the chat completion.
   */
  model: string;
  /**
   * The object type, which is always `chat.completion`.
   */
  object: 'chat.completion';
  service_tier?: ServiceTier;
  /**
   * This fingerprint represents the backend configuration that the model runs with.
   *
   * Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
   *
   *
   * @deprecated
   */
  system_fingerprint?: string;
  usage?: CompletionUsage;
};

/**
 * Represents a streamed chunk of a chat completion response returned
 * by the model, based on the provided input.
 * [Learn more](https://platform.openai.com/docs/guides/streaming-responses).
 *
 */
export type CreateChatCompletionStreamResponse = {
  /**
   * A list of chat completion choices. Can contain more than one elements if `n` is greater than 1. Can also be empty for the
   * last chunk if you set `stream_options: {"include_usage": true}`.
   *
   */
  choices: Array<{
    delta: ChatCompletionStreamResponseDelta;
    /**
     * The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
     * `length` if the maximum number of tokens specified in the request was reached,
     * `content_filter` if content was omitted due to a flag from our content filters,
     * `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
     *
     */
    finish_reason:
      | 'stop'
      | 'length'
      | 'tool_calls'
      | 'content_filter'
      | 'function_call';
    /**
     * The index of the choice in the list of choices.
     */
    index: number;
    /**
     * Log probability information for the choice.
     */
    logprobs?: {
      /**
       * A list of message content tokens with log probability information.
       */
      content: Array<ChatCompletionTokenLogprob>;
      /**
       * A list of message refusal tokens with log probability information.
       */
      refusal: Array<ChatCompletionTokenLogprob>;
    };
  }>;
  /**
   * The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp.
   */
  created: number;
  /**
   * A unique identifier for the chat completion. Each chunk has the same ID.
   */
  id: string;
  /**
   * The model to generate the completion.
   */
  model: string;
  /**
   * The object type, which is always `chat.completion.chunk`.
   */
  object: 'chat.completion.chunk';
  service_tier?: ServiceTier;
  /**
   * This fingerprint represents the backend configuration that the model runs with.
   * Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
   *
   *
   * @deprecated
   */
  system_fingerprint?: string;
  /**
   * An optional field that will only be present when you set
   * `stream_options: {"include_usage": true}` in your request. When present, it
   * contains a null value **except for the last chunk** which contains the
   * token usage statistics for the entire request.
   *
   * **NOTE:** If the stream is interrupted or cancelled, you may not
   * receive the final usage chunk which contains the total token usage for
   * the request.
   *
   */
  usage?: CompletionUsage;
};

export type CreateCompletionRequest = {
  /**
   * Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.
   *
   * When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.
   *
   * **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
   *
   */
  best_of?: number;
  /**
   * Echo back the prompt in addition to the completion
   *
   */
  echo?: boolean;
  /**
   * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
   *
   * [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation)
   *
   */
  frequency_penalty?: number;
  /**
   * Modify the likelihood of specified tokens appearing in the completion.
   *
   * Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
   *
   * As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.
   *
   */
  logit_bias?: {
    [key: string]: number;
  };
  /**
   * Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
   *
   * The maximum value for `logprobs` is 5.
   *
   */
  logprobs?: number;
  /**
   * The maximum number of [tokens](/tokenizer) that can be generated in the completion.
   *
   * The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
   *
   */
  max_tokens?: number;
  /**
   * ID of the model to use. You can use the [List models](https://platform.openai.com/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](https://platform.openai.com/docs/models) for descriptions of them.
   *
   */
  model: string | 'gpt-3.5-turbo-instruct' | 'davinci-002' | 'babbage-002';
  /**
   * How many completions to generate for each prompt.
   *
   * **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
   *
   */
  n?: number;
  /**
   * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
   *
   * [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation)
   *
   */
  presence_penalty?: number;
  /**
   * The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
   *
   * Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
   *
   */
  prompt: string | Array<string> | Array<number> | Array<Array<number>>;
  /**
   * If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
   *
   * Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
   *
   */
  seed?: number;
  stop?: StopConfiguration;
  /**
   * Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
   *
   */
  stream?: boolean;
  stream_options?: ChatCompletionStreamOptions;
  /**
   * The suffix that comes after a completion of inserted text.
   *
   * This parameter is only supported for `gpt-3.5-turbo-instruct`.
   *
   */
  suffix?: string;
  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
   *
   * We generally recommend altering this or `top_p` but not both.
   *
   */
  temperature?: number;
  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
   *
   * We generally recommend altering this or `temperature` but not both.
   *
   */
  top_p?: number;
  /**
   * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).
   *
   */
  user?: string;
};

/**
 * Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint).
 *
 */
export type CreateCompletionResponse = {
  /**
   * The list of completion choices the model generated for the input prompt.
   */
  choices: Array<{
    /**
     * The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
     * `length` if the maximum number of tokens specified in the request was reached,
     * or `content_filter` if content was omitted due to a flag from our content filters.
     *
     */
    finish_reason: 'stop' | 'length' | 'content_filter';
    index: number;
    logprobs: {
      text_offset?: Array<number>;
      token_logprobs?: Array<number>;
      tokens?: Array<string>;
      top_logprobs?: Array<{
        [key: string]: number;
      }>;
    };
    text: string;
  }>;
  /**
   * The Unix timestamp (in seconds) of when the completion was created.
   */
  created: number;
  /**
   * A unique identifier for the completion.
   */
  id: string;
  /**
   * The model used for completion.
   */
  model: string;
  /**
   * The object type, which is always "text_completion"
   */
  object: 'text_completion';
  /**
   * This fingerprint represents the backend configuration that the model runs with.
   *
   * Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
   *
   */
  system_fingerprint?: string;
  usage?: CompletionUsage;
};

export type CreateContainerBody = {
  /**
   * Container expiration time in seconds relative to the 'anchor' time.
   */
  expires_after?: {
    /**
     * Time anchor for the expiration time. Currently only 'last_active_at' is supported.
     */
    anchor: 'last_active_at';
    minutes: number;
  };
  /**
   * IDs of files to copy to the container.
   */
  file_ids?: Array<string>;
  /**
   * Name of the container to create.
   */
  name: string;
};

export type CreateContainerFileBody = {
  /**
   * The File object (not file name) to be uploaded.
   *
   */
  file?: Blob | File;
  /**
   * Name of the file to create.
   */
  file_id?: string;
};

export type CreateEmbeddingRequest = {
  /**
   * The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.
   *
   */
  dimensions?: number;
  /**
   * The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
   */
  encoding_format?: 'float' | 'base64';
  /**
   * Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for all embedding models), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. In addition to the per-input token limit, all embedding  models enforce a maximum of 300,000 tokens summed across all inputs in a  single request.
   *
   */
  input: string | Array<string> | Array<number> | Array<Array<number>>;
  /**
   * ID of the model to use. You can use the [List models](https://platform.openai.com/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](https://platform.openai.com/docs/models) for descriptions of them.
   *
   */
  model:
    | string
    | 'text-embedding-ada-002'
    | 'text-embedding-3-small'
    | 'text-embedding-3-large';
  /**
   * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).
   *
   */
  user?: string;
};

export type CreateEmbeddingResponse = {
  /**
   * The list of embeddings generated by the model.
   */
  data: Array<Embedding>;
  /**
   * The name of the model used to generate the embedding.
   */
  model: string;
  /**
   * The object type, which is always "list".
   */
  object: 'list';
  /**
   * The usage information for the request.
   */
  usage: {
    /**
     * The number of tokens used by the prompt.
     */
    prompt_tokens: number;
    /**
     * The total number of tokens used by the request.
     */
    total_tokens: number;
  };
};

/**
 * CompletionsRunDataSource
 *
 * A CompletionsRunDataSource object describing a model sampling configuration.
 *
 */
export type CreateEvalCompletionsRunDataSource = {
  /**
   * Used when sampling from a model. Dictates the structure of the messages passed into the model. Can either be a reference to a prebuilt trajectory (ie, `item.input_trajectory`), or a template with variable references to the `item` namespace.
   */
  input_messages?:
    | {
        /**
         * A list of chat messages forming the prompt or context. May include variable references to the `item` namespace, ie {{item.name}}.
         */
        template: Array<
          | ({
              type?: 'EasyInputMessage';
            } & EasyInputMessage)
          | ({
              type?: 'EvalItem';
            } & EvalItem)
        >;
        /**
         * The type of input messages. Always `template`.
         */
        type: 'template';
      }
    | {
        /**
         * A reference to a variable in the `item` namespace. Ie, "item.input_trajectory"
         */
        item_reference: string;
        /**
         * The type of input messages. Always `item_reference`.
         */
        type: 'item_reference';
      };
  /**
   * The name of the model to use for generating completions (e.g. "o3-mini").
   */
  model?: string;
  sampling_params?: {
    /**
     * The maximum number of tokens in the generated output.
     */
    max_completion_tokens?: number;
    /**
     * An object specifying the format that the model must output.
     *
     * Setting to `{ "type": "json_schema", "json_schema": {...} }` enables
     * Structured Outputs which ensures the model will match your supplied JSON
     * schema. Learn more in the [Structured Outputs
     * guide](https://platform.openai.com/docs/guides/structured-outputs).
     *
     * Setting to `{ "type": "json_object" }` enables the older JSON mode, which
     * ensures the message the model generates is valid JSON. Using `json_schema`
     * is preferred for models that support it.
     *
     */
    response_format?:
      | ResponseFormatText
      | ResponseFormatJsonSchema
      | ResponseFormatJsonObject;
    /**
     * A seed value to initialize the randomness, during sampling.
     */
    seed?: number;
    /**
     * A higher temperature increases randomness in the outputs.
     */
    temperature?: number;
    /**
     * A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
     *
     */
    tools?: Array<ChatCompletionTool>;
    /**
     * An alternative to temperature for nucleus sampling; 1.0 includes all tokens.
     */
    top_p?: number;
  };
  /**
   * Determines what populates the `item` namespace in this run's data source.
   */
  source:
    | ({
        type?: 'EvalJsonlFileContentSource';
      } & EvalJsonlFileContentSource)
    | ({
        type?: 'EvalJsonlFileIdSource';
      } & EvalJsonlFileIdSource)
    | ({
        type?: 'EvalStoredCompletionsSource';
      } & EvalStoredCompletionsSource);
  /**
   * The type of run data source. Always `completions`.
   */
  type: 'completions';
};

/**
 * CustomDataSourceConfig
 *
 * A CustomDataSourceConfig object that defines the schema for the data source used for the evaluation runs.
 * This schema is used to define the shape of the data that will be:
 * - Used to define your testing criteria and
 * - What data is required when creating a run
 *
 */
export type CreateEvalCustomDataSourceConfig = {
  /**
   * Whether the eval should expect you to populate the sample namespace (ie, by generating responses off of your data source)
   */
  include_sample_schema?: boolean;
  /**
   * The json schema for each row in the data source.
   */
  item_schema: {
    [key: string]: unknown;
  };
  /**
   * The type of data source. Always `custom`.
   */
  type: 'custom';
};

/**
 * CreateEvalItem
 *
 * A chat message that makes up the prompt or context. May include variable references to the `item` namespace, ie {{item.name}}.
 */
export type CreateEvalItem =
  | {
      /**
       * The content of the message.
       */
      content: string;
      /**
       * The role of the message (e.g. "system", "assistant", "user").
       */
      role: string;
    }
  | EvalItem;

/**
 * JsonlRunDataSource
 *
 * A JsonlRunDataSource object with that specifies a JSONL file that matches the eval
 *
 */
export type CreateEvalJsonlRunDataSource = {
  /**
   * Determines what populates the `item` namespace in the data source.
   */
  source:
    | ({
        type?: 'EvalJsonlFileContentSource';
      } & EvalJsonlFileContentSource)
    | ({
        type?: 'EvalJsonlFileIdSource';
      } & EvalJsonlFileIdSource);
  /**
   * The type of data source. Always `jsonl`.
   */
  type: 'jsonl';
};

/**
 * LabelModelGrader
 *
 * A LabelModelGrader object which uses a model to assign labels to each item
 * in the evaluation.
 *
 */
export type CreateEvalLabelModelGrader = {
  /**
   * A list of chat messages forming the prompt or context. May include variable references to the `item` namespace, ie {{item.name}}.
   */
  input: Array<CreateEvalItem>;
  /**
   * The labels to classify to each item in the evaluation.
   */
  labels: Array<string>;
  /**
   * The model to use for the evaluation. Must support structured outputs.
   */
  model: string;
  /**
   * The name of the grader.
   */
  name: string;
  /**
   * The labels that indicate a passing result. Must be a subset of labels.
   */
  passing_labels: Array<string>;
  /**
   * The object type, which is always `label_model`.
   */
  type: 'label_model';
};

/**
 * LogsDataSourceConfig
 *
 * A data source config which specifies the metadata property of your logs query.
 * This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc.
 *
 */
export type CreateEvalLogsDataSourceConfig = {
  /**
   * Metadata filters for the logs data source.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The type of data source. Always `logs`.
   */
  type: 'logs';
};

/**
 * CreateEvalRequest
 */
export type CreateEvalRequest = {
  /**
   * The configuration for the data source used for the evaluation runs. Dictates the schema of the data used in the evaluation.
   */
  data_source_config:
    | ({
        type?: 'CreateEvalCustomDataSourceConfig';
      } & CreateEvalCustomDataSourceConfig)
    | ({
        type?: 'CreateEvalLogsDataSourceConfig';
      } & CreateEvalLogsDataSourceConfig)
    | ({
        type?: 'CreateEvalStoredCompletionsDataSourceConfig';
      } & CreateEvalStoredCompletionsDataSourceConfig);
  metadata?: Metadata;
  /**
   * The name of the evaluation.
   */
  name?: string;
  /**
   * A list of graders for all eval runs in this group. Graders can reference variables in the data source using double curly braces notation, like `{{item.variable_name}}`. To reference the model's output, use the `sample` namespace (ie, `{{sample.output_text}}`).
   */
  testing_criteria: Array<
    | ({
        type?: 'CreateEvalLabelModelGrader';
      } & CreateEvalLabelModelGrader)
    | ({
        type?: 'EvalGraderStringCheck';
      } & EvalGraderStringCheck)
    | ({
        type?: 'EvalGraderTextSimilarity';
      } & EvalGraderTextSimilarity)
    | ({
        type?: 'EvalGraderPython';
      } & EvalGraderPython)
    | ({
        type?: 'EvalGraderScoreModel';
      } & EvalGraderScoreModel)
  >;
};

/**
 * ResponsesRunDataSource
 *
 * A ResponsesRunDataSource object describing a model sampling configuration.
 *
 */
export type CreateEvalResponsesRunDataSource = {
  /**
   * Used when sampling from a model. Dictates the structure of the messages passed into the model. Can either be a reference to a prebuilt trajectory (ie, `item.input_trajectory`), or a template with variable references to the `item` namespace.
   */
  input_messages?:
    | {
        /**
         * A list of chat messages forming the prompt or context. May include variable references to the `item` namespace, ie {{item.name}}.
         */
        template: Array<
          | {
              /**
               * The content of the message.
               */
              content: string;
              /**
               * The role of the message (e.g. "system", "assistant", "user").
               */
              role: string;
            }
          | EvalItem
        >;
        /**
         * The type of input messages. Always `template`.
         */
        type: 'template';
      }
    | {
        /**
         * A reference to a variable in the `item` namespace. Ie, "item.name"
         */
        item_reference: string;
        /**
         * The type of input messages. Always `item_reference`.
         */
        type: 'item_reference';
      };
  /**
   * The name of the model to use for generating completions (e.g. "o3-mini").
   */
  model?: string;
  sampling_params?: {
    /**
     * The maximum number of tokens in the generated output.
     */
    max_completion_tokens?: number;
    /**
     * A seed value to initialize the randomness, during sampling.
     */
    seed?: number;
    /**
     * A higher temperature increases randomness in the outputs.
     */
    temperature?: number;
    /**
     * Configuration options for a text response from the model. Can be plain
     * text or structured JSON data. Learn more:
     * - [Text inputs and outputs](https://platform.openai.com/docs/guides/text)
     * - [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs)
     *
     */
    text?: {
      format?: TextResponseFormatConfiguration;
    };
    /**
     * An array of tools the model may call while generating a response. You
     * can specify which tool to use by setting the `tool_choice` parameter.
     *
     * The two categories of tools you can provide the model are:
     *
     * - **Built-in tools**: Tools that are provided by OpenAI that extend the
     * model's capabilities, like [web search](https://platform.openai.com/docs/guides/tools-web-search)
     * or [file search](https://platform.openai.com/docs/guides/tools-file-search). Learn more about
     * [built-in tools](https://platform.openai.com/docs/guides/tools).
     * - **Function calls (custom tools)**: Functions that are defined by you,
     * enabling the model to call your own code. Learn more about
     * [function calling](https://platform.openai.com/docs/guides/function-calling).
     *
     */
    tools?: Array<Tool>;
    /**
     * An alternative to temperature for nucleus sampling; 1.0 includes all tokens.
     */
    top_p?: number;
  };
  /**
   * Determines what populates the `item` namespace in this run's data source.
   */
  source:
    | ({
        type?: 'EvalJsonlFileContentSource';
      } & EvalJsonlFileContentSource)
    | ({
        type?: 'EvalJsonlFileIdSource';
      } & EvalJsonlFileIdSource)
    | ({
        type?: 'EvalResponsesSource';
      } & EvalResponsesSource);
  /**
   * The type of run data source. Always `responses`.
   */
  type: 'responses';
};

/**
 * CreateEvalRunRequest
 */
export type CreateEvalRunRequest = {
  /**
   * Details about the run's data source.
   */
  data_source:
    | CreateEvalJsonlRunDataSource
    | CreateEvalCompletionsRunDataSource
    | CreateEvalResponsesRunDataSource;
  metadata?: Metadata;
  /**
   * The name of the run.
   */
  name?: string;
};

/**
 * StoredCompletionsDataSourceConfig
 *
 * Deprecated in favor of LogsDataSourceConfig.
 *
 *
 * @deprecated
 */
export type CreateEvalStoredCompletionsDataSourceConfig = {
  /**
   * Metadata filters for the stored completions data source.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The type of data source. Always `stored_completions`.
   */
  type: 'stored_completions';
};

export type CreateFileRequest = {
  expires_after?: FileExpirationAfter;
  /**
   * The File object (not file name) to be uploaded.
   *
   */
  file: Blob | File;
  purpose: FilePurpose;
};

export type CreateFineTuningCheckpointPermissionRequest = {
  /**
   * The project identifiers to grant access to.
   */
  project_ids: Array<string>;
};

export type CreateFineTuningJobRequest = {
  /**
   * The hyperparameters used for the fine-tuning job.
   * This value is now deprecated in favor of `method`, and should be passed in under the `method` parameter.
   *
   *
   * @deprecated
   */
  hyperparameters?: {
    /**
     * Number of examples in each batch. A larger batch size means that model parameters
     * are updated less frequently, but with lower variance.
     *
     */
    batch_size?: 'auto' | number;
    /**
     * Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
     * overfitting.
     *
     */
    learning_rate_multiplier?: 'auto' | number;
    /**
     * The number of epochs to train the model for. An epoch refers to one full cycle
     * through the training dataset.
     *
     */
    n_epochs?: 'auto' | number;
  };
  /**
   * A list of integrations to enable for your fine-tuning job.
   */
  integrations?: Array<{
    /**
     * The type of integration to enable. Currently, only "wandb" (Weights and Biases) is supported.
     *
     */
    type: 'wandb';
    /**
     * The settings for your integration with Weights and Biases. This payload specifies the project that
     * metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags
     * to your run, and set a default entity (team, username, etc) to be associated with your run.
     *
     */
    wandb: {
      /**
       * The entity to use for the run. This allows you to set the team or username of the WandB user that you would
       * like associated with the run. If not set, the default entity for the registered WandB API key is used.
       *
       */
      entity?: string;
      /**
       * A display name to set for the run. If not set, we will use the Job ID as the name.
       *
       */
      name?: string;
      /**
       * The name of the project that the new run will be created under.
       *
       */
      project: string;
      /**
       * A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some
       * default tags are generated by OpenAI: "openai/finetune", "openai/{base-model}", "openai/{ftjob-abcdef}".
       *
       */
      tags?: Array<string>;
    };
  }>;
  metadata?: Metadata;
  method?: FineTuneMethod;
  /**
   * The name of the model to fine-tune. You can select one of the
   * [supported models](https://platform.openai.com/docs/guides/fine-tuning#which-models-can-be-fine-tuned).
   *
   */
  model:
    | string
    | 'babbage-002'
    | 'davinci-002'
    | 'gpt-3.5-turbo'
    | 'gpt-4o-mini';
  /**
   * The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases.
   * If a seed is not specified, one will be generated for you.
   *
   */
  seed?: number;
  /**
   * A string of up to 64 characters that will be added to your fine-tuned model name.
   *
   * For example, a `suffix` of "custom-model-name" would produce a model name like `ft:gpt-4o-mini:openai:custom-model-name:7p4lURel`.
   *
   */
  suffix?: string;
  /**
   * The ID of an uploaded file that contains training data.
   *
   * See [upload file](https://platform.openai.com/docs/api-reference/files/create) for how to upload a file.
   *
   * Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.
   *
   * The contents of the file should differ depending on if the model uses the [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input), [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input) format, or if the fine-tuning method uses the [preference](https://platform.openai.com/docs/api-reference/fine-tuning/preference-input) format.
   *
   * See the [fine-tuning guide](https://platform.openai.com/docs/guides/model-optimization) for more details.
   *
   */
  training_file: string;
  /**
   * The ID of an uploaded file that contains validation data.
   *
   * If you provide this file, the data is used to generate validation
   * metrics periodically during fine-tuning. These metrics can be viewed in
   * the fine-tuning results file.
   * The same data should not be present in both train and validation files.
   *
   * Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.
   *
   * See the [fine-tuning guide](https://platform.openai.com/docs/guides/model-optimization) for more details.
   *
   */
  validation_file?: string;
};

export type CreateImageEditRequest = {
  /**
   * Allows to set transparency for the background of the generated image(s).
   * This parameter is only supported for `gpt-image-1`. Must be one of
   * `transparent`, `opaque` or `auto` (default value). When `auto` is used, the
   * model will automatically determine the best background for the image.
   *
   * If `transparent`, the output format needs to support transparency, so it
   * should be set to either `png` (default value) or `webp`.
   *
   */
  background?: 'transparent' | 'opaque' | 'auto';
  /**
   * The image(s) to edit. Must be a supported image file or an array of images.
   *
   * For `gpt-image-1`, each image should be a `png`, `webp`, or `jpg` file less
   * than 50MB. You can provide up to 16 images.
   *
   * For `dall-e-2`, you can only provide one image, and it should be a square
   * `png` file less than 4MB.
   *
   */
  image: Blob | File | Array<Blob | File>;
  input_fidelity?: ImageInputFidelity;
  /**
   * An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. If there are multiple images provided, the mask will be applied on the first image. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.
   */
  mask?: Blob | File;
  /**
   * The model to use for image generation. Only `dall-e-2` and `gpt-image-1` are supported. Defaults to `dall-e-2` unless a parameter specific to `gpt-image-1` is used.
   */
  model?: string | 'dall-e-2' | 'gpt-image-1';
  /**
   * The number of images to generate. Must be between 1 and 10.
   */
  n?: number;
  /**
   * The compression level (0-100%) for the generated images. This parameter
   * is only supported for `gpt-image-1` with the `webp` or `jpeg` output
   * formats, and defaults to 100.
   *
   */
  output_compression?: number;
  /**
   * The format in which the generated images are returned. This parameter is
   * only supported for `gpt-image-1`. Must be one of `png`, `jpeg`, or `webp`.
   * The default value is `png`.
   *
   */
  output_format?: 'png' | 'jpeg' | 'webp';
  partial_images?: PartialImages;
  /**
   * A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2`, and 32000 characters for `gpt-image-1`.
   */
  prompt: string;
  /**
   * The quality of the image that will be generated. `high`, `medium` and `low` are only supported for `gpt-image-1`. `dall-e-2` only supports `standard` quality. Defaults to `auto`.
   *
   */
  quality?: 'standard' | 'low' | 'medium' | 'high' | 'auto';
  /**
   * The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated. This parameter is only supported for `dall-e-2`, as `gpt-image-1` will always return base64-encoded images.
   */
  response_format?: 'url' | 'b64_json';
  /**
   * The size of the generated images. Must be one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value) for `gpt-image-1`, and one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`.
   */
  size?:
    | '256x256'
    | '512x512'
    | '1024x1024'
    | '1536x1024'
    | '1024x1536'
    | 'auto';
  /**
   * Edit the image in streaming mode. Defaults to `false`. See the
   * [Image generation guide](https://platform.openai.com/docs/guides/image-generation) for more information.
   *
   */
  stream?: boolean;
  /**
   * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).
   *
   */
  user?: string;
};

export type CreateImageRequest = {
  /**
   * Allows to set transparency for the background of the generated image(s).
   * This parameter is only supported for `gpt-image-1`. Must be one of
   * `transparent`, `opaque` or `auto` (default value). When `auto` is used, the
   * model will automatically determine the best background for the image.
   *
   * If `transparent`, the output format needs to support transparency, so it
   * should be set to either `png` (default value) or `webp`.
   *
   */
  background?: 'transparent' | 'opaque' | 'auto';
  /**
   * The model to use for image generation. One of `dall-e-2`, `dall-e-3`, or `gpt-image-1`. Defaults to `dall-e-2` unless a parameter specific to `gpt-image-1` is used.
   */
  model?: string | 'dall-e-2' | 'dall-e-3' | 'gpt-image-1';
  /**
   * Control the content-moderation level for images generated by `gpt-image-1`. Must be either `low` for less restrictive filtering or `auto` (default value).
   */
  moderation?: 'low' | 'auto';
  /**
   * The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
   */
  n?: number;
  /**
   * The compression level (0-100%) for the generated images. This parameter is only supported for `gpt-image-1` with the `webp` or `jpeg` output formats, and defaults to 100.
   */
  output_compression?: number;
  /**
   * The format in which the generated images are returned. This parameter is only supported for `gpt-image-1`. Must be one of `png`, `jpeg`, or `webp`.
   */
  output_format?: 'png' | 'jpeg' | 'webp';
  partial_images?: PartialImages;
  /**
   * A text description of the desired image(s). The maximum length is 32000 characters for `gpt-image-1`, 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.
   */
  prompt: string;
  /**
   * The quality of the image that will be generated.
   *
   * - `auto` (default value) will automatically select the best quality for the given model.
   * - `high`, `medium` and `low` are supported for `gpt-image-1`.
   * - `hd` and `standard` are supported for `dall-e-3`.
   * - `standard` is the only option for `dall-e-2`.
   *
   */
  quality?: 'standard' | 'hd' | 'low' | 'medium' | 'high' | 'auto';
  /**
   * The format in which generated images with `dall-e-2` and `dall-e-3` are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated. This parameter isn't supported for `gpt-image-1` which will always return base64-encoded images.
   */
  response_format?: 'url' | 'b64_json';
  /**
   * The size of the generated images. Must be one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value) for `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`, and one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3`.
   */
  size?:
    | 'auto'
    | '1024x1024'
    | '1536x1024'
    | '1024x1536'
    | '256x256'
    | '512x512'
    | '1792x1024'
    | '1024x1792';
  /**
   * Generate the image in streaming mode. Defaults to `false`. See the
   * [Image generation guide](https://platform.openai.com/docs/guides/image-generation) for more information.
   * This parameter is only supported for `gpt-image-1`.
   *
   */
  stream?: boolean;
  /**
   * The style of the generated images. This parameter is only supported for `dall-e-3`. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images.
   */
  style?: 'vivid' | 'natural';
  /**
   * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).
   *
   */
  user?: string;
};

export type CreateImageVariationRequest = {
  /**
   * The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
   */
  image: Blob | File;
  /**
   * The model to use for image generation. Only `dall-e-2` is supported at this time.
   */
  model?: string | 'dall-e-2';
  /**
   * The number of images to generate. Must be between 1 and 10.
   */
  n?: number;
  /**
   * The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
   */
  response_format?: 'url' | 'b64_json';
  /**
   * The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
   */
  size?: '256x256' | '512x512' | '1024x1024';
  /**
   * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).
   *
   */
  user?: string;
};

export type CreateMessageRequest = {
  /**
   * A list of files attached to the message, and the tools they should be added to.
   */
  attachments?: Array<{
    /**
     * The ID of the file to attach to the message.
     */
    file_id?: string;
    /**
     * The tools to add this file to.
     */
    tools?: Array<
      | ({
          type?: 'AssistantToolsCode';
        } & AssistantToolsCode)
      | ({
          type?: 'AssistantToolsFileSearchTypeOnly';
        } & AssistantToolsFileSearchTypeOnly)
    >;
  }>;
  content:
    | string
    | Array<
        | ({
            type?: 'MessageContentImageFileObject';
          } & MessageContentImageFileObject)
        | ({
            type?: 'MessageContentImageUrlObject';
          } & MessageContentImageUrlObject)
        | ({
            type?: 'MessageRequestContentTextObject';
          } & MessageRequestContentTextObject)
      >;
  metadata?: Metadata;
  /**
   * The role of the entity that is creating the message. Allowed values include:
   * - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.
   * - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.
   *
   */
  role: 'user' | 'assistant';
};

export type CreateModelResponseProperties = ModelResponseProperties & {
  /**
   * An integer between 0 and 20 specifying the number of most likely tokens to
   * return at each token position, each with an associated log probability.
   *
   */
  top_logprobs?: number;
};

export type CreateModerationRequest = {
  /**
   * Input (or inputs) to classify. Can be a single string, an array of strings, or
   * an array of multi-modal input objects similar to other models.
   *
   */
  input:
    | string
    | Array<string>
    | Array<
        | ({
            type?: 'ModerationImageURLInput';
          } & ModerationImageUrlInput)
        | ({
            type?: 'ModerationTextInput';
          } & ModerationTextInput)
      >;
  /**
   * The content moderation model you would like to use. Learn more in
   * [the moderation guide](https://platform.openai.com/docs/guides/moderation), and learn about
   * available models [here](https://platform.openai.com/docs/models#moderation).
   *
   */
  model?:
    | string
    | 'omni-moderation-latest'
    | 'omni-moderation-2024-09-26'
    | 'text-moderation-latest'
    | 'text-moderation-stable';
};

/**
 * Represents if a given text input is potentially harmful.
 */
export type CreateModerationResponse = {
  /**
   * The unique identifier for the moderation request.
   */
  id: string;
  /**
   * The model used to generate the moderation results.
   */
  model: string;
  /**
   * A list of moderation objects.
   */
  results: Array<{
    /**
     * A list of the categories, and whether they are flagged or not.
     */
    categories: {
      /**
       * Content that expresses, incites, or promotes harassing language towards any target.
       */
      harassment: boolean;
      /**
       * Harassment content that also includes violence or serious harm towards any target.
       */
      'harassment/threatening': boolean;
      /**
       * Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment.
       */
      hate: boolean;
      /**
       * Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste.
       */
      'hate/threatening': boolean;
      /**
       * Content that includes instructions or advice that facilitate the planning or execution of wrongdoing, or that gives advice or instruction on how to commit illicit acts. For example, "how to shoplift" would fit this category.
       */
      illicit: boolean;
      /**
       * Content that includes instructions or advice that facilitate the planning or execution of wrongdoing that also includes violence, or that gives advice or instruction on the procurement of any weapon.
       */
      'illicit/violent': boolean;
      /**
       * Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders.
       */
      'self-harm': boolean;
      /**
       * Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts.
       */
      'self-harm/instructions': boolean;
      /**
       * Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders.
       */
      'self-harm/intent': boolean;
      /**
       * Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness).
       */
      sexual: boolean;
      /**
       * Sexual content that includes an individual who is under 18 years old.
       */
      'sexual/minors': boolean;
      /**
       * Content that depicts death, violence, or physical injury.
       */
      violence: boolean;
      /**
       * Content that depicts death, violence, or physical injury in graphic detail.
       */
      'violence/graphic': boolean;
    };
    /**
     * A list of the categories along with the input type(s) that the score applies to.
     */
    category_applied_input_types: {
      /**
       * The applied input type(s) for the category 'harassment'.
       */
      harassment: Array<'text'>;
      /**
       * The applied input type(s) for the category 'harassment/threatening'.
       */
      'harassment/threatening': Array<'text'>;
      /**
       * The applied input type(s) for the category 'hate'.
       */
      hate: Array<'text'>;
      /**
       * The applied input type(s) for the category 'hate/threatening'.
       */
      'hate/threatening': Array<'text'>;
      /**
       * The applied input type(s) for the category 'illicit'.
       */
      illicit: Array<'text'>;
      /**
       * The applied input type(s) for the category 'illicit/violent'.
       */
      'illicit/violent': Array<'text'>;
      /**
       * The applied input type(s) for the category 'self-harm'.
       */
      'self-harm': Array<'text' | 'image'>;
      /**
       * The applied input type(s) for the category 'self-harm/instructions'.
       */
      'self-harm/instructions': Array<'text' | 'image'>;
      /**
       * The applied input type(s) for the category 'self-harm/intent'.
       */
      'self-harm/intent': Array<'text' | 'image'>;
      /**
       * The applied input type(s) for the category 'sexual'.
       */
      sexual: Array<'text' | 'image'>;
      /**
       * The applied input type(s) for the category 'sexual/minors'.
       */
      'sexual/minors': Array<'text'>;
      /**
       * The applied input type(s) for the category 'violence'.
       */
      violence: Array<'text' | 'image'>;
      /**
       * The applied input type(s) for the category 'violence/graphic'.
       */
      'violence/graphic': Array<'text' | 'image'>;
    };
    /**
     * A list of the categories along with their scores as predicted by model.
     */
    category_scores: {
      /**
       * The score for the category 'harassment'.
       */
      harassment: number;
      /**
       * The score for the category 'harassment/threatening'.
       */
      'harassment/threatening': number;
      /**
       * The score for the category 'hate'.
       */
      hate: number;
      /**
       * The score for the category 'hate/threatening'.
       */
      'hate/threatening': number;
      /**
       * The score for the category 'illicit'.
       */
      illicit: number;
      /**
       * The score for the category 'illicit/violent'.
       */
      'illicit/violent': number;
      /**
       * The score for the category 'self-harm'.
       */
      'self-harm': number;
      /**
       * The score for the category 'self-harm/instructions'.
       */
      'self-harm/instructions': number;
      /**
       * The score for the category 'self-harm/intent'.
       */
      'self-harm/intent': number;
      /**
       * The score for the category 'sexual'.
       */
      sexual: number;
      /**
       * The score for the category 'sexual/minors'.
       */
      'sexual/minors': number;
      /**
       * The score for the category 'violence'.
       */
      violence: number;
      /**
       * The score for the category 'violence/graphic'.
       */
      'violence/graphic': number;
    };
    /**
     * Whether any of the below categories are flagged.
     */
    flagged: boolean;
  }>;
};

export type CreateResponse = CreateModelResponseProperties &
  ResponseProperties & {
    /**
     * Specify additional output data to include in the model response. Currently
     * supported values are:
     * - `code_interpreter_call.outputs`: Includes the outputs of python code execution
     * in code interpreter tool call items.
     * - `computer_call_output.output.image_url`: Include image urls from the computer call output.
     * - `file_search_call.results`: Include the search results of
     * the file search tool call.
     * - `message.input_image.image_url`: Include image urls from the input message.
     * - `message.output_text.logprobs`: Include logprobs with assistant messages.
     * - `reasoning.encrypted_content`: Includes an encrypted version of reasoning
     * tokens in reasoning item outputs. This enables reasoning items to be used in
     * multi-turn conversations when using the Responses API statelessly (like
     * when the `store` parameter is set to `false`, or when an organization is
     * enrolled in the zero data retention program).
     *
     */
    include?: Array<Includable>;
    /**
     * Text, image, or file inputs to the model, used to generate a response.
     *
     * Learn more:
     * - [Text inputs and outputs](https://platform.openai.com/docs/guides/text)
     * - [Image inputs](https://platform.openai.com/docs/guides/images)
     * - [File inputs](https://platform.openai.com/docs/guides/pdf-files)
     * - [Conversation state](https://platform.openai.com/docs/guides/conversation-state)
     * - [Function calling](https://platform.openai.com/docs/guides/function-calling)
     *
     */
    input?: string | Array<InputItem>;
    /**
     * A system (or developer) message inserted into the model's context.
     *
     * When using along with `previous_response_id`, the instructions from a previous
     * response will not be carried over to the next response. This makes it simple
     * to swap out system (or developer) messages in new responses.
     *
     */
    instructions?: string;
    /**
     * Whether to allow the model to run tool calls in parallel.
     *
     */
    parallel_tool_calls?: boolean;
    /**
     * Whether to store the generated model response for later retrieval via
     * API.
     *
     */
    store?: boolean;
    /**
     * If set to true, the model response data will be streamed to the client
     * as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).
     * See the [Streaming section below](https://platform.openai.com/docs/api-reference/responses-streaming)
     * for more information.
     *
     */
    stream?: boolean;
    stream_options?: ResponseStreamOptions;
  };

export type CreateRunRequest = {
  /**
   * Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.
   */
  additional_instructions?: string;
  /**
   * Adds additional messages to the thread before creating the run.
   */
  additional_messages?: Array<CreateMessageRequest>;
  /**
   * The ID of the [assistant](https://platform.openai.com/docs/api-reference/assistants) to use to execute this run.
   */
  assistant_id: string;
  /**
   * Overrides the [instructions](https://platform.openai.com/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.
   */
  instructions?: string;
  /**
   * The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
   *
   */
  max_completion_tokens?: number;
  /**
   * The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
   *
   */
  max_prompt_tokens?: number;
  metadata?: Metadata;
  /**
   * The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
   */
  model?: string | AssistantSupportedModels;
  parallel_tool_calls?: ParallelToolCalls;
  reasoning_effort?: ReasoningEffort;
  response_format?: AssistantsApiResponseFormatOption;
  /**
   * If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
   *
   */
  stream?: boolean;
  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
   *
   */
  temperature?: number;
  tool_choice?: AssistantsApiToolChoiceOption & unknown;
  /**
   * Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
   */
  tools?: Array<AssistantTool>;
  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
   *
   * We generally recommend altering this or temperature but not both.
   *
   */
  top_p?: number;
  truncation_strategy?: TruncationObject & unknown;
};

export type CreateSpeechRequest = {
  /**
   * The text to generate audio for. The maximum length is 4096 characters.
   */
  input: string;
  /**
   * Control the voice of your generated audio with additional instructions. Does not work with `tts-1` or `tts-1-hd`.
   */
  instructions?: string;
  /**
   * One of the available [TTS models](https://platform.openai.com/docs/models#tts): `tts-1`, `tts-1-hd` or `gpt-4o-mini-tts`.
   *
   */
  model: string | 'tts-1' | 'tts-1-hd' | 'gpt-4o-mini-tts';
  /**
   * The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
   */
  response_format?: 'mp3' | 'opus' | 'aac' | 'flac' | 'wav' | 'pcm';
  /**
   * The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.
   */
  speed?: number;
  /**
   * The format to stream the audio in. Supported formats are `sse` and `audio`. `sse` is not supported for `tts-1` or `tts-1-hd`.
   */
  stream_format?: 'sse' | 'audio';
  /**
   * The voice to use when generating the audio. Supported voices are `alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`, `onyx`, `nova`, `sage`, `shimmer`, and `verse`. Previews of the voices are available in the [Text to speech guide](https://platform.openai.com/docs/guides/text-to-speech#voice-options).
   */
  voice: VoiceIdsShared;
};

export type CreateSpeechResponseStreamEvent =
  | ({
      type?: 'SpeechAudioDeltaEvent';
    } & SpeechAudioDeltaEvent)
  | ({
      type?: 'SpeechAudioDoneEvent';
    } & SpeechAudioDoneEvent);

export type CreateThreadAndRunRequest = {
  /**
   * The ID of the [assistant](https://platform.openai.com/docs/api-reference/assistants) to use to execute this run.
   */
  assistant_id: string;
  /**
   * Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.
   */
  instructions?: string;
  /**
   * The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
   *
   */
  max_completion_tokens?: number;
  /**
   * The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
   *
   */
  max_prompt_tokens?: number;
  metadata?: Metadata;
  /**
   * The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
   */
  model?:
    | string
    | 'gpt-5'
    | 'gpt-5-mini'
    | 'gpt-5-nano'
    | 'gpt-5-2025-08-07'
    | 'gpt-5-mini-2025-08-07'
    | 'gpt-5-nano-2025-08-07'
    | 'gpt-4.1'
    | 'gpt-4.1-mini'
    | 'gpt-4.1-nano'
    | 'gpt-4.1-2025-04-14'
    | 'gpt-4.1-mini-2025-04-14'
    | 'gpt-4.1-nano-2025-04-14'
    | 'gpt-4o'
    | 'gpt-4o-2024-11-20'
    | 'gpt-4o-2024-08-06'
    | 'gpt-4o-2024-05-13'
    | 'gpt-4o-mini'
    | 'gpt-4o-mini-2024-07-18'
    | 'gpt-4.5-preview'
    | 'gpt-4.5-preview-2025-02-27'
    | 'gpt-4-turbo'
    | 'gpt-4-turbo-2024-04-09'
    | 'gpt-4-0125-preview'
    | 'gpt-4-turbo-preview'
    | 'gpt-4-1106-preview'
    | 'gpt-4-vision-preview'
    | 'gpt-4'
    | 'gpt-4-0314'
    | 'gpt-4-0613'
    | 'gpt-4-32k'
    | 'gpt-4-32k-0314'
    | 'gpt-4-32k-0613'
    | 'gpt-3.5-turbo'
    | 'gpt-3.5-turbo-16k'
    | 'gpt-3.5-turbo-0613'
    | 'gpt-3.5-turbo-1106'
    | 'gpt-3.5-turbo-0125'
    | 'gpt-3.5-turbo-16k-0613';
  parallel_tool_calls?: ParallelToolCalls;
  response_format?: AssistantsApiResponseFormatOption;
  /**
   * If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
   *
   */
  stream?: boolean;
  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
   *
   */
  temperature?: number;
  thread?: CreateThreadRequest;
  tool_choice?: AssistantsApiToolChoiceOption & unknown;
  /**
   * A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
   *
   */
  tool_resources?: {
    code_interpreter?: {
      /**
       * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
       *
       */
      file_ids?: Array<string>;
    };
    file_search?: {
      /**
       * The ID of the [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
       *
       */
      vector_store_ids?: Array<string>;
    };
  };
  /**
   * Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
   */
  tools?: Array<AssistantTool>;
  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
   *
   * We generally recommend altering this or temperature but not both.
   *
   */
  top_p?: number;
  truncation_strategy?: TruncationObject & unknown;
};

/**
 * Options to create a new thread. If no thread is provided when running a
 * request, an empty thread will be created.
 *
 */
export type CreateThreadRequest = {
  /**
   * A list of [messages](https://platform.openai.com/docs/api-reference/messages) to start the thread with.
   */
  messages?: Array<CreateMessageRequest>;
  metadata?: Metadata;
  /**
   * A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
   *
   */
  tool_resources?: {
    code_interpreter?: {
      /**
       * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
       *
       */
      file_ids?: Array<string>;
    };
    file_search?: unknown & {
      /**
       * The [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.
       *
       */
      vector_store_ids?: Array<string>;
      /**
       * A helper to create a [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) with file_ids and attach it to this thread. There can be a maximum of 1 vector store attached to the thread.
       *
       */
      vector_stores?: Array<{
        /**
         * The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
         */
        chunking_strategy?:
          | {
              /**
               * Always `auto`.
               */
              type: 'auto';
            }
          | {
              static: {
                /**
                 * The number of tokens that overlap between chunks. The default value is `400`.
                 *
                 * Note that the overlap must not exceed half of `max_chunk_size_tokens`.
                 *
                 */
                chunk_overlap_tokens: number;
                /**
                 * The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`.
                 */
                max_chunk_size_tokens: number;
              };
              /**
               * Always `static`.
               */
              type: 'static';
            };
        /**
         * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.
         *
         */
        file_ids?: Array<string>;
        metadata?: Metadata;
      }>;
    };
  };
};

export type CreateTranscriptionRequest = {
  chunking_strategy?: TranscriptionChunkingStrategy;
  /**
   * The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.
   *
   */
  file: Blob | File;
  /**
   * Additional information to include in the transcription response.
   * `logprobs` will return the log probabilities of the tokens in the
   * response to understand the model's confidence in the transcription.
   * `logprobs` only works with response_format set to `json` and only with
   * the models `gpt-4o-transcribe` and `gpt-4o-mini-transcribe`.
   *
   */
  include?: Array<TranscriptionInclude>;
  /**
   * The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format will improve accuracy and latency.
   *
   */
  language?: string;
  /**
   * ID of the model to use. The options are `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1` (which is powered by our open source Whisper V2 model).
   *
   */
  model: string | 'whisper-1' | 'gpt-4o-transcribe' | 'gpt-4o-mini-transcribe';
  /**
   * An optional text to guide the model's style or continue a previous audio segment. The [prompt](https://platform.openai.com/docs/guides/speech-to-text#prompting) should match the audio language.
   *
   */
  prompt?: string;
  response_format?: AudioResponseFormat;
  /**
   * If set to true, the model response data will be streamed to the client
   * as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).
   * See the [Streaming section of the Speech-to-Text guide](https://platform.openai.com/docs/guides/speech-to-text?lang=curl#streaming-transcriptions)
   * for more information.
   *
   * Note: Streaming is not supported for the `whisper-1` model and will be ignored.
   *
   */
  stream?: boolean;
  /**
   * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
   *
   */
  temperature?: number;
  /**
   * The timestamp granularities to populate for this transcription. `response_format` must be set `verbose_json` to use timestamp granularities. Either or both of these options are supported: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency.
   *
   */
  timestamp_granularities?: Array<'word' | 'segment'>;
};

/**
 * Represents a transcription response returned by model, based on the provided input.
 */
export type CreateTranscriptionResponseJson = {
  /**
   * The log probabilities of the tokens in the transcription. Only returned with the models `gpt-4o-transcribe` and `gpt-4o-mini-transcribe` if `logprobs` is added to the `include` array.
   *
   */
  logprobs?: Array<{
    /**
     * The bytes of the token.
     */
    bytes?: Array<number>;
    /**
     * The log probability of the token.
     */
    logprob?: number;
    /**
     * The token in the transcription.
     */
    token?: string;
  }>;
  /**
   * The transcribed text.
   */
  text: string;
  /**
   * Token usage statistics for the request.
   */
  usage?:
    | ({
        type?: 'TranscriptTextUsageTokens';
      } & TranscriptTextUsageTokens)
    | ({
        type?: 'TranscriptTextUsageDuration';
      } & TranscriptTextUsageDuration);
};

export type CreateTranscriptionResponseStreamEvent =
  | ({
      type?: 'TranscriptTextDeltaEvent';
    } & TranscriptTextDeltaEvent)
  | ({
      type?: 'TranscriptTextDoneEvent';
    } & TranscriptTextDoneEvent);

/**
 * Represents a verbose json transcription response returned by model, based on the provided input.
 */
export type CreateTranscriptionResponseVerboseJson = {
  /**
   * The duration of the input audio.
   */
  duration: number;
  /**
   * The language of the input audio.
   */
  language: string;
  /**
   * Segments of the transcribed text and their corresponding details.
   */
  segments?: Array<TranscriptionSegment>;
  /**
   * The transcribed text.
   */
  text: string;
  usage?: TranscriptTextUsageDuration;
  /**
   * Extracted words and their corresponding timestamps.
   */
  words?: Array<TranscriptionWord>;
};

export type CreateTranslationRequest = {
  /**
   * The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.
   *
   */
  file: Blob | File;
  /**
   * ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.
   *
   */
  model: string | 'whisper-1';
  /**
   * An optional text to guide the model's style or continue a previous audio segment. The [prompt](https://platform.openai.com/docs/guides/speech-to-text#prompting) should be in English.
   *
   */
  prompt?: string;
  /**
   * The format of the output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.
   *
   */
  response_format?: 'json' | 'text' | 'srt' | 'verbose_json' | 'vtt';
  /**
   * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
   *
   */
  temperature?: number;
};

export type CreateTranslationResponseJson = {
  text: string;
};

export type CreateTranslationResponseVerboseJson = {
  /**
   * The duration of the input audio.
   */
  duration: number;
  /**
   * The language of the output translation (always `english`).
   */
  language: string;
  /**
   * Segments of the translated text and their corresponding details.
   */
  segments?: Array<TranscriptionSegment>;
  /**
   * The translated text.
   */
  text: string;
};

export type CreateUploadRequest = {
  /**
   * The number of bytes in the file you are uploading.
   *
   */
  bytes: number;
  expires_after?: FileExpirationAfter;
  /**
   * The name of the file to upload.
   *
   */
  filename: string;
  /**
   * The MIME type of the file.
   *
   * This must fall within the supported MIME types for your file purpose. See the supported MIME types for assistants and vision.
   *
   */
  mime_type: string;
  /**
   * The intended purpose of the uploaded file.
   *
   * See the [documentation on File purposes](https://platform.openai.com/docs/api-reference/files/create#files-create-purpose).
   *
   */
  purpose: 'assistants' | 'batch' | 'fine-tune' | 'vision';
};

export type CreateVectorStoreFileBatchRequest = {
  attributes?: VectorStoreFileAttributes;
  chunking_strategy?: ChunkingStrategyRequestParam;
  /**
   * A list of [File](https://platform.openai.com/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.
   */
  file_ids: Array<string>;
};

export type CreateVectorStoreFileRequest = {
  attributes?: VectorStoreFileAttributes;
  chunking_strategy?: ChunkingStrategyRequestParam;
  /**
   * A [File](https://platform.openai.com/docs/api-reference/files) ID that the vector store should use. Useful for tools like `file_search` that can access files.
   */
  file_id: string;
};

export type CreateVectorStoreRequest = {
  chunking_strategy?: ChunkingStrategyRequestParam;
  expires_after?: VectorStoreExpirationAfter;
  /**
   * A list of [File](https://platform.openai.com/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.
   */
  file_ids?: Array<string>;
  metadata?: Metadata;
  /**
   * The name of the vector store.
   */
  name?: string;
};

/**
 * Custom tool
 *
 * A custom tool that processes input using a specified format. Learn more about
 * [custom tools](https://platform.openai.com/docs/guides/function-calling#custom-tools).
 *
 */
export type CustomTool = {
  /**
   * Optional description of the custom tool, used to provide more context.
   *
   */
  description?: string;
  /**
   * The input format for the custom tool. Default is unconstrained text.
   *
   */
  format?:
    | {
        /**
         * Unconstrained text format. Always `text`.
         */
        type: 'text';
      }
    | {
        /**
         * The grammar definition.
         */
        definition: string;
        /**
         * The syntax of the grammar definition. One of `lark` or `regex`.
         */
        syntax: 'lark' | 'regex';
        /**
         * Grammar format. Always `grammar`.
         */
        type: 'grammar';
      };
  /**
   * The name of the custom tool, used to identify it in tool calls.
   */
  name: string;
  /**
   * The type of the custom tool. Always `custom`.
   */
  type: 'custom';
};

/**
 * Custom tool call
 *
 * A call to a custom tool created by the model.
 *
 */
export type CustomToolCall = {
  /**
   * An identifier used to map this custom tool call to a tool call output.
   *
   */
  call_id: string;
  /**
   * The unique ID of the custom tool call in the OpenAI platform.
   *
   */
  id?: string;
  /**
   * The input for the custom tool call generated by the model.
   *
   */
  input: string;
  /**
   * The name of the custom tool being called.
   *
   */
  name: string;
  /**
   * The type of the custom tool call. Always `custom_tool_call`.
   *
   */
  type: 'custom_tool_call';
};

/**
 * Custom tool call output
 *
 * The output of a custom tool call from your code, being sent back to the model.
 *
 */
export type CustomToolCallOutput = {
  /**
   * The call ID, used to map this custom tool call output to a custom tool call.
   *
   */
  call_id: string;
  /**
   * The unique ID of the custom tool call output in the OpenAI platform.
   *
   */
  id?: string;
  /**
   * The output from the custom tool call generated by your code.
   *
   */
  output: string;
  /**
   * The type of the custom tool call output. Always `custom_tool_call_output`.
   *
   */
  type: 'custom_tool_call_output';
};

/**
 * Custom tool
 *
 * A custom tool that processes input using a specified format.
 *
 */
export type CustomToolChatCompletions = {
  /**
   * Custom tool properties
   *
   * Properties of the custom tool.
   *
   */
  custom: {
    /**
     * Optional description of the custom tool, used to provide more context.
     *
     */
    description?: string;
    /**
     * The input format for the custom tool. Default is unconstrained text.
     *
     */
    format?:
      | {
          /**
           * Unconstrained text format. Always `text`.
           */
          type: 'text';
        }
      | {
          /**
           * Grammar format
           *
           * Your chosen grammar.
           */
          grammar: {
            /**
             * The grammar definition.
             */
            definition: string;
            /**
             * The syntax of the grammar definition. One of `lark` or `regex`.
             */
            syntax: 'lark' | 'regex';
          };
          /**
           * Grammar format. Always `grammar`.
           */
          type: 'grammar';
        };
    /**
     * The name of the custom tool, used to identify it in tool calls.
     */
    name: string;
  };
  /**
   * The type of the custom tool. Always `custom`.
   */
  type: 'custom';
};

export type DeleteAssistantResponse = {
  deleted: boolean;
  id: string;
  object: 'assistant.deleted';
};

export type DeleteCertificateResponse = {
  /**
   * The ID of the certificate that was deleted.
   */
  id: string;
  /**
   * The object type, must be `certificate.deleted`.
   */
  object: 'certificate.deleted';
};

export type DeleteFileResponse = {
  deleted: boolean;
  id: string;
  object: 'file';
};

export type DeleteFineTuningCheckpointPermissionResponse = {
  /**
   * Whether the fine-tuned model checkpoint permission was successfully deleted.
   */
  deleted: boolean;
  /**
   * The ID of the fine-tuned model checkpoint permission that was deleted.
   */
  id: string;
  /**
   * The object type, which is always "checkpoint.permission".
   */
  object: 'checkpoint.permission';
};

export type DeleteMessageResponse = {
  deleted: boolean;
  id: string;
  object: 'thread.message.deleted';
};

export type DeleteModelResponse = {
  deleted: boolean;
  id: string;
  object: string;
};

export type DeleteThreadResponse = {
  deleted: boolean;
  id: string;
  object: 'thread.deleted';
};

export type DeleteVectorStoreFileResponse = {
  deleted: boolean;
  id: string;
  object: 'vector_store.file.deleted';
};

export type DeleteVectorStoreResponse = {
  deleted: boolean;
  id: string;
  object: 'vector_store.deleted';
};

/**
 * Occurs when a stream ends.
 */
export type DoneEvent = {
  data: '[DONE]';
  event: 'done';
};

/**
 * DoubleClick
 *
 * A double click action.
 *
 */
export type DoubleClick = {
  /**
   * Specifies the event type. For a double click action, this property is
   * always set to `double_click`.
   *
   */
  type: 'double_click';
  /**
   * The x-coordinate where the double click occurred.
   *
   */
  x: number;
  /**
   * The y-coordinate where the double click occurred.
   *
   */
  y: number;
};

/**
 * Drag
 *
 * A drag action.
 *
 */
export type Drag = {
  /**
   * An array of coordinates representing the path of the drag action. Coordinates will appear as an array
   * of objects, eg
   * ```
   * [
   * { x: 100, y: 200 },
   * { x: 200, y: 300 }
   * ]
   * ```
   *
   */
  path: Array<Coordinate>;
  /**
   * Specifies the event type. For a drag action, this property is
   * always set to `drag`.
   *
   */
  type: 'drag';
};

/**
 * Input message
 *
 * A message input to the model with a role indicating instruction following
 * hierarchy. Instructions given with the `developer` or `system` role take
 * precedence over instructions given with the `user` role. Messages with the
 * `assistant` role are presumed to have been generated by the model in previous
 * interactions.
 *
 */
export type EasyInputMessage = {
  /**
   * Text, image, or audio input to the model, used to generate a response.
   * Can also contain previous assistant responses.
   *
   */
  content: string | InputMessageContentList;
  /**
   * The role of the message input. One of `user`, `assistant`, `system`, or
   * `developer`.
   *
   */
  role: 'user' | 'assistant' | 'system' | 'developer';
  /**
   * The type of the message input. Always `message`.
   *
   */
  type?: 'message';
};

/**
 * Represents an embedding vector returned by embedding endpoint.
 *
 */
export type Embedding = {
  /**
   * The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](https://platform.openai.com/docs/guides/embeddings).
   *
   */
  embedding: Array<number>;
  /**
   * The index of the embedding in the list of embeddings.
   */
  index: number;
  /**
   * The object type, which is always "embedding".
   */
  object: 'embedding';
};

export type _Error = {
  code: string;
  message: string;
  param: string;
  type: string;
};

/**
 * Occurs when an [error](https://platform.openai.com/docs/guides/error-codes#api-errors) occurs. This can happen due to an internal server error or a timeout.
 */
export type ErrorEvent = {
  data: _Error;
  event: 'error';
};

export type ErrorResponse = {
  error: _Error;
};

/**
 * Eval
 *
 * An Eval object with a data source config and testing criteria.
 * An Eval represents a task to be done for your LLM integration.
 * Like:
 * - Improve the quality of my chatbot
 * - See how well my chatbot handles customer support
 * - Check if o4-mini is better at my usecase than gpt-4o
 *
 */
export type Eval = {
  /**
   * The Unix timestamp (in seconds) for when the eval was created.
   */
  created_at: number;
  /**
   * Configuration of data sources used in runs of the evaluation.
   */
  data_source_config:
    | ({
        type?: 'EvalCustomDataSourceConfig';
      } & EvalCustomDataSourceConfig)
    | ({
        type?: 'EvalLogsDataSourceConfig';
      } & EvalLogsDataSourceConfig)
    | ({
        type?: 'EvalStoredCompletionsDataSourceConfig';
      } & EvalStoredCompletionsDataSourceConfig);
  /**
   * Unique identifier for the evaluation.
   */
  id: string;
  metadata: Metadata;
  /**
   * The name of the evaluation.
   */
  name: string;
  /**
   * The object type.
   */
  object: 'eval';
  /**
   * A list of testing criteria.
   */
  testing_criteria: Array<
    | EvalGraderLabelModel
    | EvalGraderStringCheck
    | EvalGraderTextSimilarity
    | EvalGraderPython
    | EvalGraderScoreModel
  >;
};

/**
 * EvalApiError
 *
 * An object representing an error response from the Eval API.
 *
 */
export type EvalApiError = {
  /**
   * The error code.
   */
  code: string;
  /**
   * The error message.
   */
  message: string;
};

/**
 * CustomDataSourceConfig
 *
 * A CustomDataSourceConfig which specifies the schema of your `item` and optionally `sample` namespaces.
 * The response schema defines the shape of the data that will be:
 * - Used to define your testing criteria and
 * - What data is required when creating a run
 *
 */
export type EvalCustomDataSourceConfig = {
  /**
   * The json schema for the run data source items.
   * Learn how to build JSON schemas [here](https://json-schema.org/).
   *
   */
  schema: {
    [key: string]: unknown;
  };
  /**
   * The type of data source. Always `custom`.
   */
  type: 'custom';
};

/**
 * LabelModelGrader
 */
export type EvalGraderLabelModel = GraderLabelModel;

/**
 * PythonGrader
 */
export type EvalGraderPython = GraderPython & {
  /**
   * The threshold for the score.
   */
  pass_threshold?: number;
};

/**
 * ScoreModelGrader
 */
export type EvalGraderScoreModel = GraderScoreModel & {
  /**
   * The threshold for the score.
   */
  pass_threshold?: number;
};

/**
 * StringCheckGrader
 */
export type EvalGraderStringCheck = GraderStringCheck;

/**
 * TextSimilarityGrader
 */
export type EvalGraderTextSimilarity = GraderTextSimilarity & {
  /**
   * The threshold for the score.
   */
  pass_threshold: number;
};

/**
 * Eval message object
 *
 * A message input to the model with a role indicating instruction following
 * hierarchy. Instructions given with the `developer` or `system` role take
 * precedence over instructions given with the `user` role. Messages with the
 * `assistant` role are presumed to have been generated by the model in previous
 * interactions.
 *
 */
export type EvalItem = {
  /**
   * Inputs to the model - can contain template strings.
   *
   */
  content:
    | string
    | InputTextContent
    | {
        /**
         * The text output from the model.
         *
         */
        text: string;
        /**
         * The type of the output text. Always `output_text`.
         *
         */
        type: 'output_text';
      }
    | {
        /**
         * The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`.
         *
         */
        detail?: string;
        /**
         * The URL of the image input.
         *
         */
        image_url: string;
        /**
         * The type of the image input. Always `input_image`.
         *
         */
        type: 'input_image';
      }
    | Array<unknown>;
  /**
   * The role of the message input. One of `user`, `assistant`, `system`, or
   * `developer`.
   *
   */
  role: 'user' | 'assistant' | 'system' | 'developer';
  /**
   * The type of the message input. Always `message`.
   *
   */
  type?: 'message';
};

/**
 * EvalJsonlFileContentSource
 */
export type EvalJsonlFileContentSource = {
  /**
   * The content of the jsonl file.
   */
  content: Array<{
    item: {
      [key: string]: unknown;
    };
    sample?: {
      [key: string]: unknown;
    };
  }>;
  /**
   * The type of jsonl source. Always `file_content`.
   */
  type: 'file_content';
};

/**
 * EvalJsonlFileIdSource
 */
export type EvalJsonlFileIdSource = {
  /**
   * The identifier of the file.
   */
  id: string;
  /**
   * The type of jsonl source. Always `file_id`.
   */
  type: 'file_id';
};

/**
 * EvalList
 *
 * An object representing a list of evals.
 *
 */
export type EvalList = {
  /**
   * An array of eval objects.
   *
   */
  data: Array<Eval>;
  /**
   * The identifier of the first eval in the data array.
   */
  first_id: string;
  /**
   * Indicates whether there are more evals available.
   */
  has_more: boolean;
  /**
   * The identifier of the last eval in the data array.
   */
  last_id: string;
  /**
   * The type of this object. It is always set to "list".
   *
   */
  object: 'list';
};

/**
 * LogsDataSourceConfig
 *
 * A LogsDataSourceConfig which specifies the metadata property of your logs query.
 * This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc.
 * The schema returned by this data source config is used to defined what variables are available in your evals.
 * `item` and `sample` are both defined when using this data source config.
 *
 */
export type EvalLogsDataSourceConfig = {
  metadata?: Metadata;
  /**
   * The json schema for the run data source items.
   * Learn how to build JSON schemas [here](https://json-schema.org/).
   *
   */
  schema: {
    [key: string]: unknown;
  };
  /**
   * The type of data source. Always `logs`.
   */
  type: 'logs';
};

/**
 * EvalResponsesSource
 *
 * A EvalResponsesSource object describing a run data source configuration.
 *
 */
export type EvalResponsesSource = {
  /**
   * Only include items created after this timestamp (inclusive). This is a query parameter used to select responses.
   */
  created_after?: number;
  /**
   * Only include items created before this timestamp (inclusive). This is a query parameter used to select responses.
   */
  created_before?: number;
  /**
   * Optional string to search the 'instructions' field. This is a query parameter used to select responses.
   */
  instructions_search?: string;
  /**
   * Metadata filter for the responses. This is a query parameter used to select responses.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The name of the model to find responses for. This is a query parameter used to select responses.
   */
  model?: string;
  /**
   * Optional reasoning effort parameter. This is a query parameter used to select responses.
   */
  reasoning_effort?: ReasoningEffort;
  /**
   * Sampling temperature. This is a query parameter used to select responses.
   */
  temperature?: number;
  /**
   * List of tool names. This is a query parameter used to select responses.
   */
  tools?: Array<string>;
  /**
   * Nucleus sampling parameter. This is a query parameter used to select responses.
   */
  top_p?: number;
  /**
   * The type of run data source. Always `responses`.
   */
  type: 'responses';
  /**
   * List of user identifiers. This is a query parameter used to select responses.
   */
  users?: Array<string>;
};

/**
 * EvalRun
 *
 * A schema representing an evaluation run.
 *
 */
export type EvalRun = {
  /**
   * Unix timestamp (in seconds) when the evaluation run was created.
   */
  created_at: number;
  /**
   * Information about the run's data source.
   */
  data_source:
    | ({
        type?: 'CreateEvalJsonlRunDataSource';
      } & CreateEvalJsonlRunDataSource)
    | ({
        type?: 'CreateEvalCompletionsRunDataSource';
      } & CreateEvalCompletionsRunDataSource)
    | ({
        type?: 'CreateEvalResponsesRunDataSource';
      } & CreateEvalResponsesRunDataSource);
  error: EvalApiError;
  /**
   * The identifier of the associated evaluation.
   */
  eval_id: string;
  /**
   * Unique identifier for the evaluation run.
   */
  id: string;
  metadata: Metadata;
  /**
   * The model that is evaluated, if applicable.
   */
  model: string;
  /**
   * The name of the evaluation run.
   */
  name: string;
  /**
   * The type of the object. Always "eval.run".
   */
  object: 'eval.run';
  /**
   * Usage statistics for each model during the evaluation run.
   */
  per_model_usage: Array<{
    /**
     * The number of tokens retrieved from cache.
     */
    cached_tokens: number;
    /**
     * The number of completion tokens generated.
     */
    completion_tokens: number;
    /**
     * The number of invocations.
     */
    invocation_count: number;
    /**
     * The name of the model.
     */
    model_name: string;
    /**
     * The number of prompt tokens used.
     */
    prompt_tokens: number;
    /**
     * The total number of tokens used.
     */
    total_tokens: number;
  }>;
  /**
   * Results per testing criteria applied during the evaluation run.
   */
  per_testing_criteria_results: Array<{
    /**
     * Number of tests failed for this criteria.
     */
    failed: number;
    /**
     * Number of tests passed for this criteria.
     */
    passed: number;
    /**
     * A description of the testing criteria.
     */
    testing_criteria: string;
  }>;
  /**
   * The URL to the rendered evaluation run report on the UI dashboard.
   */
  report_url: string;
  /**
   * Counters summarizing the outcomes of the evaluation run.
   */
  result_counts: {
    /**
     * Number of output items that resulted in an error.
     */
    errored: number;
    /**
     * Number of output items that failed to pass the evaluation.
     */
    failed: number;
    /**
     * Number of output items that passed the evaluation.
     */
    passed: number;
    /**
     * Total number of executed output items.
     */
    total: number;
  };
  /**
   * The status of the evaluation run.
   */
  status: string;
};

/**
 * EvalRunList
 *
 * An object representing a list of runs for an evaluation.
 *
 */
export type EvalRunList = {
  /**
   * An array of eval run objects.
   *
   */
  data: Array<EvalRun>;
  /**
   * The identifier of the first eval run in the data array.
   */
  first_id: string;
  /**
   * Indicates whether there are more evals available.
   */
  has_more: boolean;
  /**
   * The identifier of the last eval run in the data array.
   */
  last_id: string;
  /**
   * The type of this object. It is always set to "list".
   *
   */
  object: 'list';
};

/**
 * EvalRunOutputItem
 *
 * A schema representing an evaluation run output item.
 *
 */
export type EvalRunOutputItem = {
  /**
   * Unix timestamp (in seconds) when the evaluation run was created.
   */
  created_at: number;
  /**
   * Details of the input data source item.
   */
  datasource_item: {
    [key: string]: unknown;
  };
  /**
   * The identifier for the data source item.
   */
  datasource_item_id: number;
  /**
   * The identifier of the evaluation group.
   */
  eval_id: string;
  /**
   * Unique identifier for the evaluation run output item.
   */
  id: string;
  /**
   * The type of the object. Always "eval.run.output_item".
   */
  object: 'eval.run.output_item';
  /**
   * A list of results from the evaluation run.
   */
  results: Array<{
    [key: string]: unknown;
  }>;
  /**
   * The identifier of the evaluation run associated with this output item.
   */
  run_id: string;
  /**
   * A sample containing the input and output of the evaluation run.
   */
  sample: {
    error: EvalApiError;
    /**
     * The reason why the sample generation was finished.
     */
    finish_reason: string;
    /**
     * An array of input messages.
     */
    input: Array<{
      /**
       * The content of the message.
       */
      content: string;
      /**
       * The role of the message sender (e.g., system, user, developer).
       */
      role: string;
    }>;
    /**
     * The maximum number of tokens allowed for completion.
     */
    max_completion_tokens: number;
    /**
     * The model used for generating the sample.
     */
    model: string;
    /**
     * An array of output messages.
     */
    output: Array<{
      /**
       * The content of the message.
       */
      content?: string;
      /**
       * The role of the message (e.g. "system", "assistant", "user").
       */
      role?: string;
    }>;
    /**
     * The seed used for generating the sample.
     */
    seed: number;
    /**
     * The sampling temperature used.
     */
    temperature: number;
    /**
     * The top_p value used for sampling.
     */
    top_p: number;
    /**
     * Token usage details for the sample.
     */
    usage: {
      /**
       * The number of tokens retrieved from cache.
       */
      cached_tokens: number;
      /**
       * The number of completion tokens generated.
       */
      completion_tokens: number;
      /**
       * The number of prompt tokens used.
       */
      prompt_tokens: number;
      /**
       * The total number of tokens used.
       */
      total_tokens: number;
    };
  };
  /**
   * The status of the evaluation run.
   */
  status: string;
};

/**
 * EvalRunOutputItemList
 *
 * An object representing a list of output items for an evaluation run.
 *
 */
export type EvalRunOutputItemList = {
  /**
   * An array of eval run output item objects.
   *
   */
  data: Array<EvalRunOutputItem>;
  /**
   * The identifier of the first eval run output item in the data array.
   */
  first_id: string;
  /**
   * Indicates whether there are more eval run output items available.
   */
  has_more: boolean;
  /**
   * The identifier of the last eval run output item in the data array.
   */
  last_id: string;
  /**
   * The type of this object. It is always set to "list".
   *
   */
  object: 'list';
};

/**
 * StoredCompletionsDataSourceConfig
 *
 * Deprecated in favor of LogsDataSourceConfig.
 *
 *
 * @deprecated
 */
export type EvalStoredCompletionsDataSourceConfig = {
  metadata?: Metadata;
  /**
   * The json schema for the run data source items.
   * Learn how to build JSON schemas [here](https://json-schema.org/).
   *
   */
  schema: {
    [key: string]: unknown;
  };
  /**
   * The type of data source. Always `stored_completions`.
   */
  type: 'stored_completions';
};

/**
 * StoredCompletionsRunDataSource
 *
 * A StoredCompletionsRunDataSource configuration describing a set of filters
 *
 */
export type EvalStoredCompletionsSource = {
  /**
   * An optional Unix timestamp to filter items created after this time.
   */
  created_after?: number;
  /**
   * An optional Unix timestamp to filter items created before this time.
   */
  created_before?: number;
  /**
   * An optional maximum number of items to return.
   */
  limit?: number;
  metadata?: Metadata;
  /**
   * An optional model to filter by (e.g., 'gpt-4o').
   */
  model?: string;
  /**
   * The type of source. Always `stored_completions`.
   */
  type: 'stored_completions';
};

/**
 * File expiration policy
 *
 * The expiration policy for a file. By default, files with `purpose=batch` expire after 30 days and all other files are persisted until they are manually deleted.
 */
export type FileExpirationAfter = {
  /**
   * Anchor timestamp after which the expiration policy applies. Supported anchors: `created_at`.
   */
  anchor: 'created_at';
  /**
   * The number of seconds after the anchor time that the file will expire. Must be between 3600 (1 hour) and 2592000 (30 days).
   */
  seconds: number;
};

/**
 * File path
 *
 * A path to a file.
 *
 */
export type FilePath = {
  /**
   * The ID of the file.
   *
   */
  file_id: string;
  /**
   * The index of the file in the list of files.
   *
   */
  index: number;
  /**
   * The type of the file path. Always `file_path`.
   *
   */
  type: 'file_path';
};

/**
 * The ranker to use for the file search. If not specified will use the `auto` ranker.
 */
export const FileSearchRanker = {
  AUTO: 'auto',
  DEFAULT_2024_08_21: 'default_2024_08_21',
} as const;

/**
 * The ranker to use for the file search. If not specified will use the `auto` ranker.
 */
export type FileSearchRanker =
  (typeof FileSearchRanker)[keyof typeof FileSearchRanker];

/**
 * File search tool call ranking options
 *
 * The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.
 *
 * See the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.
 *
 */
export type FileSearchRankingOptions = {
  ranker?: FileSearchRanker;
  /**
   * The score threshold for the file search. All values must be a floating point number between 0 and 1.
   */
  score_threshold: number;
};

/**
 * File search tool call
 *
 * The results of a file search tool call. See the
 * [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
 *
 */
export type FileSearchToolCall = {
  /**
   * The unique ID of the file search tool call.
   *
   */
  id: string;
  /**
   * The queries used to search for files.
   *
   */
  queries: Array<string>;
  /**
   * The results of the file search tool call.
   *
   */
  results?: Array<{
    attributes?: VectorStoreFileAttributes;
    /**
     * The unique ID of the file.
     *
     */
    file_id?: string;
    /**
     * The name of the file.
     *
     */
    filename?: string;
    /**
     * The relevance score of the file - a value between 0 and 1.
     *
     */
    score?: number;
    /**
     * The text that was retrieved from the file.
     *
     */
    text?: string;
  }>;
  /**
   * The status of the file search tool call. One of `in_progress`,
   * `searching`, `incomplete` or `failed`,
   *
   */
  status: 'in_progress' | 'searching' | 'completed' | 'incomplete' | 'failed';
  /**
   * The type of the file search tool call. Always `file_search_call`.
   *
   */
  type: 'file_search_call';
};

export type FineTuneChatCompletionRequestAssistantMessage = {
  /**
   * Controls whether the assistant message is trained against (0 or 1)
   */
  weight?: 0 | 1;
} & ChatCompletionRequestAssistantMessage;

/**
 * The per-line training example of a fine-tuning input file for chat models using the supervised method.
 * Input messages may contain text or image content only. Audio and file input messages
 * are not currently supported for fine-tuning.
 *
 */
export type FineTuneChatRequestInput = {
  /**
   * A list of functions the model may generate JSON inputs for.
   *
   * @deprecated
   */
  functions?: Array<ChatCompletionFunctions>;
  messages?: Array<
    | ChatCompletionRequestSystemMessage
    | ChatCompletionRequestUserMessage
    | FineTuneChatCompletionRequestAssistantMessage
    | ChatCompletionRequestToolMessage
    | ChatCompletionRequestFunctionMessage
  >;
  parallel_tool_calls?: ParallelToolCalls;
  /**
   * A list of tools the model may generate JSON inputs for.
   */
  tools?: Array<ChatCompletionTool>;
};

/**
 * The hyperparameters used for the DPO fine-tuning job.
 */
export type FineTuneDpoHyperparameters = {
  /**
   * Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
   *
   */
  batch_size?: 'auto' | number;
  /**
   * The beta value for the DPO method. A higher beta value will increase the weight of the penalty between the policy and reference model.
   *
   */
  beta?: 'auto' | number;
  /**
   * Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.
   *
   */
  learning_rate_multiplier?: 'auto' | number;
  /**
   * The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
   *
   */
  n_epochs?: 'auto' | number;
};

/**
 * Configuration for the DPO fine-tuning method.
 */
export type FineTuneDpoMethod = {
  hyperparameters?: FineTuneDpoHyperparameters;
};

/**
 * The method used for fine-tuning.
 */
export type FineTuneMethod = {
  dpo?: FineTuneDpoMethod;
  reinforcement?: FineTuneReinforcementMethod;
  supervised?: FineTuneSupervisedMethod;
  /**
   * The type of method. Is either `supervised`, `dpo`, or `reinforcement`.
   */
  type: 'supervised' | 'dpo' | 'reinforcement';
};

/**
 * The per-line training example of a fine-tuning input file for chat models using the dpo method.
 * Input messages may contain text or image content only. Audio and file input messages
 * are not currently supported for fine-tuning.
 *
 */
export type FineTunePreferenceRequestInput = {
  input?: {
    messages?: Array<
      | ChatCompletionRequestSystemMessage
      | ChatCompletionRequestUserMessage
      | FineTuneChatCompletionRequestAssistantMessage
      | ChatCompletionRequestToolMessage
      | ChatCompletionRequestFunctionMessage
    >;
    parallel_tool_calls?: ParallelToolCalls;
    /**
     * A list of tools the model may generate JSON inputs for.
     */
    tools?: Array<ChatCompletionTool>;
  };
  /**
   * The non-preferred completion message for the output.
   */
  non_preferred_output?: Array<ChatCompletionRequestAssistantMessage>;
  /**
   * The preferred completion message for the output.
   */
  preferred_output?: Array<ChatCompletionRequestAssistantMessage>;
};

/**
 * The hyperparameters used for the reinforcement fine-tuning job.
 */
export type FineTuneReinforcementHyperparameters = {
  /**
   * Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
   *
   */
  batch_size?: 'auto' | number;
  /**
   * Multiplier on amount of compute used for exploring search space during training.
   *
   */
  compute_multiplier?: 'auto' | number;
  /**
   * The number of training steps between evaluation runs.
   *
   */
  eval_interval?: 'auto' | number;
  /**
   * Number of evaluation samples to generate per training step.
   *
   */
  eval_samples?: 'auto' | number;
  /**
   * Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.
   *
   */
  learning_rate_multiplier?: 'auto' | number;
  /**
   * The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
   *
   */
  n_epochs?: 'auto' | number;
  /**
   * Level of reasoning effort.
   *
   */
  reasoning_effort?: 'default' | 'low' | 'medium' | 'high';
};

/**
 * Configuration for the reinforcement fine-tuning method.
 */
export type FineTuneReinforcementMethod = {
  /**
   * The grader used for the fine-tuning job.
   */
  grader:
    | GraderStringCheck
    | GraderTextSimilarity
    | GraderPython
    | GraderScoreModel
    | GraderMulti;
  hyperparameters?: FineTuneReinforcementHyperparameters;
};

/**
 * Per-line training example for reinforcement fine-tuning. Note that `messages` and `tools` are the only reserved keywords.
 * Any other arbitrary key-value data can be included on training datapoints and will be available to reference during grading under the `{{ item.XXX }}` template variable.
 * Input messages may contain text or image content only. Audio and file input messages
 * are not currently supported for fine-tuning.
 *
 */
export type FineTuneReinforcementRequestInput = {
  messages: Array<
    | ChatCompletionRequestDeveloperMessage
    | ChatCompletionRequestUserMessage
    | FineTuneChatCompletionRequestAssistantMessage
    | ChatCompletionRequestToolMessage
  >;
  /**
   * A list of tools the model may generate JSON inputs for.
   */
  tools?: Array<ChatCompletionTool>;
};

/**
 * The hyperparameters used for the fine-tuning job.
 */
export type FineTuneSupervisedHyperparameters = {
  /**
   * Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
   *
   */
  batch_size?: 'auto' | number;
  /**
   * Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.
   *
   */
  learning_rate_multiplier?: 'auto' | number;
  /**
   * The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
   *
   */
  n_epochs?: 'auto' | number;
};

/**
 * Configuration for the supervised fine-tuning method.
 */
export type FineTuneSupervisedMethod = {
  hyperparameters?: FineTuneSupervisedHyperparameters;
};

/**
 * FineTuningCheckpointPermission
 *
 * The `checkpoint.permission` object represents a permission for a fine-tuned model checkpoint.
 *
 */
export type FineTuningCheckpointPermission = {
  /**
   * The Unix timestamp (in seconds) for when the permission was created.
   */
  created_at: number;
  /**
   * The permission identifier, which can be referenced in the API endpoints.
   */
  id: string;
  /**
   * The object type, which is always "checkpoint.permission".
   */
  object: 'checkpoint.permission';
  /**
   * The project identifier that the permission is for.
   */
  project_id: string;
};

/**
 * Fine-Tuning Job Integration
 */
export type FineTuningIntegration = {
  /**
   * The type of the integration being enabled for the fine-tuning job
   */
  type: 'wandb';
  /**
   * The settings for your integration with Weights and Biases. This payload specifies the project that
   * metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags
   * to your run, and set a default entity (team, username, etc) to be associated with your run.
   *
   */
  wandb: {
    /**
     * The entity to use for the run. This allows you to set the team or username of the WandB user that you would
     * like associated with the run. If not set, the default entity for the registered WandB API key is used.
     *
     */
    entity?: string;
    /**
     * A display name to set for the run. If not set, we will use the Job ID as the name.
     *
     */
    name?: string;
    /**
     * The name of the project that the new run will be created under.
     *
     */
    project: string;
    /**
     * A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some
     * default tags are generated by OpenAI: "openai/finetune", "openai/{base-model}", "openai/{ftjob-abcdef}".
     *
     */
    tags?: Array<string>;
  };
};

/**
 * FineTuningJob
 *
 * The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.
 *
 */
export type FineTuningJob = {
  /**
   * The Unix timestamp (in seconds) for when the fine-tuning job was created.
   */
  created_at: number;
  /**
   * For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.
   */
  error: {
    /**
     * A machine-readable error code.
     */
    code: string;
    /**
     * A human-readable error message.
     */
    message: string;
    /**
     * The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific.
     */
    param: string;
  };
  /**
   * The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running.
   */
  estimated_finish?: number;
  /**
   * The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
   */
  fine_tuned_model: string;
  /**
   * The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
   */
  finished_at: number;
  /**
   * The hyperparameters used for the fine-tuning job. This value will only be returned when running `supervised` jobs.
   */
  hyperparameters: {
    /**
     * Number of examples in each batch. A larger batch size means that model parameters
     * are updated less frequently, but with lower variance.
     *
     */
    batch_size?: 'auto' | number;
    /**
     * Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
     * overfitting.
     *
     */
    learning_rate_multiplier?: 'auto' | number;
    /**
     * The number of epochs to train the model for. An epoch refers to one full cycle
     * through the training dataset.
     *
     */
    n_epochs?: 'auto' | number;
  };
  /**
   * The object identifier, which can be referenced in the API endpoints.
   */
  id: string;
  /**
   * A list of integrations to enable for this fine-tuning job.
   */
  integrations?: Array<
    {
      type?: 'FineTuningIntegration';
    } & FineTuningIntegration
  >;
  metadata?: Metadata;
  method?: FineTuneMethod;
  /**
   * The base model that is being fine-tuned.
   */
  model: string;
  /**
   * The object type, which is always "fine_tuning.job".
   */
  object: 'fine_tuning.job';
  /**
   * The organization that owns the fine-tuning job.
   */
  organization_id: string;
  /**
   * The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](https://platform.openai.com/docs/api-reference/files/retrieve-contents).
   */
  result_files: Array<string>;
  /**
   * The seed used for the fine-tuning job.
   */
  seed: number;
  /**
   * The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
   */
  status:
    | 'validating_files'
    | 'queued'
    | 'running'
    | 'succeeded'
    | 'failed'
    | 'cancelled';
  /**
   * The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
   */
  trained_tokens: number;
  /**
   * The file ID used for training. You can retrieve the training data with the [Files API](https://platform.openai.com/docs/api-reference/files/retrieve-contents).
   */
  training_file: string;
  /**
   * The file ID used for validation. You can retrieve the validation results with the [Files API](https://platform.openai.com/docs/api-reference/files/retrieve-contents).
   */
  validation_file: string;
};

/**
 * FineTuningJobCheckpoint
 *
 * The `fine_tuning.job.checkpoint` object represents a model checkpoint for a fine-tuning job that is ready to use.
 *
 */
export type FineTuningJobCheckpoint = {
  /**
   * The Unix timestamp (in seconds) for when the checkpoint was created.
   */
  created_at: number;
  /**
   * The name of the fine-tuned checkpoint model that is created.
   */
  fine_tuned_model_checkpoint: string;
  /**
   * The name of the fine-tuning job that this checkpoint was created from.
   */
  fine_tuning_job_id: string;
  /**
   * The checkpoint identifier, which can be referenced in the API endpoints.
   */
  id: string;
  /**
   * Metrics at the step number during the fine-tuning job.
   */
  metrics: {
    full_valid_loss?: number;
    full_valid_mean_token_accuracy?: number;
    step?: number;
    train_loss?: number;
    train_mean_token_accuracy?: number;
    valid_loss?: number;
    valid_mean_token_accuracy?: number;
  };
  /**
   * The object type, which is always "fine_tuning.job.checkpoint".
   */
  object: 'fine_tuning.job.checkpoint';
  /**
   * The step number that the checkpoint was created at.
   */
  step_number: number;
};

/**
 * Fine-tuning job event object
 */
export type FineTuningJobEvent = {
  /**
   * The Unix timestamp (in seconds) for when the fine-tuning job was created.
   */
  created_at: number;
  /**
   * The data associated with the event.
   */
  data?: {
    [key: string]: unknown;
  };
  /**
   * The object identifier.
   */
  id: string;
  /**
   * The log level of the event.
   */
  level: 'info' | 'warn' | 'error';
  /**
   * The message of the event.
   */
  message: string;
  /**
   * The object type, which is always "fine_tuning.job.event".
   */
  object: 'fine_tuning.job.event';
  /**
   * The type of event.
   */
  type?: 'message' | 'metrics';
};

export type FunctionObject = {
  /**
   * A description of what the function does, used by the model to choose when and how to call the function.
   */
  description?: string;
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  parameters?: FunctionParameters;
  /**
   * Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](https://platform.openai.com/docs/guides/function-calling).
   */
  strict?: boolean;
};

/**
 * The parameters the functions accepts, described as a JSON Schema object. See the [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
 *
 * Omitting `parameters` defines a function with an empty parameter list.
 */
export type FunctionParameters = {
  [key: string]: unknown;
};

/**
 * Function tool call
 *
 * A tool call to run a function. See the
 * [function calling guide](https://platform.openai.com/docs/guides/function-calling) for more information.
 *
 */
export type FunctionToolCall = {
  /**
   * A JSON string of the arguments to pass to the function.
   *
   */
  arguments: string;
  /**
   * The unique ID of the function tool call generated by the model.
   *
   */
  call_id: string;
  /**
   * The unique ID of the function tool call.
   *
   */
  id?: string;
  /**
   * The name of the function to run.
   *
   */
  name: string;
  /**
   * The status of the item. One of `in_progress`, `completed`, or
   * `incomplete`. Populated when items are returned via API.
   *
   */
  status?: 'in_progress' | 'completed' | 'incomplete';
  /**
   * The type of the function tool call. Always `function_call`.
   *
   */
  type: 'function_call';
};

/**
 * Function tool call output
 *
 * The output of a function tool call.
 *
 */
export type FunctionToolCallOutput = {
  /**
   * The unique ID of the function tool call generated by the model.
   *
   */
  call_id: string;
  /**
   * The unique ID of the function tool call output. Populated when this item
   * is returned via API.
   *
   */
  id?: string;
  /**
   * A JSON string of the output of the function tool call.
   *
   */
  output: string;
  /**
   * The status of the item. One of `in_progress`, `completed`, or
   * `incomplete`. Populated when items are returned via API.
   *
   */
  status?: 'in_progress' | 'completed' | 'incomplete';
  /**
   * The type of the function tool call output. Always `function_call_output`.
   *
   */
  type: 'function_call_output';
};

export type FunctionToolCallOutputResource = FunctionToolCallOutput & {
  /**
   * The unique ID of the function call tool output.
   *
   */
  id: string;
};

export type FunctionToolCallResource = FunctionToolCall & {
  /**
   * The unique ID of the function tool call.
   *
   */
  id: string;
};

/**
 * LabelModelGrader
 *
 * A LabelModelGrader object which uses a model to assign labels to each item
 * in the evaluation.
 *
 */
export type GraderLabelModel = {
  input: Array<EvalItem>;
  /**
   * The labels to assign to each item in the evaluation.
   */
  labels: Array<string>;
  /**
   * The model to use for the evaluation. Must support structured outputs.
   */
  model: string;
  /**
   * The name of the grader.
   */
  name: string;
  /**
   * The labels that indicate a passing result. Must be a subset of labels.
   */
  passing_labels: Array<string>;
  /**
   * The object type, which is always `label_model`.
   */
  type: 'label_model';
};

/**
 * MultiGrader
 *
 * A MultiGrader object combines the output of multiple graders to produce a single score.
 */
export type GraderMulti = {
  /**
   * A formula to calculate the output based on grader results.
   */
  calculate_output: string;
  graders:
    | GraderStringCheck
    | GraderTextSimilarity
    | GraderPython
    | GraderScoreModel
    | GraderLabelModel;
  /**
   * The name of the grader.
   */
  name: string;
  /**
   * The object type, which is always `multi`.
   */
  type: 'multi';
};

/**
 * PythonGrader
 *
 * A PythonGrader object that runs a python script on the input.
 *
 */
export type GraderPython = {
  /**
   * The image tag to use for the python script.
   */
  image_tag?: string;
  /**
   * The name of the grader.
   */
  name: string;
  /**
   * The source code of the python script.
   */
  source: string;
  /**
   * The object type, which is always `python`.
   */
  type: 'python';
};

/**
 * ScoreModelGrader
 *
 * A ScoreModelGrader object that uses a model to assign a score to the input.
 *
 */
export type GraderScoreModel = {
  /**
   * The input text. This may include template strings.
   */
  input: Array<EvalItem>;
  /**
   * The model to use for the evaluation.
   */
  model: string;
  /**
   * The name of the grader.
   */
  name: string;
  /**
   * The range of the score. Defaults to `[0, 1]`.
   */
  range?: Array<number>;
  /**
   * The sampling parameters for the model.
   */
  sampling_params?: {
    [key: string]: unknown;
  };
  /**
   * The object type, which is always `score_model`.
   */
  type: 'score_model';
};

/**
 * StringCheckGrader
 *
 * A StringCheckGrader object that performs a string comparison between input and reference using a specified operation.
 *
 */
export type GraderStringCheck = {
  /**
   * The input text. This may include template strings.
   */
  input: string;
  /**
   * The name of the grader.
   */
  name: string;
  /**
   * The string check operation to perform. One of `eq`, `ne`, `like`, or `ilike`.
   */
  operation: 'eq' | 'ne' | 'like' | 'ilike';
  /**
   * The reference text. This may include template strings.
   */
  reference: string;
  /**
   * The object type, which is always `string_check`.
   */
  type: 'string_check';
};

/**
 * TextSimilarityGrader
 *
 * A TextSimilarityGrader object which grades text based on similarity metrics.
 *
 */
export type GraderTextSimilarity = {
  /**
   * The evaluation metric to use. One of `cosine`, `fuzzy_match`, `bleu`,
   * `gleu`, `meteor`, `rouge_1`, `rouge_2`, `rouge_3`, `rouge_4`, `rouge_5`,
   * or `rouge_l`.
   *
   */
  evaluation_metric:
    | 'cosine'
    | 'fuzzy_match'
    | 'bleu'
    | 'gleu'
    | 'meteor'
    | 'rouge_1'
    | 'rouge_2'
    | 'rouge_3'
    | 'rouge_4'
    | 'rouge_5'
    | 'rouge_l';
  /**
   * The text being graded.
   */
  input: string;
  /**
   * The name of the grader.
   */
  name: string;
  /**
   * The text being graded against.
   */
  reference: string;
  /**
   * The type of grader.
   */
  type: 'text_similarity';
};

/**
 * Represents the content or the URL of an image generated by the OpenAI API.
 */
export type Image = {
  /**
   * The base64-encoded JSON of the generated image. Default value for `gpt-image-1`, and only present if `response_format` is set to `b64_json` for `dall-e-2` and `dall-e-3`.
   */
  b64_json?: string;
  /**
   * For `dall-e-3` only, the revised prompt that was used to generate the image.
   */
  revised_prompt?: string;
  /**
   * When using `dall-e-2` or `dall-e-3`, the URL of the generated image if `response_format` is set to `url` (default value). Unsupported for `gpt-image-1`.
   */
  url?: string;
};

/**
 * Emitted when image editing has completed and the final image is available.
 *
 */
export type ImageEditCompletedEvent = {
  /**
   * Base64-encoded final edited image data, suitable for rendering as an image.
   *
   */
  b64_json: string;
  /**
   * The background setting for the edited image.
   *
   */
  background: 'transparent' | 'opaque' | 'auto';
  /**
   * The Unix timestamp when the event was created.
   *
   */
  created_at: number;
  /**
   * The output format for the edited image.
   *
   */
  output_format: 'png' | 'webp' | 'jpeg';
  /**
   * The quality setting for the edited image.
   *
   */
  quality: 'low' | 'medium' | 'high' | 'auto';
  /**
   * The size of the edited image.
   *
   */
  size: '1024x1024' | '1024x1536' | '1536x1024' | 'auto';
  /**
   * The type of the event. Always `image_edit.completed`.
   *
   */
  type: 'image_edit.completed';
  usage: ImagesUsage;
};

/**
 * Emitted when a partial image is available during image editing streaming.
 *
 */
export type ImageEditPartialImageEvent = {
  /**
   * Base64-encoded partial image data, suitable for rendering as an image.
   *
   */
  b64_json: string;
  /**
   * The background setting for the requested edited image.
   *
   */
  background: 'transparent' | 'opaque' | 'auto';
  /**
   * The Unix timestamp when the event was created.
   *
   */
  created_at: number;
  /**
   * The output format for the requested edited image.
   *
   */
  output_format: 'png' | 'webp' | 'jpeg';
  /**
   * 0-based index for the partial image (streaming).
   *
   */
  partial_image_index: number;
  /**
   * The quality setting for the requested edited image.
   *
   */
  quality: 'low' | 'medium' | 'high' | 'auto';
  /**
   * The size of the requested edited image.
   *
   */
  size: '1024x1024' | '1024x1536' | '1536x1024' | 'auto';
  /**
   * The type of the event. Always `image_edit.partial_image`.
   *
   */
  type: 'image_edit.partial_image';
};

export type ImageEditStreamEvent =
  | ({
      type?: 'ImageEditPartialImageEvent';
    } & ImageEditPartialImageEvent)
  | ({
      type?: 'ImageEditCompletedEvent';
    } & ImageEditCompletedEvent);

/**
 * Emitted when image generation has completed and the final image is available.
 *
 */
export type ImageGenCompletedEvent = {
  /**
   * Base64-encoded image data, suitable for rendering as an image.
   *
   */
  b64_json: string;
  /**
   * The background setting for the generated image.
   *
   */
  background: 'transparent' | 'opaque' | 'auto';
  /**
   * The Unix timestamp when the event was created.
   *
   */
  created_at: number;
  /**
   * The output format for the generated image.
   *
   */
  output_format: 'png' | 'webp' | 'jpeg';
  /**
   * The quality setting for the generated image.
   *
   */
  quality: 'low' | 'medium' | 'high' | 'auto';
  /**
   * The size of the generated image.
   *
   */
  size: '1024x1024' | '1024x1536' | '1536x1024' | 'auto';
  /**
   * The type of the event. Always `image_generation.completed`.
   *
   */
  type: 'image_generation.completed';
  usage: ImagesUsage;
};

/**
 * Emitted when a partial image is available during image generation streaming.
 *
 */
export type ImageGenPartialImageEvent = {
  /**
   * Base64-encoded partial image data, suitable for rendering as an image.
   *
   */
  b64_json: string;
  /**
   * The background setting for the requested image.
   *
   */
  background: 'transparent' | 'opaque' | 'auto';
  /**
   * The Unix timestamp when the event was created.
   *
   */
  created_at: number;
  /**
   * The output format for the requested image.
   *
   */
  output_format: 'png' | 'webp' | 'jpeg';
  /**
   * 0-based index for the partial image (streaming).
   *
   */
  partial_image_index: number;
  /**
   * The quality setting for the requested image.
   *
   */
  quality: 'low' | 'medium' | 'high' | 'auto';
  /**
   * The size of the requested image.
   *
   */
  size: '1024x1024' | '1024x1536' | '1536x1024' | 'auto';
  /**
   * The type of the event. Always `image_generation.partial_image`.
   *
   */
  type: 'image_generation.partial_image';
};

export type ImageGenStreamEvent =
  | ({
      type?: 'ImageGenPartialImageEvent';
    } & ImageGenPartialImageEvent)
  | ({
      type?: 'ImageGenCompletedEvent';
    } & ImageGenCompletedEvent);

/**
 * Image generation tool
 *
 * A tool that generates images using a model like `gpt-image-1`.
 *
 */
export type ImageGenTool = {
  /**
   * Background type for the generated image. One of `transparent`,
   * `opaque`, or `auto`. Default: `auto`.
   *
   */
  background?: 'transparent' | 'opaque' | 'auto';
  input_fidelity?: ImageInputFidelity;
  /**
   * Optional mask for inpainting. Contains `image_url`
   * (string, optional) and `file_id` (string, optional).
   *
   */
  input_image_mask?: {
    /**
     * File ID for the mask image.
     *
     */
    file_id?: string;
    /**
     * Base64-encoded mask image.
     *
     */
    image_url?: string;
  };
  /**
   * The image generation model to use. Default: `gpt-image-1`.
   *
   */
  model?: 'gpt-image-1';
  /**
   * Moderation level for the generated image. Default: `auto`.
   *
   */
  moderation?: 'auto' | 'low';
  /**
   * Compression level for the output image. Default: 100.
   *
   */
  output_compression?: number;
  /**
   * The output format of the generated image. One of `png`, `webp`, or
   * `jpeg`. Default: `png`.
   *
   */
  output_format?: 'png' | 'webp' | 'jpeg';
  /**
   * Number of partial images to generate in streaming mode, from 0 (default value) to 3.
   *
   */
  partial_images?: number;
  /**
   * The quality of the generated image. One of `low`, `medium`, `high`,
   * or `auto`. Default: `auto`.
   *
   */
  quality?: 'low' | 'medium' | 'high' | 'auto';
  /**
   * The size of the generated image. One of `1024x1024`, `1024x1536`,
   * `1536x1024`, or `auto`. Default: `auto`.
   *
   */
  size?: '1024x1024' | '1024x1536' | '1536x1024' | 'auto';
  /**
   * The type of the image generation tool. Always `image_generation`.
   *
   */
  type: 'image_generation';
};

/**
 * Image generation call
 *
 * An image generation request made by the model.
 *
 */
export type ImageGenToolCall = {
  /**
   * The unique ID of the image generation call.
   *
   */
  id: string;
  /**
   * The generated image encoded in base64.
   *
   */
  result: string;
  /**
   * The status of the image generation call.
   *
   */
  status: 'in_progress' | 'completed' | 'generating' | 'failed';
  /**
   * The type of the image generation call. Always `image_generation_call`.
   *
   */
  type: 'image_generation_call';
};

/**
 * Control how much effort the model will exert to match the style and features,
 * especially facial features, of input images. This parameter is only supported
 * for `gpt-image-1`. Supports `high` and `low`. Defaults to `low`.
 *
 */
export const ImageInputFidelity = {
  HIGH: 'high',
  LOW: 'low',
} as const;

/**
 * Control how much effort the model will exert to match the style and features,
 * especially facial features, of input images. This parameter is only supported
 * for `gpt-image-1`. Supports `high` and `low`. Defaults to `low`.
 *
 */
export type ImageInputFidelity =
  (typeof ImageInputFidelity)[keyof typeof ImageInputFidelity];

/**
 * Image generation response
 *
 * The response from the image generation endpoint.
 */
export type ImagesResponse = {
  /**
   * The background parameter used for the image generation. Either `transparent` or `opaque`.
   */
  background?: 'transparent' | 'opaque';
  /**
   * The Unix timestamp (in seconds) of when the image was created.
   */
  created: number;
  /**
   * The list of generated images.
   */
  data?: Array<Image>;
  /**
   * The output format of the image generation. Either `png`, `webp`, or `jpeg`.
   */
  output_format?: 'png' | 'webp' | 'jpeg';
  /**
   * The quality of the image generated. Either `low`, `medium`, or `high`.
   */
  quality?: 'low' | 'medium' | 'high';
  /**
   * The size of the image generated. Either `1024x1024`, `1024x1536`, or `1536x1024`.
   */
  size?: '1024x1024' | '1024x1536' | '1536x1024';
  usage?: ImageGenUsage;
};

/**
 * For `gpt-image-1` only, the token usage information for the image generation.
 *
 */
export type ImagesUsage = {
  /**
   * The number of tokens (images and text) in the input prompt.
   */
  input_tokens: number;
  /**
   * The input tokens detailed information for the image generation.
   */
  input_tokens_details: {
    /**
     * The number of image tokens in the input prompt.
     */
    image_tokens: number;
    /**
     * The number of text tokens in the input prompt.
     */
    text_tokens: number;
  };
  /**
   * The number of image tokens in the output image.
   */
  output_tokens: number;
  /**
   * The total number of tokens (images and text) used for the image generation.
   *
   */
  total_tokens: number;
};

/**
 * Specify additional output data to include in the model response. Currently
 * supported values are:
 * - `code_interpreter_call.outputs`: Includes the outputs of python code execution
 * in code interpreter tool call items.
 * - `computer_call_output.output.image_url`: Include image urls from the computer call output.
 * - `file_search_call.results`: Include the search results of
 * the file search tool call.
 * - `message.input_image.image_url`: Include image urls from the input message.
 * - `message.output_text.logprobs`: Include logprobs with assistant messages.
 * - `reasoning.encrypted_content`: Includes an encrypted version of reasoning
 * tokens in reasoning item outputs. This enables reasoning items to be used in
 * multi-turn conversations when using the Responses API statelessly (like
 * when the `store` parameter is set to `false`, or when an organization is
 * enrolled in the zero data retention program).
 *
 */
export const Includable = {
  CODE_INTERPRETER_CALL_OUTPUTS: 'code_interpreter_call.outputs',
  COMPUTER_CALL_OUTPUT_OUTPUT_IMAGE_URL:
    'computer_call_output.output.image_url',
  FILE_SEARCH_CALL_RESULTS: 'file_search_call.results',
  MESSAGE_INPUT_IMAGE_IMAGE_URL: 'message.input_image.image_url',
  MESSAGE_OUTPUT_TEXT_LOGPROBS: 'message.output_text.logprobs',
  REASONING_ENCRYPTED_CONTENT: 'reasoning.encrypted_content',
} as const;

/**
 * Specify additional output data to include in the model response. Currently
 * supported values are:
 * - `code_interpreter_call.outputs`: Includes the outputs of python code execution
 * in code interpreter tool call items.
 * - `computer_call_output.output.image_url`: Include image urls from the computer call output.
 * - `file_search_call.results`: Include the search results of
 * the file search tool call.
 * - `message.input_image.image_url`: Include image urls from the input message.
 * - `message.output_text.logprobs`: Include logprobs with assistant messages.
 * - `reasoning.encrypted_content`: Includes an encrypted version of reasoning
 * tokens in reasoning item outputs. This enables reasoning items to be used in
 * multi-turn conversations when using the Responses API statelessly (like
 * when the `store` parameter is set to `false`, or when an organization is
 * enrolled in the zero data retention program).
 *
 */
export type Includable = (typeof Includable)[keyof typeof Includable];

/**
 * Audio input
 *
 * An audio input to the model.
 *
 */
export type InputAudio = {
  /**
   * Base64-encoded audio data.
   *
   */
  data: string;
  /**
   * The format of the audio data. Currently supported formats are `mp3` and
   * `wav`.
   *
   */
  format: 'mp3' | 'wav';
  /**
   * The type of the input item. Always `input_audio`.
   *
   */
  type: 'input_audio';
};

export type InputContent =
  | ({
      type?: 'InputTextContent';
    } & InputTextContent)
  | ({
      type?: 'InputImageContent';
    } & InputImageContent)
  | ({
      type?: 'InputFileContent';
    } & InputFileContent);

export type InputItem =
  | ({
      type?: 'EasyInputMessage';
    } & EasyInputMessage)
  | ({
      type?: 'Item';
    } & Item)
  | ({
      type?: 'ItemReferenceParam';
    } & ItemReferenceParam);

/**
 * Input message
 *
 * A message input to the model with a role indicating instruction following
 * hierarchy. Instructions given with the `developer` or `system` role take
 * precedence over instructions given with the `user` role.
 *
 */
export type InputMessage = {
  content: InputMessageContentList;
  /**
   * The role of the message input. One of `user`, `system`, or `developer`.
   *
   */
  role: 'user' | 'system' | 'developer';
  /**
   * The status of item. One of `in_progress`, `completed`, or
   * `incomplete`. Populated when items are returned via API.
   *
   */
  status?: 'in_progress' | 'completed' | 'incomplete';
  /**
   * The type of the message input. Always set to `message`.
   *
   */
  type?: 'message';
};

/**
 * Input item content list
 *
 * A list of one or many input items to the model, containing different content
 * types.
 *
 */
export type InputMessageContentList = Array<InputContent>;

export type InputMessageResource = InputMessage & {
  /**
   * The unique ID of the message input.
   *
   */
  id: string;
};

/**
 * Represents an individual `invite` to the organization.
 */
export type Invite = {
  /**
   * The Unix timestamp (in seconds) of when the invite was accepted.
   */
  accepted_at?: number;
  /**
   * The email address of the individual to whom the invite was sent
   */
  email: string;
  /**
   * The Unix timestamp (in seconds) of when the invite expires.
   */
  expires_at: number;
  /**
   * The identifier, which can be referenced in API endpoints
   */
  id: string;
  /**
   * The Unix timestamp (in seconds) of when the invite was sent.
   */
  invited_at: number;
  /**
   * The object type, which is always `organization.invite`
   */
  object: 'organization.invite';
  /**
   * The projects that were granted membership upon acceptance of the invite.
   */
  projects?: Array<{
    /**
     * Project's public ID
     */
    id?: string;
    /**
     * Project membership role
     */
    role?: 'member' | 'owner';
  }>;
  /**
   * `owner` or `reader`
   */
  role: 'owner' | 'reader';
  /**
   * `accepted`,`expired`, or `pending`
   */
  status: 'accepted' | 'expired' | 'pending';
};

export type InviteDeleteResponse = {
  deleted: boolean;
  id: string;
  /**
   * The object type, which is always `organization.invite.deleted`
   */
  object: 'organization.invite.deleted';
};

export type InviteListResponse = {
  data: Array<Invite>;
  /**
   * The first `invite_id` in the retrieved `list`
   */
  first_id?: string;
  /**
   * The `has_more` property is used for pagination to indicate there are additional results.
   */
  has_more?: boolean;
  /**
   * The last `invite_id` in the retrieved `list`
   */
  last_id?: string;
  /**
   * The object type, which is always `list`
   */
  object: 'list';
};

export type InviteRequest = {
  /**
   * Send an email to this address
   */
  email: string;
  /**
   * An array of projects to which membership is granted at the same time the org invite is accepted. If omitted, the user will be invited to the default project for compatibility with legacy behavior.
   */
  projects?: Array<{
    /**
     * Project's public ID
     */
    id: string;
    /**
     * Project membership role
     */
    role: 'member' | 'owner';
  }>;
  /**
   * `owner` or `reader`
   */
  role: 'reader' | 'owner';
};

/**
 * Content item used to generate a response.
 *
 */
export type Item =
  | ({
      type?: 'InputMessage';
    } & InputMessage)
  | ({
      type?: 'OutputMessage';
    } & OutputMessage)
  | ({
      type?: 'FileSearchToolCall';
    } & FileSearchToolCall)
  | ({
      type?: 'ComputerToolCall';
    } & ComputerToolCall)
  | ({
      type?: 'ComputerCallOutputItemParam';
    } & ComputerCallOutputItemParam)
  | ({
      type?: 'WebSearchToolCall';
    } & WebSearchToolCall)
  | ({
      type?: 'FunctionToolCall';
    } & FunctionToolCall)
  | ({
      type?: 'FunctionCallOutputItemParam';
    } & FunctionCallOutputItemParam)
  | ({
      type?: 'ReasoningItem';
    } & ReasoningItem)
  | ({
      type?: 'ImageGenToolCall';
    } & ImageGenToolCall)
  | ({
      type?: 'CodeInterpreterToolCall';
    } & CodeInterpreterToolCall)
  | ({
      type?: 'LocalShellToolCall';
    } & LocalShellToolCall)
  | ({
      type?: 'LocalShellToolCallOutput';
    } & LocalShellToolCallOutput)
  | ({
      type?: 'MCPListTools';
    } & McpListTools)
  | ({
      type?: 'MCPApprovalRequest';
    } & McpApprovalRequest)
  | ({
      type?: 'MCPApprovalResponse';
    } & McpApprovalResponse)
  | ({
      type?: 'MCPToolCall';
    } & McpToolCall)
  | ({
      type?: 'CustomToolCallOutput';
    } & CustomToolCallOutput)
  | ({
      type?: 'CustomToolCall';
    } & CustomToolCall);

/**
 * Content item used to generate a response.
 *
 */
export type ItemResource =
  | ({
      type?: 'InputMessageResource';
    } & InputMessageResource)
  | ({
      type?: 'OutputMessage';
    } & OutputMessage)
  | ({
      type?: 'FileSearchToolCall';
    } & FileSearchToolCall)
  | ({
      type?: 'ComputerToolCall';
    } & ComputerToolCall)
  | ({
      type?: 'ComputerToolCallOutputResource';
    } & ComputerToolCallOutputResource)
  | ({
      type?: 'WebSearchToolCall';
    } & WebSearchToolCall)
  | ({
      type?: 'FunctionToolCallResource';
    } & FunctionToolCallResource)
  | ({
      type?: 'FunctionToolCallOutputResource';
    } & FunctionToolCallOutputResource)
  | ({
      type?: 'ImageGenToolCall';
    } & ImageGenToolCall)
  | ({
      type?: 'CodeInterpreterToolCall';
    } & CodeInterpreterToolCall)
  | ({
      type?: 'LocalShellToolCall';
    } & LocalShellToolCall)
  | ({
      type?: 'LocalShellToolCallOutput';
    } & LocalShellToolCallOutput)
  | ({
      type?: 'MCPListTools';
    } & McpListTools)
  | ({
      type?: 'MCPApprovalRequest';
    } & McpApprovalRequest)
  | ({
      type?: 'MCPApprovalResponseResource';
    } & McpApprovalResponseResource)
  | ({
      type?: 'MCPToolCall';
    } & McpToolCall);

/**
 * KeyPress
 *
 * A collection of keypresses the model would like to perform.
 *
 */
export type KeyPress = {
  /**
   * The combination of keys the model is requesting to be pressed. This is an
   * array of strings, each representing a key.
   *
   */
  keys: Array<string>;
  /**
   * Specifies the event type. For a keypress action, this property is
   * always set to `keypress`.
   *
   */
  type: 'keypress';
};

export type ListAssistantsResponse = {
  data: Array<AssistantObject>;
  first_id: string;
  has_more: boolean;
  last_id: string;
  object: string;
};

export type ListAuditLogsResponse = {
  data: Array<AuditLog>;
  first_id: string;
  has_more: boolean;
  last_id: string;
  object: 'list';
};

export type ListBatchesResponse = {
  data: Array<Batch>;
  first_id?: string;
  has_more: boolean;
  last_id?: string;
  object: 'list';
};

export type ListCertificatesResponse = {
  data: Array<Certificate>;
  first_id?: string;
  has_more: boolean;
  last_id?: string;
  object: 'list';
};

export type ListFilesResponse = {
  data: Array<OpenAiFile>;
  first_id: string;
  has_more: boolean;
  last_id: string;
  object: string;
};

export type ListFineTuningCheckpointPermissionResponse = {
  data: Array<FineTuningCheckpointPermission>;
  first_id?: string;
  has_more: boolean;
  last_id?: string;
  object: 'list';
};

export type ListFineTuningJobCheckpointsResponse = {
  data: Array<FineTuningJobCheckpoint>;
  first_id?: string;
  has_more: boolean;
  last_id?: string;
  object: 'list';
};

export type ListFineTuningJobEventsResponse = {
  data: Array<FineTuningJobEvent>;
  has_more: boolean;
  object: 'list';
};

export type ListMessagesResponse = {
  data: Array<MessageObject>;
  first_id: string;
  has_more: boolean;
  last_id: string;
  object: string;
};

export type ListModelsResponse = {
  data: Array<Model>;
  object: 'list';
};

export type ListPaginatedFineTuningJobsResponse = {
  data: Array<FineTuningJob>;
  has_more: boolean;
  object: 'list';
};

export type ListRunStepsResponse = {
  data: Array<RunStepObject>;
  first_id: string;
  has_more: boolean;
  last_id: string;
  object: string;
};

export type ListRunsResponse = {
  data: Array<RunObject>;
  first_id: string;
  has_more: boolean;
  last_id: string;
  object: string;
};

export type ListVectorStoreFilesResponse = {
  data: Array<VectorStoreFileObject>;
  first_id: string;
  has_more: boolean;
  last_id: string;
  object: string;
};

export type ListVectorStoresResponse = {
  data: Array<VectorStoreObject>;
  first_id: string;
  has_more: boolean;
  last_id: string;
  object: string;
};

/**
 * Local shell exec action
 *
 * Execute a shell command on the server.
 *
 */
export type LocalShellExecAction = {
  /**
   * The command to run.
   *
   */
  command: Array<string>;
  /**
   * Environment variables to set for the command.
   *
   */
  env: {
    [key: string]: string;
  };
  /**
   * Optional timeout in milliseconds for the command.
   *
   */
  timeout_ms?: number;
  /**
   * The type of the local shell action. Always `exec`.
   *
   */
  type: 'exec';
  /**
   * Optional user to run the command as.
   *
   */
  user?: string;
  /**
   * Optional working directory to run the command in.
   *
   */
  working_directory?: string;
};

/**
 * Local shell tool
 *
 * A tool that allows the model to execute shell commands in a local environment.
 *
 */
export type LocalShellTool = {
  /**
   * The type of the local shell tool. Always `local_shell`.
   */
  type: 'local_shell';
};

/**
 * Local shell call
 *
 * A tool call to run a command on the local shell.
 *
 */
export type LocalShellToolCall = {
  action: LocalShellExecAction;
  /**
   * The unique ID of the local shell tool call generated by the model.
   *
   */
  call_id: string;
  /**
   * The unique ID of the local shell call.
   *
   */
  id: string;
  /**
   * The status of the local shell call.
   *
   */
  status: 'in_progress' | 'completed' | 'incomplete';
  /**
   * The type of the local shell call. Always `local_shell_call`.
   *
   */
  type: 'local_shell_call';
};

/**
 * Local shell call output
 *
 * The output of a local shell tool call.
 *
 */
export type LocalShellToolCallOutput = {
  /**
   * The unique ID of the local shell tool call generated by the model.
   *
   */
  id: string;
  /**
   * A JSON string of the output of the local shell tool call.
   *
   */
  output: string;
  /**
   * The status of the item. One of `in_progress`, `completed`, or `incomplete`.
   *
   */
  status?: 'in_progress' | 'completed' | 'incomplete';
  /**
   * The type of the local shell tool call output. Always `local_shell_call_output`.
   *
   */
  type: 'local_shell_call_output';
};

/**
 * A log probability object.
 *
 */
export type LogProbProperties = {
  /**
   * The bytes that were used to generate the log probability.
   *
   */
  bytes: Array<number>;
  /**
   * The log probability of the token.
   *
   */
  logprob: number;
  /**
   * The token that was used to generate the log probability.
   *
   */
  token: string;
};

/**
 * MCP approval request
 *
 * A request for human approval of a tool invocation.
 *
 */
export type McpApprovalRequest = {
  /**
   * A JSON string of arguments for the tool.
   *
   */
  arguments: string;
  /**
   * The unique ID of the approval request.
   *
   */
  id: string;
  /**
   * The name of the tool to run.
   *
   */
  name: string;
  /**
   * The label of the MCP server making the request.
   *
   */
  server_label: string;
  /**
   * The type of the item. Always `mcp_approval_request`.
   *
   */
  type: 'mcp_approval_request';
};

/**
 * MCP approval response
 *
 * A response to an MCP approval request.
 *
 */
export type McpApprovalResponse = {
  /**
   * The ID of the approval request being answered.
   *
   */
  approval_request_id: string;
  /**
   * Whether the request was approved.
   *
   */
  approve: boolean;
  /**
   * The unique ID of the approval response
   *
   */
  id?: string;
  /**
   * Optional reason for the decision.
   *
   */
  reason?: string;
  /**
   * The type of the item. Always `mcp_approval_response`.
   *
   */
  type: 'mcp_approval_response';
};

/**
 * MCP approval response
 *
 * A response to an MCP approval request.
 *
 */
export type McpApprovalResponseResource = {
  /**
   * The ID of the approval request being answered.
   *
   */
  approval_request_id: string;
  /**
   * Whether the request was approved.
   *
   */
  approve: boolean;
  /**
   * The unique ID of the approval response
   *
   */
  id: string;
  /**
   * Optional reason for the decision.
   *
   */
  reason?: string;
  /**
   * The type of the item. Always `mcp_approval_response`.
   *
   */
  type: 'mcp_approval_response';
};

/**
 * MCP list tools
 *
 * A list of tools available on an MCP server.
 *
 */
export type McpListTools = {
  /**
   * Error message if the server could not list tools.
   *
   */
  error?: string;
  /**
   * The unique ID of the list.
   *
   */
  id: string;
  /**
   * The label of the MCP server.
   *
   */
  server_label: string;
  /**
   * The tools available on the server.
   *
   */
  tools: Array<McpListToolsTool>;
  /**
   * The type of the item. Always `mcp_list_tools`.
   *
   */
  type: 'mcp_list_tools';
};

/**
 * MCP list tools tool
 *
 * A tool available on an MCP server.
 *
 */
export type McpListToolsTool = {
  /**
   * Additional annotations about the tool.
   *
   */
  annotations?: {
    [key: string]: unknown;
  };
  /**
   * The description of the tool.
   *
   */
  description?: string;
  /**
   * The JSON schema describing the tool's input.
   *
   */
  input_schema: {
    [key: string]: unknown;
  };
  /**
   * The name of the tool.
   *
   */
  name: string;
};

/**
 * MCP tool
 *
 * Give the model access to additional tools via remote Model Context Protocol
 * (MCP) servers. [Learn more about MCP](https://platform.openai.com/docs/guides/tools-remote-mcp).
 *
 */
export type McpTool = {
  /**
   * List of allowed tool names or a filter object.
   *
   */
  allowed_tools?:
    | Array<string>
    | {
        /**
         * MCP allowed tools
         *
         * List of allowed tool names.
         */
        tool_names?: Array<string>;
      };
  /**
   * Optional HTTP headers to send to the MCP server. Use for authentication
   * or other purposes.
   *
   */
  headers?: {
    [key: string]: string;
  };
  /**
   * Specify which of the MCP server's tools require approval.
   */
  require_approval?:
    | {
        /**
         * A list of tools that always require approval.
         *
         */
        always?: {
          /**
           * List of tools that require approval.
           */
          tool_names?: Array<string>;
        };
        /**
         * A list of tools that never require approval.
         *
         */
        never?: {
          /**
           * List of tools that do not require approval.
           */
          tool_names?: Array<string>;
        };
      }
    | 'always'
    | 'never';
  /**
   * Optional description of the MCP server, used to provide more context.
   *
   */
  server_description?: string;
  /**
   * A label for this MCP server, used to identify it in tool calls.
   *
   */
  server_label: string;
  /**
   * The URL for the MCP server.
   *
   */
  server_url: string;
  /**
   * The type of the MCP tool. Always `mcp`.
   */
  type: 'mcp';
};

/**
 * MCP tool call
 *
 * An invocation of a tool on an MCP server.
 *
 */
export type McpToolCall = {
  /**
   * A JSON string of the arguments passed to the tool.
   *
   */
  arguments: string;
  /**
   * The error from the tool call, if any.
   *
   */
  error?: string;
  /**
   * The unique ID of the tool call.
   *
   */
  id: string;
  /**
   * The name of the tool that was run.
   *
   */
  name: string;
  /**
   * The output from the tool call.
   *
   */
  output?: string;
  /**
   * The label of the MCP server running the tool.
   *
   */
  server_label: string;
  /**
   * The type of the item. Always `mcp_call`.
   *
   */
  type: 'mcp_call';
};

/**
 * Image file
 *
 * References an image [File](https://platform.openai.com/docs/api-reference/files) in the content of a message.
 */
export type MessageContentImageFileObject = {
  image_file: {
    /**
     * Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
     */
    detail?: 'auto' | 'low' | 'high';
    /**
     * The [File](https://platform.openai.com/docs/api-reference/files) ID of the image in the message content. Set `purpose="vision"` when uploading the File if you need to later display the file content.
     */
    file_id: string;
  };
  /**
   * Always `image_file`.
   */
  type: 'image_file';
};

/**
 * Image URL
 *
 * References an image URL in the content of a message.
 */
export type MessageContentImageUrlObject = {
  image_url: {
    /**
     * Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`
     */
    detail?: 'auto' | 'low' | 'high';
    /**
     * The external URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.
     */
    url: string;
  };
  /**
   * The type of the content part.
   */
  type: 'image_url';
};

/**
 * Refusal
 *
 * The refusal content generated by the assistant.
 */
export type MessageContentRefusalObject = {
  refusal: string;
  /**
   * Always `refusal`.
   */
  type: 'refusal';
};

/**
 * File citation
 *
 * A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "file_search" tool to search files.
 */
export type MessageContentTextAnnotationsFileCitationObject = {
  end_index: number;
  file_citation: {
    /**
     * The ID of the specific File the citation is from.
     */
    file_id: string;
  };
  start_index: number;
  /**
   * The text in the message content that needs to be replaced.
   */
  text: string;
  /**
   * Always `file_citation`.
   */
  type: 'file_citation';
};

/**
 * File path
 *
 * A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
 */
export type MessageContentTextAnnotationsFilePathObject = {
  end_index: number;
  file_path: {
    /**
     * The ID of the file that was generated.
     */
    file_id: string;
  };
  start_index: number;
  /**
   * The text in the message content that needs to be replaced.
   */
  text: string;
  /**
   * Always `file_path`.
   */
  type: 'file_path';
};

/**
 * Text
 *
 * The text content that is part of a message.
 */
export type MessageContentTextObject = {
  text: {
    annotations: Array<TextAnnotation>;
    /**
     * The data that makes up the text.
     */
    value: string;
  };
  /**
   * Always `text`.
   */
  type: 'text';
};

/**
 * Image file
 *
 * References an image [File](https://platform.openai.com/docs/api-reference/files) in the content of a message.
 */
export type MessageDeltaContentImageFileObject = {
  image_file?: {
    /**
     * Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
     */
    detail?: 'auto' | 'low' | 'high';
    /**
     * The [File](https://platform.openai.com/docs/api-reference/files) ID of the image in the message content. Set `purpose="vision"` when uploading the File if you need to later display the file content.
     */
    file_id?: string;
  };
  /**
   * The index of the content part in the message.
   */
  index: number;
  /**
   * Always `image_file`.
   */
  type: 'image_file';
};

/**
 * Image URL
 *
 * References an image URL in the content of a message.
 */
export type MessageDeltaContentImageUrlObject = {
  image_url?: {
    /**
     * Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`.
     */
    detail?: 'auto' | 'low' | 'high';
    /**
     * The URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.
     */
    url?: string;
  };
  /**
   * The index of the content part in the message.
   */
  index: number;
  /**
   * Always `image_url`.
   */
  type: 'image_url';
};

/**
 * Refusal
 *
 * The refusal content that is part of a message.
 */
export type MessageDeltaContentRefusalObject = {
  /**
   * The index of the refusal part in the message.
   */
  index: number;
  refusal?: string;
  /**
   * Always `refusal`.
   */
  type: 'refusal';
};

/**
 * File citation
 *
 * A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "file_search" tool to search files.
 */
export type MessageDeltaContentTextAnnotationsFileCitationObject = {
  end_index?: number;
  file_citation?: {
    /**
     * The ID of the specific File the citation is from.
     */
    file_id?: string;
    /**
     * The specific quote in the file.
     */
    quote?: string;
  };
  /**
   * The index of the annotation in the text content part.
   */
  index: number;
  start_index?: number;
  /**
   * The text in the message content that needs to be replaced.
   */
  text?: string;
  /**
   * Always `file_citation`.
   */
  type: 'file_citation';
};

/**
 * File path
 *
 * A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
 */
export type MessageDeltaContentTextAnnotationsFilePathObject = {
  end_index?: number;
  file_path?: {
    /**
     * The ID of the file that was generated.
     */
    file_id?: string;
  };
  /**
   * The index of the annotation in the text content part.
   */
  index: number;
  start_index?: number;
  /**
   * The text in the message content that needs to be replaced.
   */
  text?: string;
  /**
   * Always `file_path`.
   */
  type: 'file_path';
};

/**
 * Text
 *
 * The text content that is part of a message.
 */
export type MessageDeltaContentTextObject = {
  /**
   * The index of the content part in the message.
   */
  index: number;
  text?: {
    annotations?: Array<TextAnnotationDelta>;
    /**
     * The data that makes up the text.
     */
    value?: string;
  };
  /**
   * Always `text`.
   */
  type: 'text';
};

/**
 * Message delta object
 *
 * Represents a message delta i.e. any changed fields on a message during streaming.
 *
 */
export type MessageDeltaObject = {
  /**
   * The delta containing the fields that have changed on the Message.
   */
  delta: {
    /**
     * The content of the message in array of text and/or images.
     */
    content?: Array<MessageContentDelta>;
    /**
     * The entity that produced the message. One of `user` or `assistant`.
     */
    role?: 'user' | 'assistant';
  };
  /**
   * The identifier of the message, which can be referenced in API endpoints.
   */
  id: string;
  /**
   * The object type, which is always `thread.message.delta`.
   */
  object: 'thread.message.delta';
};

/**
 * The message object
 *
 * Represents a message within a [thread](https://platform.openai.com/docs/api-reference/threads).
 */
export type MessageObject = {
  /**
   * If applicable, the ID of the [assistant](https://platform.openai.com/docs/api-reference/assistants) that authored this message.
   */
  assistant_id: string;
  /**
   * A list of files attached to the message, and the tools they were added to.
   */
  attachments: Array<{
    /**
     * The ID of the file to attach to the message.
     */
    file_id?: string;
    /**
     * The tools to add this file to.
     */
    tools?: Array<AssistantToolsCode | AssistantToolsFileSearchTypeOnly>;
  }>;
  /**
   * The Unix timestamp (in seconds) for when the message was completed.
   */
  completed_at: number;
  /**
   * The content of the message in array of text and/or images.
   */
  content: Array<MessageContent>;
  /**
   * The Unix timestamp (in seconds) for when the message was created.
   */
  created_at: number;
  /**
   * The identifier, which can be referenced in API endpoints.
   */
  id: string;
  /**
   * The Unix timestamp (in seconds) for when the message was marked as incomplete.
   */
  incomplete_at: number;
  /**
   * On an incomplete message, details about why the message is incomplete.
   */
  incomplete_details: {
    /**
     * The reason the message is incomplete.
     */
    reason:
      | 'content_filter'
      | 'max_tokens'
      | 'run_cancelled'
      | 'run_expired'
      | 'run_failed';
  };
  metadata: Metadata;
  /**
   * The object type, which is always `thread.message`.
   */
  object: 'thread.message';
  /**
   * The entity that produced the message. One of `user` or `assistant`.
   */
  role: 'user' | 'assistant';
  /**
   * The ID of the [run](https://platform.openai.com/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.
   */
  run_id: string;
  /**
   * The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
   */
  status: 'in_progress' | 'incomplete' | 'completed';
  /**
   * The [thread](https://platform.openai.com/docs/api-reference/threads) ID that this message belongs to.
   */
  thread_id: string;
};

/**
 * Text
 *
 * The text content that is part of a message.
 */
export type MessageRequestContentTextObject = {
  /**
   * Text content to be sent to the model
   */
  text: string;
  /**
   * Always `text`.
   */
  type: 'text';
};

export type MessageStreamEvent =
  | {
      data: MessageObject;
      event: 'thread.message.created';
    }
  | {
      data: MessageObject;
      event: 'thread.message.in_progress';
    }
  | {
      data: MessageDeltaObject;
      event: 'thread.message.delta';
    }
  | {
      data: MessageObject;
      event: 'thread.message.completed';
    }
  | {
      data: MessageObject;
      event: 'thread.message.incomplete';
    };

/**
 * Set of 16 key-value pairs that can be attached to an object. This can be
 * useful for storing additional information about the object in a structured
 * format, and querying for objects via API or the dashboard.
 *
 * Keys are strings with a maximum length of 64 characters. Values are strings
 * with a maximum length of 512 characters.
 *
 */
export type Metadata = {
  [key: string]: string;
};

/**
 * Model
 *
 * Describes an OpenAI model offering that can be used with the API.
 */
export type Model = {
  /**
   * The Unix timestamp (in seconds) when the model was created.
   */
  created: number;
  /**
   * The model identifier, which can be referenced in the API endpoints.
   */
  id: string;
  /**
   * The object type, which is always "model".
   */
  object: 'model';
  /**
   * The organization that owns the model.
   */
  owned_by: string;
};

export type ModelIds = ModelIdsShared | ModelIdsResponses;

export type ModelIdsResponses =
  | ModelIdsShared
  | 'o1-pro'
  | 'o1-pro-2025-03-19'
  | 'o3-pro'
  | 'o3-pro-2025-06-10'
  | 'o3-deep-research'
  | 'o3-deep-research-2025-06-26'
  | 'o4-mini-deep-research'
  | 'o4-mini-deep-research-2025-06-26'
  | 'computer-use-preview'
  | 'computer-use-preview-2025-03-11';

export type ModelIdsShared = string | ChatModel;

export type ModelResponseProperties = {
  metadata?: Metadata;
  /**
   * Used by OpenAI to cache responses for similar requests to optimize your cache hit rates. Replaces the `user` field. [Learn more](https://platform.openai.com/docs/guides/prompt-caching).
   *
   */
  prompt_cache_key?: string;
  /**
   * A stable identifier used to help detect users of your application that may be violating OpenAI's usage policies.
   * The IDs should be a string that uniquely identifies each user. We recommend hashing their username or email address, in order to avoid sending us any identifying information. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#safety-identifiers).
   *
   */
  safety_identifier?: string;
  service_tier?: ServiceTier;
  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
   * We generally recommend altering this or `top_p` but not both.
   *
   */
  temperature?: number;
  /**
   * An integer between 0 and 20 specifying the number of most likely tokens to
   * return at each token position, each with an associated log probability.
   *
   */
  top_logprobs?: number;
  /**
   * An alternative to sampling with temperature, called nucleus sampling,
   * where the model considers the results of the tokens with top_p probability
   * mass. So 0.1 means only the tokens comprising the top 10% probability mass
   * are considered.
   *
   * We generally recommend altering this or `temperature` but not both.
   *
   */
  top_p?: number;
  /**
   * This field is being replaced by `safety_identifier` and `prompt_cache_key`. Use `prompt_cache_key` instead to maintain caching optimizations.
   * A stable identifier for your end-users.
   * Used to boost cache hit rates by better bucketing similar requests and  to help OpenAI detect and prevent abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#safety-identifiers).
   *
   *
   * @deprecated
   */
  user?: string;
};

export type ModifyAssistantRequest = {
  /**
   * The description of the assistant. The maximum length is 512 characters.
   *
   */
  description?: string;
  /**
   * The system instructions that the assistant uses. The maximum length is 256,000 characters.
   *
   */
  instructions?: string;
  metadata?: Metadata;
  /**
   * ID of the model to use. You can use the [List models](https://platform.openai.com/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](https://platform.openai.com/docs/models) for descriptions of them.
   *
   */
  model?: string | AssistantSupportedModels;
  /**
   * The name of the assistant. The maximum length is 256 characters.
   *
   */
  name?: string;
  reasoning_effort?: ReasoningEffort;
  response_format?: AssistantsApiResponseFormatOption;
  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
   *
   */
  temperature?: number;
  /**
   * A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
   *
   */
  tool_resources?: {
    code_interpreter?: {
      /**
       * Overrides the list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
       *
       */
      file_ids?: Array<string>;
    };
    file_search?: {
      /**
       * Overrides the [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
       *
       */
      vector_store_ids?: Array<string>;
    };
  };
  /**
   * A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
   *
   */
  tools?: Array<AssistantTool>;
  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
   *
   * We generally recommend altering this or temperature but not both.
   *
   */
  top_p?: number;
};

export type ModifyCertificateRequest = {
  /**
   * The updated name for the certificate
   */
  name: string;
};

export type ModifyMessageRequest = {
  metadata?: Metadata;
};

export type ModifyRunRequest = {
  metadata?: Metadata;
};

export type ModifyThreadRequest = {
  metadata?: Metadata;
  /**
   * A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
   *
   */
  tool_resources?: {
    code_interpreter?: {
      /**
       * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
       *
       */
      file_ids?: Array<string>;
    };
    file_search?: {
      /**
       * The [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.
       *
       */
      vector_store_ids?: Array<string>;
    };
  };
};

/**
 * Move
 *
 * A mouse move action.
 *
 */
export type Move = {
  /**
   * Specifies the event type. For a move action, this property is
   * always set to `move`.
   *
   */
  type: 'move';
  /**
   * The x-coordinate to move to.
   *
   */
  x: number;
  /**
   * The y-coordinate to move to.
   *
   */
  y: number;
};

/**
 * OpenAIFile
 *
 * The `File` object represents a document that has been uploaded to OpenAI.
 */
export type OpenAiFile = {
  /**
   * The size of the file, in bytes.
   */
  bytes: number;
  /**
   * The Unix timestamp (in seconds) for when the file was created.
   */
  created_at: number;
  /**
   * The Unix timestamp (in seconds) for when the file will expire.
   */
  expires_at?: number;
  /**
   * The name of the file.
   */
  filename: string;
  /**
   * The file identifier, which can be referenced in the API endpoints.
   */
  id: string;
  /**
   * The object type, which is always `file`.
   */
  object: 'file';
  /**
   * The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results`, `vision`, and `user_data`.
   */
  purpose:
    | 'assistants'
    | 'assistants_output'
    | 'batch'
    | 'batch_output'
    | 'fine-tune'
    | 'fine-tune-results'
    | 'vision'
    | 'user_data';
  /**
   * Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
   *
   * @deprecated
   */
  status: 'uploaded' | 'processed' | 'error';
  /**
   * Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`.
   *
   * @deprecated
   */
  status_details?: string;
};

/**
 * Other Chunking Strategy
 *
 * This is returned when the chunking strategy is unknown. Typically, this is because the file was indexed before the `chunking_strategy` concept was introduced in the API.
 */
export type OtherChunkingStrategyResponseParam = {
  /**
   * Always `other`.
   */
  type: 'other';
};

/**
 * Output audio
 *
 * An audio output from the model.
 *
 */
export type OutputAudio = {
  /**
   * Base64-encoded audio data from the model.
   *
   */
  data: string;
  /**
   * The transcript of the audio data from the model.
   *
   */
  transcript: string;
  /**
   * The type of the output audio. Always `output_audio`.
   *
   */
  type: 'output_audio';
};

export type OutputContent =
  | ({
      type?: 'OutputTextContent';
    } & OutputTextContent)
  | ({
      type?: 'RefusalContent';
    } & RefusalContent);

export type OutputItem =
  | ({
      type?: 'OutputMessage';
    } & OutputMessage)
  | ({
      type?: 'FileSearchToolCall';
    } & FileSearchToolCall)
  | ({
      type?: 'FunctionToolCall';
    } & FunctionToolCall)
  | ({
      type?: 'WebSearchToolCall';
    } & WebSearchToolCall)
  | ({
      type?: 'ComputerToolCall';
    } & ComputerToolCall)
  | ({
      type?: 'ReasoningItem';
    } & ReasoningItem)
  | ({
      type?: 'ImageGenToolCall';
    } & ImageGenToolCall)
  | ({
      type?: 'CodeInterpreterToolCall';
    } & CodeInterpreterToolCall)
  | ({
      type?: 'LocalShellToolCall';
    } & LocalShellToolCall)
  | ({
      type?: 'MCPToolCall';
    } & McpToolCall)
  | ({
      type?: 'MCPListTools';
    } & McpListTools)
  | ({
      type?: 'MCPApprovalRequest';
    } & McpApprovalRequest)
  | ({
      type?: 'CustomToolCall';
    } & CustomToolCall);

/**
 * Output message
 *
 * An output message from the model.
 *
 */
export type OutputMessage = {
  /**
   * The content of the output message.
   *
   */
  content: Array<OutputContent>;
  /**
   * The unique ID of the output message.
   *
   */
  id: string;
  /**
   * The role of the output message. Always `assistant`.
   *
   */
  role: 'assistant';
  /**
   * The status of the message input. One of `in_progress`, `completed`, or
   * `incomplete`. Populated when input items are returned via API.
   *
   */
  status: 'in_progress' | 'completed' | 'incomplete';
  /**
   * The type of the output message. Always `message`.
   *
   */
  type: 'message';
};

/**
 * Whether to enable [parallel function calling](https://platform.openai.com/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.
 */
export type ParallelToolCalls = boolean;

/**
 * The number of partial images to generate. This parameter is used for
 * streaming responses that return partial images. Value must be between 0 and 3.
 * When set to 0, the response will be a single image sent in one streaming event.
 *
 * Note that the final image may be sent before the full number of partial images
 * are generated if the full image is generated more quickly.
 *
 */
export type PartialImages = number;

/**
 * Static Content
 *
 * Static predicted output content, such as the content of a text file that is
 * being regenerated.
 *
 */
export type PredictionContent = {
  /**
   * The content that should be matched when generating a model response.
   * If generated tokens would match this content, the entire model response
   * can be returned much more quickly.
   *
   */
  content: string | Array<ChatCompletionRequestMessageContentPartText>;
  /**
   * The type of the predicted content you want to provide. This type is
   * currently always `content`.
   *
   */
  type: 'content';
};

/**
 * Represents an individual project.
 */
export type Project = {
  /**
   * The Unix timestamp (in seconds) of when the project was archived or `null`.
   */
  archived_at?: number;
  /**
   * The Unix timestamp (in seconds) of when the project was created.
   */
  created_at: number;
  /**
   * The identifier, which can be referenced in API endpoints
   */
  id: string;
  /**
   * The name of the project. This appears in reporting.
   */
  name: string;
  /**
   * The object type, which is always `organization.project`
   */
  object: 'organization.project';
  /**
   * `active` or `archived`
   */
  status: 'active' | 'archived';
};

/**
 * Represents an individual API key in a project.
 */
export type ProjectApiKey = {
  /**
   * The Unix timestamp (in seconds) of when the API key was created
   */
  created_at: number;
  /**
   * The identifier, which can be referenced in API endpoints
   */
  id: string;
  /**
   * The Unix timestamp (in seconds) of when the API key was last used.
   */
  last_used_at: number;
  /**
   * The name of the API key
   */
  name: string;
  /**
   * The object type, which is always `organization.project.api_key`
   */
  object: 'organization.project.api_key';
  owner: {
    service_account?: ProjectServiceAccount;
    /**
     * `user` or `service_account`
     */
    type?: 'user' | 'service_account';
    user?: ProjectUser;
  };
  /**
   * The redacted value of the API key
   */
  redacted_value: string;
};

export type ProjectApiKeyDeleteResponse = {
  deleted: boolean;
  id: string;
  object: 'organization.project.api_key.deleted';
};

export type ProjectApiKeyListResponse = {
  data: Array<ProjectApiKey>;
  first_id: string;
  has_more: boolean;
  last_id: string;
  object: 'list';
};

export type ProjectCreateRequest = {
  /**
   * The friendly name of the project, this name appears in reports.
   */
  name: string;
};

export type ProjectListResponse = {
  data: Array<Project>;
  first_id: string;
  has_more: boolean;
  last_id: string;
  object: 'list';
};

/**
 * Represents a project rate limit config.
 */
export type ProjectRateLimit = {
  /**
   * The maximum batch input tokens per day. Only present for relevant models.
   */
  batch_1_day_max_input_tokens?: number;
  /**
   * The identifier, which can be referenced in API endpoints.
   */
  id: string;
  /**
   * The maximum audio megabytes per minute. Only present for relevant models.
   */
  max_audio_megabytes_per_1_minute?: number;
  /**
   * The maximum images per minute. Only present for relevant models.
   */
  max_images_per_1_minute?: number;
  /**
   * The maximum requests per day. Only present for relevant models.
   */
  max_requests_per_1_day?: number;
  /**
   * The maximum requests per minute.
   */
  max_requests_per_1_minute: number;
  /**
   * The maximum tokens per minute.
   */
  max_tokens_per_1_minute: number;
  /**
   * The model this rate limit applies to.
   */
  model: string;
  /**
   * The object type, which is always `project.rate_limit`
   */
  object: 'project.rate_limit';
};

export type ProjectRateLimitListResponse = {
  data: Array<ProjectRateLimit>;
  first_id: string;
  has_more: boolean;
  last_id: string;
  object: 'list';
};

export type ProjectRateLimitUpdateRequest = {
  /**
   * The maximum batch input tokens per day. Only relevant for certain models.
   */
  batch_1_day_max_input_tokens?: number;
  /**
   * The maximum audio megabytes per minute. Only relevant for certain models.
   */
  max_audio_megabytes_per_1_minute?: number;
  /**
   * The maximum images per minute. Only relevant for certain models.
   */
  max_images_per_1_minute?: number;
  /**
   * The maximum requests per day. Only relevant for certain models.
   */
  max_requests_per_1_day?: number;
  /**
   * The maximum requests per minute.
   */
  max_requests_per_1_minute?: number;
  /**
   * The maximum tokens per minute.
   */
  max_tokens_per_1_minute?: number;
};

/**
 * Represents an individual service account in a project.
 */
export type ProjectServiceAccount = {
  /**
   * The Unix timestamp (in seconds) of when the service account was created
   */
  created_at: number;
  /**
   * The identifier, which can be referenced in API endpoints
   */
  id: string;
  /**
   * The name of the service account
   */
  name: string;
  /**
   * The object type, which is always `organization.project.service_account`
   */
  object: 'organization.project.service_account';
  /**
   * `owner` or `member`
   */
  role: 'owner' | 'member';
};

export type ProjectServiceAccountApiKey = {
  created_at: number;
  id: string;
  name: string;
  /**
   * The object type, which is always `organization.project.service_account.api_key`
   */
  object: 'organization.project.service_account.api_key';
  value: string;
};

export type ProjectServiceAccountCreateRequest = {
  /**
   * The name of the service account being created.
   */
  name: string;
};

export type ProjectServiceAccountCreateResponse = {
  api_key: ProjectServiceAccountApiKey;
  created_at: number;
  id: string;
  name: string;
  object: 'organization.project.service_account';
  /**
   * Service accounts can only have one role of type `member`
   */
  role: 'member';
};

export type ProjectServiceAccountDeleteResponse = {
  deleted: boolean;
  id: string;
  object: 'organization.project.service_account.deleted';
};

export type ProjectServiceAccountListResponse = {
  data: Array<ProjectServiceAccount>;
  first_id: string;
  has_more: boolean;
  last_id: string;
  object: 'list';
};

export type ProjectUpdateRequest = {
  /**
   * The updated name of the project, this name appears in reports.
   */
  name: string;
};

/**
 * Represents an individual user in a project.
 */
export type ProjectUser = {
  /**
   * The Unix timestamp (in seconds) of when the project was added.
   */
  added_at: number;
  /**
   * The email address of the user
   */
  email: string;
  /**
   * The identifier, which can be referenced in API endpoints
   */
  id: string;
  /**
   * The name of the user
   */
  name: string;
  /**
   * The object type, which is always `organization.project.user`
   */
  object: 'organization.project.user';
  /**
   * `owner` or `member`
   */
  role: 'owner' | 'member';
};

export type ProjectUserCreateRequest = {
  /**
   * `owner` or `member`
   */
  role: 'owner' | 'member';
  /**
   * The ID of the user.
   */
  user_id: string;
};

export type ProjectUserDeleteResponse = {
  deleted: boolean;
  id: string;
  object: 'organization.project.user.deleted';
};

export type ProjectUserListResponse = {
  data: Array<ProjectUser>;
  first_id: string;
  has_more: boolean;
  last_id: string;
  object: string;
};

export type ProjectUserUpdateRequest = {
  /**
   * `owner` or `member`
   */
  role: 'owner' | 'member';
};

/**
 * Reference to a prompt template and its variables.
 * [Learn more](https://platform.openai.com/docs/guides/text?api-mode=responses#reusable-prompts).
 *
 */
export type Prompt = {
  /**
   * The unique identifier of the prompt template to use.
   */
  id: string;
  variables?: ResponsePromptVariables;
  /**
   * Optional version of the prompt template.
   */
  version?: string;
};

/**
 * A realtime client event.
 *
 */
export type RealtimeClientEvent =
  | ({
      type?: 'RealtimeClientEventConversationItemCreate';
    } & RealtimeClientEventConversationItemCreate)
  | ({
      type?: 'RealtimeClientEventConversationItemDelete';
    } & RealtimeClientEventConversationItemDelete)
  | ({
      type?: 'RealtimeClientEventConversationItemRetrieve';
    } & RealtimeClientEventConversationItemRetrieve)
  | ({
      type?: 'RealtimeClientEventConversationItemTruncate';
    } & RealtimeClientEventConversationItemTruncate)
  | ({
      type?: 'RealtimeClientEventInputAudioBufferAppend';
    } & RealtimeClientEventInputAudioBufferAppend)
  | ({
      type?: 'RealtimeClientEventInputAudioBufferClear';
    } & RealtimeClientEventInputAudioBufferClear)
  | ({
      type?: 'RealtimeClientEventOutputAudioBufferClear';
    } & RealtimeClientEventOutputAudioBufferClear)
  | ({
      type?: 'RealtimeClientEventInputAudioBufferCommit';
    } & RealtimeClientEventInputAudioBufferCommit)
  | ({
      type?: 'RealtimeClientEventResponseCancel';
    } & RealtimeClientEventResponseCancel)
  | ({
      type?: 'RealtimeClientEventResponseCreate';
    } & RealtimeClientEventResponseCreate)
  | ({
      type?: 'RealtimeClientEventSessionUpdate';
    } & RealtimeClientEventSessionUpdate)
  | ({
      type?: 'RealtimeClientEventTranscriptionSessionUpdate';
    } & RealtimeClientEventTranscriptionSessionUpdate);

/**
 * Add a new Item to the Conversation's context, including messages, function
 * calls, and function call responses. This event can be used both to populate a
 * "history" of the conversation and to add new items mid-stream, but has the
 * current limitation that it cannot populate assistant audio messages.
 *
 * If successful, the server will respond with a `conversation.item.created`
 * event, otherwise an `error` event will be sent.
 *
 */
export type RealtimeClientEventConversationItemCreate = {
  /**
   * Optional client-generated ID used to identify this event.
   */
  event_id?: string;
  item: RealtimeConversationItem;
  /**
   * The ID of the preceding item after which the new item will be inserted.
   * If not set, the new item will be appended to the end of the conversation.
   * If set to `root`, the new item will be added to the beginning of the conversation.
   * If set to an existing ID, it allows an item to be inserted mid-conversation. If the
   * ID cannot be found, an error will be returned and the item will not be added.
   *
   */
  previous_item_id?: string;
  /**
   * The event type, must be `conversation.item.create`.
   */
  type: 'conversation.item.create';
};

/**
 * Send this event when you want to remove any item from the conversation
 * history. The server will respond with a `conversation.item.deleted` event,
 * unless the item does not exist in the conversation history, in which case the
 * server will respond with an error.
 *
 */
export type RealtimeClientEventConversationItemDelete = {
  /**
   * Optional client-generated ID used to identify this event.
   */
  event_id?: string;
  /**
   * The ID of the item to delete.
   */
  item_id: string;
  /**
   * The event type, must be `conversation.item.delete`.
   */
  type: 'conversation.item.delete';
};

/**
 * Send this event when you want to retrieve the server's representation of a specific item in the conversation history. This is useful, for example, to inspect user audio after noise cancellation and VAD.
 * The server will respond with a `conversation.item.retrieved` event,
 * unless the item does not exist in the conversation history, in which case the
 * server will respond with an error.
 *
 */
export type RealtimeClientEventConversationItemRetrieve = {
  /**
   * Optional client-generated ID used to identify this event.
   */
  event_id?: string;
  /**
   * The ID of the item to retrieve.
   */
  item_id: string;
  /**
   * The event type, must be `conversation.item.retrieve`.
   */
  type: 'conversation.item.retrieve';
};

/**
 * Send this event to truncate a previous assistant message’s audio. The server
 * will produce audio faster than realtime, so this event is useful when the user
 * interrupts to truncate audio that has already been sent to the client but not
 * yet played. This will synchronize the server's understanding of the audio with
 * the client's playback.
 *
 * Truncating audio will delete the server-side text transcript to ensure there
 * is not text in the context that hasn't been heard by the user.
 *
 * If successful, the server will respond with a `conversation.item.truncated`
 * event.
 *
 */
export type RealtimeClientEventConversationItemTruncate = {
  /**
   * Inclusive duration up to which audio is truncated, in milliseconds. If
   * the audio_end_ms is greater than the actual audio duration, the server
   * will respond with an error.
   *
   */
  audio_end_ms: number;
  /**
   * The index of the content part to truncate. Set this to 0.
   */
  content_index: number;
  /**
   * Optional client-generated ID used to identify this event.
   */
  event_id?: string;
  /**
   * The ID of the assistant message item to truncate. Only assistant message
   * items can be truncated.
   *
   */
  item_id: string;
  /**
   * The event type, must be `conversation.item.truncate`.
   */
  type: 'conversation.item.truncate';
};

/**
 * Send this event to append audio bytes to the input audio buffer. The audio
 * buffer is temporary storage you can write to and later commit. In Server VAD
 * mode, the audio buffer is used to detect speech and the server will decide
 * when to commit. When Server VAD is disabled, you must commit the audio buffer
 * manually.
 *
 * The client may choose how much audio to place in each event up to a maximum
 * of 15 MiB, for example streaming smaller chunks from the client may allow the
 * VAD to be more responsive. Unlike made other client events, the server will
 * not send a confirmation response to this event.
 *
 */
export type RealtimeClientEventInputAudioBufferAppend = {
  /**
   * Base64-encoded audio bytes. This must be in the format specified by the
   * `input_audio_format` field in the session configuration.
   *
   */
  audio: string;
  /**
   * Optional client-generated ID used to identify this event.
   */
  event_id?: string;
  /**
   * The event type, must be `input_audio_buffer.append`.
   */
  type: 'input_audio_buffer.append';
};

/**
 * Send this event to clear the audio bytes in the buffer. The server will
 * respond with an `input_audio_buffer.cleared` event.
 *
 */
export type RealtimeClientEventInputAudioBufferClear = {
  /**
   * Optional client-generated ID used to identify this event.
   */
  event_id?: string;
  /**
   * The event type, must be `input_audio_buffer.clear`.
   */
  type: 'input_audio_buffer.clear';
};

/**
 * Send this event to commit the user input audio buffer, which will create a
 * new user message item in the conversation. This event will produce an error
 * if the input audio buffer is empty. When in Server VAD mode, the client does
 * not need to send this event, the server will commit the audio buffer
 * automatically.
 *
 * Committing the input audio buffer will trigger input audio transcription
 * (if enabled in session configuration), but it will not create a response
 * from the model. The server will respond with an `input_audio_buffer.committed`
 * event.
 *
 */
export type RealtimeClientEventInputAudioBufferCommit = {
  /**
   * Optional client-generated ID used to identify this event.
   */
  event_id?: string;
  /**
   * The event type, must be `input_audio_buffer.commit`.
   */
  type: 'input_audio_buffer.commit';
};

/**
 * **WebRTC Only:** Emit to cut off the current audio response. This will trigger the server to
 * stop generating audio and emit a `output_audio_buffer.cleared` event. This
 * event should be preceded by a `response.cancel` client event to stop the
 * generation of the current response.
 * [Learn more](https://platform.openai.com/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).
 *
 */
export type RealtimeClientEventOutputAudioBufferClear = {
  /**
   * The unique ID of the client event used for error handling.
   */
  event_id?: string;
  /**
   * The event type, must be `output_audio_buffer.clear`.
   */
  type: 'output_audio_buffer.clear';
};

/**
 * Send this event to cancel an in-progress response. The server will respond
 * with a `response.done` event with a status of `response.status=cancelled`. If
 * there is no response to cancel, the server will respond with an error.
 *
 */
export type RealtimeClientEventResponseCancel = {
  /**
   * Optional client-generated ID used to identify this event.
   */
  event_id?: string;
  /**
   * A specific response ID to cancel - if not provided, will cancel an
   * in-progress response in the default conversation.
   *
   */
  response_id?: string;
  /**
   * The event type, must be `response.cancel`.
   */
  type: 'response.cancel';
};

/**
 * This event instructs the server to create a Response, which means triggering
 * model inference. When in Server VAD mode, the server will create Responses
 * automatically.
 *
 * A Response will include at least one Item, and may have two, in which case
 * the second will be a function call. These Items will be appended to the
 * conversation history.
 *
 * The server will respond with a `response.created` event, events for Items
 * and content created, and finally a `response.done` event to indicate the
 * Response is complete.
 *
 * The `response.create` event includes inference configuration like
 * `instructions`, and `temperature`. These fields will override the Session's
 * configuration for this Response only.
 *
 */
export type RealtimeClientEventResponseCreate = {
  /**
   * Optional client-generated ID used to identify this event.
   */
  event_id?: string;
  response?: RealtimeResponseCreateParams;
  /**
   * The event type, must be `response.create`.
   */
  type: 'response.create';
};

/**
 * Send this event to update the session’s default configuration.
 * The client may send this event at any time to update any field,
 * except for `voice`. However, note that once a session has been
 * initialized with a particular `model`, it can’t be changed to
 * another model using `session.update`.
 *
 * When the server receives a `session.update`, it will respond
 * with a `session.updated` event showing the full, effective configuration.
 * Only the fields that are present are updated. To clear a field like
 * `instructions`, pass an empty string.
 *
 */
export type RealtimeClientEventSessionUpdate = {
  /**
   * Optional client-generated ID used to identify this event.
   */
  event_id?: string;
  session: RealtimeSessionCreateRequest;
  /**
   * The event type, must be `session.update`.
   */
  type: 'session.update';
};

/**
 * Send this event to update a transcription session.
 *
 */
export type RealtimeClientEventTranscriptionSessionUpdate = {
  /**
   * Optional client-generated ID used to identify this event.
   */
  event_id?: string;
  session: RealtimeTranscriptionSessionCreateRequest;
  /**
   * The event type, must be `transcription_session.update`.
   */
  type: 'transcription_session.update';
};

/**
 * The item to add to the conversation.
 */
export type RealtimeConversationItem = {
  /**
   * The arguments of the function call (for `function_call` items).
   *
   */
  arguments?: string;
  /**
   * The ID of the function call (for `function_call` and
   * `function_call_output` items). If passed on a `function_call_output`
   * item, the server will check that a `function_call` item with the same
   * ID exists in the conversation history.
   *
   */
  call_id?: string;
  /**
   * The content of the message, applicable for `message` items.
   * - Message items of role `system` support only `input_text` content
   * - Message items of role `user` support `input_text` and `input_audio`
   * content
   * - Message items of role `assistant` support `text` content.
   *
   */
  content?: Array<RealtimeConversationItemContent>;
  /**
   * The unique ID of the item, this can be generated by the client to help
   * manage server-side context, but is not required because the server will
   * generate one if not provided.
   *
   */
  id?: string;
  /**
   * The name of the function being called (for `function_call` items).
   *
   */
  name?: string;
  /**
   * Identifier for the API object being returned - always `realtime.item`.
   *
   */
  object?: 'realtime.item';
  /**
   * The output of the function call (for `function_call_output` items).
   *
   */
  output?: string;
  /**
   * The role of the message sender (`user`, `assistant`, `system`), only
   * applicable for `message` items.
   *
   */
  role?: 'user' | 'assistant' | 'system';
  /**
   * The status of the item (`completed`, `incomplete`, `in_progress`). These have no effect
   * on the conversation, but are accepted for consistency with the
   * `conversation.item.created` event.
   *
   */
  status?: 'completed' | 'incomplete' | 'in_progress';
  /**
   * The type of the item (`message`, `function_call`, `function_call_output`).
   *
   */
  type?: 'message' | 'function_call' | 'function_call_output';
};

/**
 * The item to add to the conversation.
 */
export type RealtimeConversationItemWithReference = {
  /**
   * The arguments of the function call (for `function_call` items).
   *
   */
  arguments?: string;
  /**
   * The ID of the function call (for `function_call` and
   * `function_call_output` items). If passed on a `function_call_output`
   * item, the server will check that a `function_call` item with the same
   * ID exists in the conversation history.
   *
   */
  call_id?: string;
  /**
   * The content of the message, applicable for `message` items.
   * - Message items of role `system` support only `input_text` content
   * - Message items of role `user` support `input_text` and `input_audio`
   * content
   * - Message items of role `assistant` support `text` content.
   *
   */
  content?: Array<{
    /**
     * Base64-encoded audio bytes, used for `input_audio` content type.
     *
     */
    audio?: string;
    /**
     * ID of a previous conversation item to reference (for `item_reference`
     * content types in `response.create` events). These can reference both
     * client and server created items.
     *
     */
    id?: string;
    /**
     * The text content, used for `input_text` and `text` content types.
     *
     */
    text?: string;
    /**
     * The transcript of the audio, used for `input_audio` content type.
     *
     */
    transcript?: string;
    /**
     * The content type (`input_text`, `input_audio`, `item_reference`, `text`).
     *
     */
    type?: 'input_text' | 'input_audio' | 'item_reference' | 'text';
  }>;
  /**
   * For an item of type (`message` | `function_call` | `function_call_output`)
   * this field allows the client to assign the unique ID of the item. It is
   * not required because the server will generate one if not provided.
   *
   * For an item of type `item_reference`, this field is required and is a
   * reference to any item that has previously existed in the conversation.
   *
   */
  id?: string;
  /**
   * The name of the function being called (for `function_call` items).
   *
   */
  name?: string;
  /**
   * Identifier for the API object being returned - always `realtime.item`.
   *
   */
  object?: 'realtime.item';
  /**
   * The output of the function call (for `function_call_output` items).
   *
   */
  output?: string;
  /**
   * The role of the message sender (`user`, `assistant`, `system`), only
   * applicable for `message` items.
   *
   */
  role?: 'user' | 'assistant' | 'system';
  /**
   * The status of the item (`completed`, `incomplete`, `in_progress`). These have no effect
   * on the conversation, but are accepted for consistency with the
   * `conversation.item.created` event.
   *
   */
  status?: 'completed' | 'incomplete' | 'in_progress';
  /**
   * The type of the item (`message`, `function_call`, `function_call_output`, `item_reference`).
   *
   */
  type?:
    | 'message'
    | 'function_call'
    | 'function_call_output'
    | 'item_reference';
};

/**
 * The response resource.
 */
export type RealtimeResponse = {
  /**
   * Which conversation the response is added to, determined by the `conversation`
   * field in the `response.create` event. If `auto`, the response will be added to
   * the default conversation and the value of `conversation_id` will be an id like
   * `conv_1234`. If `none`, the response will not be added to any conversation and
   * the value of `conversation_id` will be `null`. If responses are being triggered
   * by server VAD, the response will be added to the default conversation, thus
   * the `conversation_id` will be an id like `conv_1234`.
   *
   */
  conversation_id?: string;
  /**
   * The unique ID of the response.
   */
  id?: string;
  /**
   * Maximum number of output tokens for a single assistant response,
   * inclusive of tool calls, that was used in this response.
   *
   */
  max_output_tokens?: number | 'inf';
  metadata?: Metadata;
  /**
   * The set of modalities the model used to respond. If there are multiple modalities,
   * the model will pick one, for example if `modalities` is `["text", "audio"]`, the model
   * could be responding in either text or audio.
   *
   */
  modalities?: Array<'text' | 'audio'>;
  /**
   * The object type, must be `realtime.response`.
   */
  object?: 'realtime.response';
  /**
   * The list of output items generated by the response.
   */
  output?: Array<RealtimeConversationItem>;
  /**
   * The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
   *
   */
  output_audio_format?: 'pcm16' | 'g711_ulaw' | 'g711_alaw';
  /**
   * The final status of the response (`completed`, `cancelled`, `failed`, or
   * `incomplete`, `in_progress`).
   *
   */
  status?: 'completed' | 'cancelled' | 'failed' | 'incomplete' | 'in_progress';
  /**
   * Additional details about the status.
   */
  status_details?: {
    /**
     * A description of the error that caused the response to fail,
     * populated when the `status` is `failed`.
     *
     */
    error?: {
      /**
       * Error code, if any.
       */
      code?: string;
      /**
       * The type of error.
       */
      type?: string;
    };
    /**
     * The reason the Response did not complete. For a `cancelled` Response,
     * one of `turn_detected` (the server VAD detected a new start of speech)
     * or `client_cancelled` (the client sent a cancel event). For an
     * `incomplete` Response, one of `max_output_tokens` or `content_filter`
     * (the server-side safety filter activated and cut off the response).
     *
     */
    reason?:
      | 'turn_detected'
      | 'client_cancelled'
      | 'max_output_tokens'
      | 'content_filter';
    /**
     * The type of error that caused the response to fail, corresponding
     * with the `status` field (`completed`, `cancelled`, `incomplete`,
     * `failed`).
     *
     */
    type?: 'completed' | 'cancelled' | 'incomplete' | 'failed';
  };
  /**
   * Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.
   *
   */
  temperature?: number;
  /**
   * Usage statistics for the Response, this will correspond to billing. A
   * Realtime API session will maintain a conversation context and append new
   * Items to the Conversation, thus output from previous turns (text and
   * audio tokens) will become the input for later turns.
   *
   */
  usage?: {
    /**
     * Details about the input tokens used in the Response.
     */
    input_token_details?: {
      /**
       * The number of audio tokens used in the Response.
       */
      audio_tokens?: number;
      /**
       * The number of cached tokens used in the Response.
       */
      cached_tokens?: number;
      /**
       * The number of text tokens used in the Response.
       */
      text_tokens?: number;
    };
    /**
     * The number of input tokens used in the Response, including text and
     * audio tokens.
     *
     */
    input_tokens?: number;
    /**
     * Details about the output tokens used in the Response.
     */
    output_token_details?: {
      /**
       * The number of audio tokens used in the Response.
       */
      audio_tokens?: number;
      /**
       * The number of text tokens used in the Response.
       */
      text_tokens?: number;
    };
    /**
     * The number of output tokens sent in the Response, including text and
     * audio tokens.
     *
     */
    output_tokens?: number;
    /**
     * The total number of tokens in the Response including input and output
     * text and audio tokens.
     *
     */
    total_tokens?: number;
  };
  /**
   * The voice the model used to respond.
   * Current voice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `sage`,
   * `shimmer`, and `verse`.
   *
   */
  voice?: VoiceIdsShared;
};

/**
 * Create a new Realtime response with these parameters
 */
export type RealtimeResponseCreateParams = {
  /**
   * Controls which conversation the response is added to. Currently supports
   * `auto` and `none`, with `auto` as the default value. The `auto` value
   * means that the contents of the response will be added to the default
   * conversation. Set this to `none` to create an out-of-band response which
   * will not add items to default conversation.
   *
   */
  conversation?: string | 'auto' | 'none';
  /**
   * Input items to include in the prompt for the model. Using this field
   * creates a new context for this Response instead of using the default
   * conversation. An empty array `[]` will clear the context for this Response.
   * Note that this can include references to items from the default conversation.
   *
   */
  input?: Array<RealtimeConversationItemWithReference>;
  /**
   * The default system instructions (i.e. system message) prepended to model
   * calls. This field allows the client to guide the model on desired
   * responses. The model can be instructed on response content and format,
   * (e.g. "be extremely succinct", "act friendly", "here are examples of good
   * responses") and on audio behavior (e.g. "talk quickly", "inject emotion
   * into your voice", "laugh frequently"). The instructions are not guaranteed
   * to be followed by the model, but they provide guidance to the model on the
   * desired behavior.
   *
   * Note that the server sets default instructions which will be used if this
   * field is not set and are visible in the `session.created` event at the
   * start of the session.
   *
   */
  instructions?: string;
  /**
   * Maximum number of output tokens for a single assistant response,
   * inclusive of tool calls. Provide an integer between 1 and 4096 to
   * limit output tokens, or `inf` for the maximum available tokens for a
   * given model. Defaults to `inf`.
   *
   */
  max_response_output_tokens?: number | 'inf';
  metadata?: Metadata;
  /**
   * The set of modalities the model can respond with. To disable audio,
   * set this to ["text"].
   *
   */
  modalities?: Array<'text' | 'audio'>;
  /**
   * The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
   *
   */
  output_audio_format?: 'pcm16' | 'g711_ulaw' | 'g711_alaw';
  /**
   * Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.
   *
   */
  temperature?: number;
  /**
   * How the model chooses tools. Options are `auto`, `none`, `required`, or
   * specify a function, like `{"type": "function", "function": {"name": "my_function"}}`.
   *
   */
  tool_choice?: string;
  /**
   * Tools (functions) available to the model.
   */
  tools?: Array<{
    /**
     * The description of the function, including guidance on when and how
     * to call it, and guidance about what to tell the user when calling
     * (if anything).
     *
     */
    description?: string;
    /**
     * The name of the function.
     */
    name?: string;
    /**
     * Parameters of the function in JSON Schema.
     */
    parameters?: {
      [key: string]: unknown;
    };
    /**
     * The type of the tool, i.e. `function`.
     */
    type?: 'function';
  }>;
  /**
   * The voice the model uses to respond. Voice cannot be changed during the
   * session once the model has responded with audio at least once. Current
   * voice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `sage`,
   * `shimmer`, and `verse`.
   *
   */
  voice?: VoiceIdsShared;
};

/**
 * A realtime server event.
 *
 */
export type RealtimeServerEvent =
  | ({
      type?: 'RealtimeServerEventConversationCreated';
    } & RealtimeServerEventConversationCreated)
  | ({
      type?: 'RealtimeServerEventConversationItemCreated';
    } & RealtimeServerEventConversationItemCreated)
  | ({
      type?: 'RealtimeServerEventConversationItemDeleted';
    } & RealtimeServerEventConversationItemDeleted)
  | ({
      type?: 'RealtimeServerEventConversationItemInputAudioTranscriptionCompleted';
    } & RealtimeServerEventConversationItemInputAudioTranscriptionCompleted)
  | ({
      type?: 'RealtimeServerEventConversationItemInputAudioTranscriptionDelta';
    } & RealtimeServerEventConversationItemInputAudioTranscriptionDelta)
  | ({
      type?: 'RealtimeServerEventConversationItemInputAudioTranscriptionFailed';
    } & RealtimeServerEventConversationItemInputAudioTranscriptionFailed)
  | ({
      type?: 'RealtimeServerEventConversationItemRetrieved';
    } & RealtimeServerEventConversationItemRetrieved)
  | ({
      type?: 'RealtimeServerEventConversationItemTruncated';
    } & RealtimeServerEventConversationItemTruncated)
  | ({
      type?: 'RealtimeServerEventError';
    } & RealtimeServerEventError)
  | ({
      type?: 'RealtimeServerEventInputAudioBufferCleared';
    } & RealtimeServerEventInputAudioBufferCleared)
  | ({
      type?: 'RealtimeServerEventInputAudioBufferCommitted';
    } & RealtimeServerEventInputAudioBufferCommitted)
  | ({
      type?: 'RealtimeServerEventInputAudioBufferSpeechStarted';
    } & RealtimeServerEventInputAudioBufferSpeechStarted)
  | ({
      type?: 'RealtimeServerEventInputAudioBufferSpeechStopped';
    } & RealtimeServerEventInputAudioBufferSpeechStopped)
  | ({
      type?: 'RealtimeServerEventRateLimitsUpdated';
    } & RealtimeServerEventRateLimitsUpdated)
  | ({
      type?: 'RealtimeServerEventResponseAudioDelta';
    } & RealtimeServerEventResponseAudioDelta)
  | ({
      type?: 'RealtimeServerEventResponseAudioDone';
    } & RealtimeServerEventResponseAudioDone)
  | ({
      type?: 'RealtimeServerEventResponseAudioTranscriptDelta';
    } & RealtimeServerEventResponseAudioTranscriptDelta)
  | ({
      type?: 'RealtimeServerEventResponseAudioTranscriptDone';
    } & RealtimeServerEventResponseAudioTranscriptDone)
  | ({
      type?: 'RealtimeServerEventResponseContentPartAdded';
    } & RealtimeServerEventResponseContentPartAdded)
  | ({
      type?: 'RealtimeServerEventResponseContentPartDone';
    } & RealtimeServerEventResponseContentPartDone)
  | ({
      type?: 'RealtimeServerEventResponseCreated';
    } & RealtimeServerEventResponseCreated)
  | ({
      type?: 'RealtimeServerEventResponseDone';
    } & RealtimeServerEventResponseDone)
  | ({
      type?: 'RealtimeServerEventResponseFunctionCallArgumentsDelta';
    } & RealtimeServerEventResponseFunctionCallArgumentsDelta)
  | ({
      type?: 'RealtimeServerEventResponseFunctionCallArgumentsDone';
    } & RealtimeServerEventResponseFunctionCallArgumentsDone)
  | ({
      type?: 'RealtimeServerEventResponseOutputItemAdded';
    } & RealtimeServerEventResponseOutputItemAdded)
  | ({
      type?: 'RealtimeServerEventResponseOutputItemDone';
    } & RealtimeServerEventResponseOutputItemDone)
  | ({
      type?: 'RealtimeServerEventResponseTextDelta';
    } & RealtimeServerEventResponseTextDelta)
  | ({
      type?: 'RealtimeServerEventResponseTextDone';
    } & RealtimeServerEventResponseTextDone)
  | ({
      type?: 'RealtimeServerEventSessionCreated';
    } & RealtimeServerEventSessionCreated)
  | ({
      type?: 'RealtimeServerEventSessionUpdated';
    } & RealtimeServerEventSessionUpdated)
  | ({
      type?: 'RealtimeServerEventTranscriptionSessionUpdated';
    } & RealtimeServerEventTranscriptionSessionUpdated)
  | ({
      type?: 'RealtimeServerEventOutputAudioBufferStarted';
    } & RealtimeServerEventOutputAudioBufferStarted)
  | ({
      type?: 'RealtimeServerEventOutputAudioBufferStopped';
    } & RealtimeServerEventOutputAudioBufferStopped)
  | ({
      type?: 'RealtimeServerEventOutputAudioBufferCleared';
    } & RealtimeServerEventOutputAudioBufferCleared);

/**
 * Returned when a conversation is created. Emitted right after session creation.
 *
 */
export type RealtimeServerEventConversationCreated = {
  /**
   * The conversation resource.
   */
  conversation: {
    /**
     * The unique ID of the conversation.
     */
    id?: string;
    /**
     * The object type, must be `realtime.conversation`.
     */
    object?: 'realtime.conversation';
  };
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  /**
   * The event type, must be `conversation.created`.
   */
  type: 'conversation.created';
};

/**
 * Returned when a conversation item is created. There are several scenarios that produce this event:
 * - The server is generating a Response, which if successful will produce
 * either one or two Items, which will be of type `message`
 * (role `assistant`) or type `function_call`.
 * - The input audio buffer has been committed, either by the client or the
 * server (in `server_vad` mode). The server will take the content of the
 * input audio buffer and add it to a new user message Item.
 * - The client has sent a `conversation.item.create` event to add a new Item
 * to the Conversation.
 *
 */
export type RealtimeServerEventConversationItemCreated = {
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  item: RealtimeConversationItem;
  /**
   * The ID of the preceding item in the Conversation context, allows the
   * client to understand the order of the conversation. Can be `null` if the
   * item has no predecessor.
   *
   */
  previous_item_id?: string;
  /**
   * The event type, must be `conversation.item.created`.
   */
  type: 'conversation.item.created';
};

/**
 * Returned when an item in the conversation is deleted by the client with a
 * `conversation.item.delete` event. This event is used to synchronize the
 * server's understanding of the conversation history with the client's view.
 *
 */
export type RealtimeServerEventConversationItemDeleted = {
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  /**
   * The ID of the item that was deleted.
   */
  item_id: string;
  /**
   * The event type, must be `conversation.item.deleted`.
   */
  type: 'conversation.item.deleted';
};

/**
 * This event is the output of audio transcription for user audio written to the
 * user audio buffer. Transcription begins when the input audio buffer is
 * committed by the client or server (in `server_vad` mode). Transcription runs
 * asynchronously with Response creation, so this event may come before or after
 * the Response events.
 *
 * Realtime API models accept audio natively, and thus input transcription is a
 * separate process run on a separate ASR (Automatic Speech Recognition) model.
 * The transcript may diverge somewhat from the model's interpretation, and
 * should be treated as a rough guide.
 *
 */
export type RealtimeServerEventConversationItemInputAudioTranscriptionCompleted =
  {
    /**
     * The index of the content part containing the audio.
     */
    content_index: number;
    /**
     * The unique ID of the server event.
     */
    event_id: string;
    /**
     * The ID of the user message item containing the audio.
     */
    item_id: string;
    /**
     * The log probabilities of the transcription.
     */
    logprobs?: Array<LogProbProperties>;
    /**
     * The transcribed text.
     */
    transcript: string;
    /**
     * The event type, must be
     * `conversation.item.input_audio_transcription.completed`.
     *
     */
    type: 'conversation.item.input_audio_transcription.completed';
    /**
     * Usage statistics for the transcription.
     */
    usage: TranscriptTextUsageTokens | TranscriptTextUsageDuration;
  };

/**
 * Returned when the text value of an input audio transcription content part is updated.
 *
 */
export type RealtimeServerEventConversationItemInputAudioTranscriptionDelta = {
  /**
   * The index of the content part in the item's content array.
   */
  content_index?: number;
  /**
   * The text delta.
   */
  delta?: string;
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  /**
   * The ID of the item.
   */
  item_id: string;
  /**
   * The log probabilities of the transcription.
   */
  logprobs?: Array<LogProbProperties>;
  /**
   * The event type, must be `conversation.item.input_audio_transcription.delta`.
   */
  type: 'conversation.item.input_audio_transcription.delta';
};

/**
 * Returned when input audio transcription is configured, and a transcription
 * request for a user message failed. These events are separate from other
 * `error` events so that the client can identify the related Item.
 *
 */
export type RealtimeServerEventConversationItemInputAudioTranscriptionFailed = {
  /**
   * The index of the content part containing the audio.
   */
  content_index: number;
  /**
   * Details of the transcription error.
   */
  error: {
    /**
     * Error code, if any.
     */
    code?: string;
    /**
     * A human-readable error message.
     */
    message?: string;
    /**
     * Parameter related to the error, if any.
     */
    param?: string;
    /**
     * The type of error.
     */
    type?: string;
  };
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  /**
   * The ID of the user message item.
   */
  item_id: string;
  /**
   * The event type, must be
   * `conversation.item.input_audio_transcription.failed`.
   *
   */
  type: 'conversation.item.input_audio_transcription.failed';
};

/**
 * Returned when a conversation item is retrieved with `conversation.item.retrieve`.
 *
 */
export type RealtimeServerEventConversationItemRetrieved = {
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  item: RealtimeConversationItem;
  /**
   * The event type, must be `conversation.item.retrieved`.
   */
  type: 'conversation.item.retrieved';
};

/**
 * Returned when an earlier assistant audio message item is truncated by the
 * client with a `conversation.item.truncate` event. This event is used to
 * synchronize the server's understanding of the audio with the client's playback.
 *
 * This action will truncate the audio and remove the server-side text transcript
 * to ensure there is no text in the context that hasn't been heard by the user.
 *
 */
export type RealtimeServerEventConversationItemTruncated = {
  /**
   * The duration up to which the audio was truncated, in milliseconds.
   *
   */
  audio_end_ms: number;
  /**
   * The index of the content part that was truncated.
   */
  content_index: number;
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  /**
   * The ID of the assistant message item that was truncated.
   */
  item_id: string;
  /**
   * The event type, must be `conversation.item.truncated`.
   */
  type: 'conversation.item.truncated';
};

/**
 * Returned when an error occurs, which could be a client problem or a server
 * problem. Most errors are recoverable and the session will stay open, we
 * recommend to implementors to monitor and log error messages by default.
 *
 */
export type RealtimeServerEventError = {
  /**
   * Details of the error.
   */
  error: {
    /**
     * Error code, if any.
     */
    code?: string;
    /**
     * The event_id of the client event that caused the error, if applicable.
     *
     */
    event_id?: string;
    /**
     * A human-readable error message.
     */
    message: string;
    /**
     * Parameter related to the error, if any.
     */
    param?: string;
    /**
     * The type of error (e.g., "invalid_request_error", "server_error").
     *
     */
    type: string;
  };
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  /**
   * The event type, must be `error`.
   */
  type: 'error';
};

/**
 * Returned when the input audio buffer is cleared by the client with a
 * `input_audio_buffer.clear` event.
 *
 */
export type RealtimeServerEventInputAudioBufferCleared = {
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  /**
   * The event type, must be `input_audio_buffer.cleared`.
   */
  type: 'input_audio_buffer.cleared';
};

/**
 * Returned when an input audio buffer is committed, either by the client or
 * automatically in server VAD mode. The `item_id` property is the ID of the user
 * message item that will be created, thus a `conversation.item.created` event
 * will also be sent to the client.
 *
 */
export type RealtimeServerEventInputAudioBufferCommitted = {
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  /**
   * The ID of the user message item that will be created.
   */
  item_id: string;
  /**
   * The ID of the preceding item after which the new item will be inserted.
   * Can be `null` if the item has no predecessor.
   *
   */
  previous_item_id?: string;
  /**
   * The event type, must be `input_audio_buffer.committed`.
   */
  type: 'input_audio_buffer.committed';
};

/**
 * Sent by the server when in `server_vad` mode to indicate that speech has been
 * detected in the audio buffer. This can happen any time audio is added to the
 * buffer (unless speech is already detected). The client may want to use this
 * event to interrupt audio playback or provide visual feedback to the user.
 *
 * The client should expect to receive a `input_audio_buffer.speech_stopped` event
 * when speech stops. The `item_id` property is the ID of the user message item
 * that will be created when speech stops and will also be included in the
 * `input_audio_buffer.speech_stopped` event (unless the client manually commits
 * the audio buffer during VAD activation).
 *
 */
export type RealtimeServerEventInputAudioBufferSpeechStarted = {
  /**
   * Milliseconds from the start of all audio written to the buffer during the
   * session when speech was first detected. This will correspond to the
   * beginning of audio sent to the model, and thus includes the
   * `prefix_padding_ms` configured in the Session.
   *
   */
  audio_start_ms: number;
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  /**
   * The ID of the user message item that will be created when speech stops.
   *
   */
  item_id: string;
  /**
   * The event type, must be `input_audio_buffer.speech_started`.
   */
  type: 'input_audio_buffer.speech_started';
};

/**
 * Returned in `server_vad` mode when the server detects the end of speech in
 * the audio buffer. The server will also send an `conversation.item.created`
 * event with the user message item that is created from the audio buffer.
 *
 */
export type RealtimeServerEventInputAudioBufferSpeechStopped = {
  /**
   * Milliseconds since the session started when speech stopped. This will
   * correspond to the end of audio sent to the model, and thus includes the
   * `min_silence_duration_ms` configured in the Session.
   *
   */
  audio_end_ms: number;
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  /**
   * The ID of the user message item that will be created.
   */
  item_id: string;
  /**
   * The event type, must be `input_audio_buffer.speech_stopped`.
   */
  type: 'input_audio_buffer.speech_stopped';
};

/**
 * **WebRTC Only:** Emitted when the output audio buffer is cleared. This happens either in VAD
 * mode when the user has interrupted (`input_audio_buffer.speech_started`),
 * or when the client has emitted the `output_audio_buffer.clear` event to manually
 * cut off the current audio response.
 * [Learn more](https://platform.openai.com/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).
 *
 */
export type RealtimeServerEventOutputAudioBufferCleared = {
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  /**
   * The unique ID of the response that produced the audio.
   */
  response_id: string;
  /**
   * The event type, must be `output_audio_buffer.cleared`.
   */
  type: 'output_audio_buffer.cleared';
};

/**
 * **WebRTC Only:** Emitted when the server begins streaming audio to the client. This event is
 * emitted after an audio content part has been added (`response.content_part.added`)
 * to the response.
 * [Learn more](https://platform.openai.com/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).
 *
 */
export type RealtimeServerEventOutputAudioBufferStarted = {
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  /**
   * The unique ID of the response that produced the audio.
   */
  response_id: string;
  /**
   * The event type, must be `output_audio_buffer.started`.
   */
  type: 'output_audio_buffer.started';
};

/**
 * **WebRTC Only:** Emitted when the output audio buffer has been completely drained on the server,
 * and no more audio is forthcoming. This event is emitted after the full response
 * data has been sent to the client (`response.done`).
 * [Learn more](https://platform.openai.com/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).
 *
 */
export type RealtimeServerEventOutputAudioBufferStopped = {
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  /**
   * The unique ID of the response that produced the audio.
   */
  response_id: string;
  /**
   * The event type, must be `output_audio_buffer.stopped`.
   */
  type: 'output_audio_buffer.stopped';
};

/**
 * Emitted at the beginning of a Response to indicate the updated rate limits.
 * When a Response is created some tokens will be "reserved" for the output
 * tokens, the rate limits shown here reflect that reservation, which is then
 * adjusted accordingly once the Response is completed.
 *
 */
export type RealtimeServerEventRateLimitsUpdated = {
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  /**
   * List of rate limit information.
   */
  rate_limits: Array<{
    /**
     * The maximum allowed value for the rate limit.
     */
    limit?: number;
    /**
     * The name of the rate limit (`requests`, `tokens`).
     *
     */
    name?: 'requests' | 'tokens';
    /**
     * The remaining value before the limit is reached.
     */
    remaining?: number;
    /**
     * Seconds until the rate limit resets.
     */
    reset_seconds?: number;
  }>;
  /**
   * The event type, must be `rate_limits.updated`.
   */
  type: 'rate_limits.updated';
};

/**
 * Returned when the model-generated audio is updated.
 */
export type RealtimeServerEventResponseAudioDelta = {
  /**
   * The index of the content part in the item's content array.
   */
  content_index: number;
  /**
   * Base64-encoded audio data delta.
   */
  delta: string;
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  /**
   * The ID of the item.
   */
  item_id: string;
  /**
   * The index of the output item in the response.
   */
  output_index: number;
  /**
   * The ID of the response.
   */
  response_id: string;
  /**
   * The event type, must be `response.audio.delta`.
   */
  type: 'response.audio.delta';
};

/**
 * Returned when the model-generated audio is done. Also emitted when a Response
 * is interrupted, incomplete, or cancelled.
 *
 */
export type RealtimeServerEventResponseAudioDone = {
  /**
   * The index of the content part in the item's content array.
   */
  content_index: number;
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  /**
   * The ID of the item.
   */
  item_id: string;
  /**
   * The index of the output item in the response.
   */
  output_index: number;
  /**
   * The ID of the response.
   */
  response_id: string;
  /**
   * The event type, must be `response.audio.done`.
   */
  type: 'response.audio.done';
};

/**
 * Returned when the model-generated transcription of audio output is updated.
 *
 */
export type RealtimeServerEventResponseAudioTranscriptDelta = {
  /**
   * The index of the content part in the item's content array.
   */
  content_index: number;
  /**
   * The transcript delta.
   */
  delta: string;
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  /**
   * The ID of the item.
   */
  item_id: string;
  /**
   * The index of the output item in the response.
   */
  output_index: number;
  /**
   * The ID of the response.
   */
  response_id: string;
  /**
   * The event type, must be `response.audio_transcript.delta`.
   */
  type: 'response.audio_transcript.delta';
};

/**
 * Returned when the model-generated transcription of audio output is done
 * streaming. Also emitted when a Response is interrupted, incomplete, or
 * cancelled.
 *
 */
export type RealtimeServerEventResponseAudioTranscriptDone = {
  /**
   * The index of the content part in the item's content array.
   */
  content_index: number;
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  /**
   * The ID of the item.
   */
  item_id: string;
  /**
   * The index of the output item in the response.
   */
  output_index: number;
  /**
   * The ID of the response.
   */
  response_id: string;
  /**
   * The final transcript of the audio.
   */
  transcript: string;
  /**
   * The event type, must be `response.audio_transcript.done`.
   */
  type: 'response.audio_transcript.done';
};

/**
 * Returned when a new content part is added to an assistant message item during
 * response generation.
 *
 */
export type RealtimeServerEventResponseContentPartAdded = {
  /**
   * The index of the content part in the item's content array.
   */
  content_index: number;
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  /**
   * The ID of the item to which the content part was added.
   */
  item_id: string;
  /**
   * The index of the output item in the response.
   */
  output_index: number;
  /**
   * The content part that was added.
   */
  part: {
    /**
     * Base64-encoded audio data (if type is "audio").
     */
    audio?: string;
    /**
     * The text content (if type is "text").
     */
    text?: string;
    /**
     * The transcript of the audio (if type is "audio").
     */
    transcript?: string;
    /**
     * The content type ("text", "audio").
     */
    type?: 'text' | 'audio';
  };
  /**
   * The ID of the response.
   */
  response_id: string;
  /**
   * The event type, must be `response.content_part.added`.
   */
  type: 'response.content_part.added';
};

/**
 * Returned when a content part is done streaming in an assistant message item.
 * Also emitted when a Response is interrupted, incomplete, or cancelled.
 *
 */
export type RealtimeServerEventResponseContentPartDone = {
  /**
   * The index of the content part in the item's content array.
   */
  content_index: number;
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  /**
   * The ID of the item.
   */
  item_id: string;
  /**
   * The index of the output item in the response.
   */
  output_index: number;
  /**
   * The content part that is done.
   */
  part: {
    /**
     * Base64-encoded audio data (if type is "audio").
     */
    audio?: string;
    /**
     * The text content (if type is "text").
     */
    text?: string;
    /**
     * The transcript of the audio (if type is "audio").
     */
    transcript?: string;
    /**
     * The content type ("text", "audio").
     */
    type?: 'text' | 'audio';
  };
  /**
   * The ID of the response.
   */
  response_id: string;
  /**
   * The event type, must be `response.content_part.done`.
   */
  type: 'response.content_part.done';
};

/**
 * Returned when a new Response is created. The first event of response creation,
 * where the response is in an initial state of `in_progress`.
 *
 */
export type RealtimeServerEventResponseCreated = {
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  response: RealtimeResponse;
  /**
   * The event type, must be `response.created`.
   */
  type: 'response.created';
};

/**
 * Returned when a Response is done streaming. Always emitted, no matter the
 * final state. The Response object included in the `response.done` event will
 * include all output Items in the Response but will omit the raw audio data.
 *
 */
export type RealtimeServerEventResponseDone = {
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  response: RealtimeResponse;
  /**
   * The event type, must be `response.done`.
   */
  type: 'response.done';
};

/**
 * Returned when the model-generated function call arguments are updated.
 *
 */
export type RealtimeServerEventResponseFunctionCallArgumentsDelta = {
  /**
   * The ID of the function call.
   */
  call_id: string;
  /**
   * The arguments delta as a JSON string.
   */
  delta: string;
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  /**
   * The ID of the function call item.
   */
  item_id: string;
  /**
   * The index of the output item in the response.
   */
  output_index: number;
  /**
   * The ID of the response.
   */
  response_id: string;
  /**
   * The event type, must be `response.function_call_arguments.delta`.
   *
   */
  type: 'response.function_call_arguments.delta';
};

/**
 * Returned when the model-generated function call arguments are done streaming.
 * Also emitted when a Response is interrupted, incomplete, or cancelled.
 *
 */
export type RealtimeServerEventResponseFunctionCallArgumentsDone = {
  /**
   * The final arguments as a JSON string.
   */
  arguments: string;
  /**
   * The ID of the function call.
   */
  call_id: string;
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  /**
   * The ID of the function call item.
   */
  item_id: string;
  /**
   * The index of the output item in the response.
   */
  output_index: number;
  /**
   * The ID of the response.
   */
  response_id: string;
  /**
   * The event type, must be `response.function_call_arguments.done`.
   *
   */
  type: 'response.function_call_arguments.done';
};

/**
 * Returned when a new Item is created during Response generation.
 */
export type RealtimeServerEventResponseOutputItemAdded = {
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  item: RealtimeConversationItem;
  /**
   * The index of the output item in the Response.
   */
  output_index: number;
  /**
   * The ID of the Response to which the item belongs.
   */
  response_id: string;
  /**
   * The event type, must be `response.output_item.added`.
   */
  type: 'response.output_item.added';
};

/**
 * Returned when an Item is done streaming. Also emitted when a Response is
 * interrupted, incomplete, or cancelled.
 *
 */
export type RealtimeServerEventResponseOutputItemDone = {
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  item: RealtimeConversationItem;
  /**
   * The index of the output item in the Response.
   */
  output_index: number;
  /**
   * The ID of the Response to which the item belongs.
   */
  response_id: string;
  /**
   * The event type, must be `response.output_item.done`.
   */
  type: 'response.output_item.done';
};

/**
 * Returned when the text value of a "text" content part is updated.
 */
export type RealtimeServerEventResponseTextDelta = {
  /**
   * The index of the content part in the item's content array.
   */
  content_index: number;
  /**
   * The text delta.
   */
  delta: string;
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  /**
   * The ID of the item.
   */
  item_id: string;
  /**
   * The index of the output item in the response.
   */
  output_index: number;
  /**
   * The ID of the response.
   */
  response_id: string;
  /**
   * The event type, must be `response.text.delta`.
   */
  type: 'response.text.delta';
};

/**
 * Returned when the text value of a "text" content part is done streaming. Also
 * emitted when a Response is interrupted, incomplete, or cancelled.
 *
 */
export type RealtimeServerEventResponseTextDone = {
  /**
   * The index of the content part in the item's content array.
   */
  content_index: number;
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  /**
   * The ID of the item.
   */
  item_id: string;
  /**
   * The index of the output item in the response.
   */
  output_index: number;
  /**
   * The ID of the response.
   */
  response_id: string;
  /**
   * The final text content.
   */
  text: string;
  /**
   * The event type, must be `response.text.done`.
   */
  type: 'response.text.done';
};

/**
 * Returned when a Session is created. Emitted automatically when a new
 * connection is established as the first server event. This event will contain
 * the default Session configuration.
 *
 */
export type RealtimeServerEventSessionCreated = {
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  session: RealtimeSession;
  /**
   * The event type, must be `session.created`.
   */
  type: 'session.created';
};

/**
 * Returned when a session is updated with a `session.update` event, unless
 * there is an error.
 *
 */
export type RealtimeServerEventSessionUpdated = {
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  session: RealtimeSession;
  /**
   * The event type, must be `session.updated`.
   */
  type: 'session.updated';
};

/**
 * Returned when a transcription session is updated with a `transcription_session.update` event, unless
 * there is an error.
 *
 */
export type RealtimeServerEventTranscriptionSessionUpdated = {
  /**
   * The unique ID of the server event.
   */
  event_id: string;
  session: RealtimeTranscriptionSessionCreateResponse;
  /**
   * The event type, must be `transcription_session.updated`.
   */
  type: 'transcription_session.updated';
};

/**
 * Realtime session object configuration.
 */
export type RealtimeSession = {
  /**
   * Unique identifier for the session that looks like `sess_1234567890abcdef`.
   *
   */
  id?: string;
  /**
   * The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
   * For `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate,
   * single channel (mono), and little-endian byte order.
   *
   */
  input_audio_format?: 'pcm16' | 'g711_ulaw' | 'g711_alaw';
  /**
   * Configuration for input audio noise reduction. This can be set to `null` to turn off.
   * Noise reduction filters audio added to the input audio buffer before it is sent to VAD and the model.
   * Filtering the audio can improve VAD and turn detection accuracy (reducing false positives) and model performance by improving perception of the input audio.
   *
   */
  input_audio_noise_reduction?: {
    /**
     * Type of noise reduction. `near_field` is for close-talking microphones such as headphones, `far_field` is for far-field microphones such as laptop or conference room microphones.
     *
     */
    type?: 'near_field' | 'far_field';
  };
  /**
   * Configuration for input audio transcription, defaults to off and can be set to `null` to turn off once on. Input audio transcription is not native to the model, since the model consumes audio directly. Transcription runs asynchronously through [the /audio/transcriptions endpoint](https://platform.openai.com/docs/api-reference/audio/createTranscription) and should be treated as guidance of input audio content rather than precisely what the model heard. The client can optionally set the language and prompt for transcription, these offer additional guidance to the transcription service.
   *
   */
  input_audio_transcription?: {
    /**
     * The language of the input audio. Supplying the input language in
     * [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format
     * will improve accuracy and latency.
     *
     */
    language?: string;
    /**
     * The model to use for transcription, current options are `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1`.
     *
     */
    model?: string;
    /**
     * An optional text to guide the model's style or continue a previous audio
     * segment.
     * For `whisper-1`, the [prompt is a list of keywords](https://platform.openai.com/docs/guides/speech-to-text#prompting).
     * For `gpt-4o-transcribe` models, the prompt is a free text string, for example "expect words related to technology".
     *
     */
    prompt?: string;
  };
  /**
   * The default system instructions (i.e. system message) prepended to model
   * calls. This field allows the client to guide the model on desired
   * responses. The model can be instructed on response content and format,
   * (e.g. "be extremely succinct", "act friendly", "here are examples of good
   * responses") and on audio behavior (e.g. "talk quickly", "inject emotion
   * into your voice", "laugh frequently"). The instructions are not
   * guaranteed to be followed by the model, but they provide guidance to the
   * model on the desired behavior.
   *
   *
   * Note that the server sets default instructions which will be used if this
   * field is not set and are visible in the `session.created` event at the
   * start of the session.
   *
   */
  instructions?: string;
  /**
   * Maximum number of output tokens for a single assistant response,
   * inclusive of tool calls. Provide an integer between 1 and 4096 to
   * limit output tokens, or `inf` for the maximum available tokens for a
   * given model. Defaults to `inf`.
   *
   */
  max_response_output_tokens?: number | 'inf';
  /**
   * The set of modalities the model can respond with. To disable audio,
   * set this to ["text"].
   *
   */
  modalities?: unknown;
  /**
   * The Realtime model used for this session.
   *
   */
  model?:
    | 'gpt-4o-realtime-preview'
    | 'gpt-4o-realtime-preview-2024-10-01'
    | 'gpt-4o-realtime-preview-2024-12-17'
    | 'gpt-4o-realtime-preview-2025-06-03'
    | 'gpt-4o-mini-realtime-preview'
    | 'gpt-4o-mini-realtime-preview-2024-12-17';
  /**
   * The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
   * For `pcm16`, output audio is sampled at a rate of 24kHz.
   *
   */
  output_audio_format?: 'pcm16' | 'g711_ulaw' | 'g711_alaw';
  /**
   * The speed of the model's spoken response. 1.0 is the default speed. 0.25 is
   * the minimum speed. 1.5 is the maximum speed. This value can only be changed
   * in between model turns, not while a response is in progress.
   *
   */
  speed?: number;
  /**
   * Sampling temperature for the model, limited to [0.6, 1.2]. For audio models a temperature of 0.8 is highly recommended for best performance.
   *
   */
  temperature?: number;
  /**
   * How the model chooses tools. Options are `auto`, `none`, `required`, or
   * specify a function.
   *
   */
  tool_choice?: string;
  /**
   * Tools (functions) available to the model.
   */
  tools?: Array<{
    /**
     * The description of the function, including guidance on when and how
     * to call it, and guidance about what to tell the user when calling
     * (if anything).
     *
     */
    description?: string;
    /**
     * The name of the function.
     */
    name?: string;
    /**
     * Parameters of the function in JSON Schema.
     */
    parameters?: {
      [key: string]: unknown;
    };
    /**
     * The type of the tool, i.e. `function`.
     */
    type?: 'function';
  }>;
  /**
   * Tracing Configuration
   *
   * Configuration options for tracing. Set to null to disable tracing. Once
   * tracing is enabled for a session, the configuration cannot be modified.
   *
   * `auto` will create a trace for the session with default values for the
   * workflow name, group id, and metadata.
   *
   */
  tracing?:
    | 'auto'
    | {
        /**
         * The group id to attach to this trace to enable filtering and
         * grouping in the traces dashboard.
         *
         */
        group_id?: string;
        /**
         * The arbitrary metadata to attach to this trace to enable
         * filtering in the traces dashboard.
         *
         */
        metadata?: {
          [key: string]: unknown;
        };
        /**
         * The name of the workflow to attach to this trace. This is used to
         * name the trace in the traces dashboard.
         *
         */
        workflow_name?: string;
      };
  /**
   * Configuration for turn detection, ether Server VAD or Semantic VAD. This can be set to `null` to turn off, in which case the client must manually trigger model response.
   * Server VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech.
   * Semantic VAD is more advanced and uses a turn detection model (in conjunction with VAD) to semantically estimate whether the user has finished speaking, then dynamically sets a timeout based on this probability. For example, if user audio trails off with "uhhm", the model will score a low probability of turn end and wait longer for the user to continue speaking. This can be useful for more natural conversations, but may have a higher latency.
   *
   */
  turn_detection?: {
    /**
     * Whether or not to automatically generate a response when a VAD stop event occurs.
     *
     */
    create_response?: boolean;
    /**
     * Used only for `semantic_vad` mode. The eagerness of the model to respond. `low` will wait longer for the user to continue speaking, `high` will respond more quickly. `auto` is the default and is equivalent to `medium`.
     *
     */
    eagerness?: 'low' | 'medium' | 'high' | 'auto';
    /**
     * Whether or not to automatically interrupt any ongoing response with output to the default
     * conversation (i.e. `conversation` of `auto`) when a VAD start event occurs.
     *
     */
    interrupt_response?: boolean;
    /**
     * Used only for `server_vad` mode. Amount of audio to include before the VAD detected speech (in
     * milliseconds). Defaults to 300ms.
     *
     */
    prefix_padding_ms?: number;
    /**
     * Used only for `server_vad` mode. Duration of silence to detect speech stop (in milliseconds). Defaults
     * to 500ms. With shorter values the model will respond more quickly,
     * but may jump in on short pauses from the user.
     *
     */
    silence_duration_ms?: number;
    /**
     * Used only for `server_vad` mode. Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A
     * higher threshold will require louder audio to activate the model, and
     * thus might perform better in noisy environments.
     *
     */
    threshold?: number;
    /**
     * Type of turn detection.
     *
     */
    type?: 'server_vad' | 'semantic_vad';
  };
  /**
   * The voice the model uses to respond. Voice cannot be changed during the
   * session once the model has responded with audio at least once. Current
   * voice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `sage`,
   * `shimmer`, and `verse`.
   *
   */
  voice?: VoiceIdsShared;
};

/**
 * Realtime session object configuration.
 */
export type RealtimeSessionCreateRequest = {
  /**
   * Configuration options for the generated client secret.
   *
   */
  client_secret?: {
    /**
     * Configuration for the ephemeral token expiration.
     *
     */
    expires_after?: {
      /**
       * The anchor point for the ephemeral token expiration. Only `created_at` is currently supported.
       *
       */
      anchor: 'created_at';
      /**
       * The number of seconds from the anchor point to the expiration. Select a value between `10` and `7200`.
       *
       */
      seconds?: number;
    };
  };
  /**
   * The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
   * For `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate,
   * single channel (mono), and little-endian byte order.
   *
   */
  input_audio_format?: 'pcm16' | 'g711_ulaw' | 'g711_alaw';
  /**
   * Configuration for input audio noise reduction. This can be set to `null` to turn off.
   * Noise reduction filters audio added to the input audio buffer before it is sent to VAD and the model.
   * Filtering the audio can improve VAD and turn detection accuracy (reducing false positives) and model performance by improving perception of the input audio.
   *
   */
  input_audio_noise_reduction?: {
    /**
     * Type of noise reduction. `near_field` is for close-talking microphones such as headphones, `far_field` is for far-field microphones such as laptop or conference room microphones.
     *
     */
    type?: 'near_field' | 'far_field';
  };
  /**
   * Configuration for input audio transcription, defaults to off and can be set to `null` to turn off once on. Input audio transcription is not native to the model, since the model consumes audio directly. Transcription runs asynchronously through [the /audio/transcriptions endpoint](https://platform.openai.com/docs/api-reference/audio/createTranscription) and should be treated as guidance of input audio content rather than precisely what the model heard. The client can optionally set the language and prompt for transcription, these offer additional guidance to the transcription service.
   *
   */
  input_audio_transcription?: {
    /**
     * The language of the input audio. Supplying the input language in
     * [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format
     * will improve accuracy and latency.
     *
     */
    language?: string;
    /**
     * The model to use for transcription, current options are `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1`.
     *
     */
    model?: string;
    /**
     * An optional text to guide the model's style or continue a previous audio
     * segment.
     * For `whisper-1`, the [prompt is a list of keywords](https://platform.openai.com/docs/guides/speech-to-text#prompting).
     * For `gpt-4o-transcribe` models, the prompt is a free text string, for example "expect words related to technology".
     *
     */
    prompt?: string;
  };
  /**
   * The default system instructions (i.e. system message) prepended to model calls. This field allows the client to guide the model on desired responses. The model can be instructed on response content and format, (e.g. "be extremely succinct", "act friendly", "here are examples of good responses") and on audio behavior (e.g. "talk quickly", "inject emotion into your voice", "laugh frequently"). The instructions are not guaranteed to be followed by the model, but they provide guidance to the model on the desired behavior.
   *
   * Note that the server sets default instructions which will be used if this field is not set and are visible in the `session.created` event at the start of the session.
   *
   */
  instructions?: string;
  /**
   * Maximum number of output tokens for a single assistant response,
   * inclusive of tool calls. Provide an integer between 1 and 4096 to
   * limit output tokens, or `inf` for the maximum available tokens for a
   * given model. Defaults to `inf`.
   *
   */
  max_response_output_tokens?: number | 'inf';
  /**
   * The set of modalities the model can respond with. To disable audio,
   * set this to ["text"].
   *
   */
  modalities?: unknown;
  /**
   * The Realtime model used for this session.
   *
   */
  model?:
    | 'gpt-4o-realtime-preview'
    | 'gpt-4o-realtime-preview-2024-10-01'
    | 'gpt-4o-realtime-preview-2024-12-17'
    | 'gpt-4o-realtime-preview-2025-06-03'
    | 'gpt-4o-mini-realtime-preview'
    | 'gpt-4o-mini-realtime-preview-2024-12-17';
  /**
   * The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
   * For `pcm16`, output audio is sampled at a rate of 24kHz.
   *
   */
  output_audio_format?: 'pcm16' | 'g711_ulaw' | 'g711_alaw';
  /**
   * The speed of the model's spoken response. 1.0 is the default speed. 0.25 is
   * the minimum speed. 1.5 is the maximum speed. This value can only be changed
   * in between model turns, not while a response is in progress.
   *
   */
  speed?: number;
  /**
   * Sampling temperature for the model, limited to [0.6, 1.2]. For audio models a temperature of 0.8 is highly recommended for best performance.
   *
   */
  temperature?: number;
  /**
   * How the model chooses tools. Options are `auto`, `none`, `required`, or
   * specify a function.
   *
   */
  tool_choice?: string;
  /**
   * Tools (functions) available to the model.
   */
  tools?: Array<{
    /**
     * The description of the function, including guidance on when and how
     * to call it, and guidance about what to tell the user when calling
     * (if anything).
     *
     */
    description?: string;
    /**
     * The name of the function.
     */
    name?: string;
    /**
     * Parameters of the function in JSON Schema.
     */
    parameters?: {
      [key: string]: unknown;
    };
    /**
     * The type of the tool, i.e. `function`.
     */
    type?: 'function';
  }>;
  /**
   * Tracing Configuration
   *
   * Configuration options for tracing. Set to null to disable tracing. Once
   * tracing is enabled for a session, the configuration cannot be modified.
   *
   * `auto` will create a trace for the session with default values for the
   * workflow name, group id, and metadata.
   *
   */
  tracing?:
    | 'auto'
    | {
        /**
         * The group id to attach to this trace to enable filtering and
         * grouping in the traces dashboard.
         *
         */
        group_id?: string;
        /**
         * The arbitrary metadata to attach to this trace to enable
         * filtering in the traces dashboard.
         *
         */
        metadata?: {
          [key: string]: unknown;
        };
        /**
         * The name of the workflow to attach to this trace. This is used to
         * name the trace in the traces dashboard.
         *
         */
        workflow_name?: string;
      };
  /**
   * Configuration for turn detection, ether Server VAD or Semantic VAD. This can be set to `null` to turn off, in which case the client must manually trigger model response.
   * Server VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech.
   * Semantic VAD is more advanced and uses a turn detection model (in conjunction with VAD) to semantically estimate whether the user has finished speaking, then dynamically sets a timeout based on this probability. For example, if user audio trails off with "uhhm", the model will score a low probability of turn end and wait longer for the user to continue speaking. This can be useful for more natural conversations, but may have a higher latency.
   *
   */
  turn_detection?: {
    /**
     * Whether or not to automatically generate a response when a VAD stop event occurs.
     *
     */
    create_response?: boolean;
    /**
     * Used only for `semantic_vad` mode. The eagerness of the model to respond. `low` will wait longer for the user to continue speaking, `high` will respond more quickly. `auto` is the default and is equivalent to `medium`.
     *
     */
    eagerness?: 'low' | 'medium' | 'high' | 'auto';
    /**
     * Whether or not to automatically interrupt any ongoing response with output to the default
     * conversation (i.e. `conversation` of `auto`) when a VAD start event occurs.
     *
     */
    interrupt_response?: boolean;
    /**
     * Used only for `server_vad` mode. Amount of audio to include before the VAD detected speech (in
     * milliseconds). Defaults to 300ms.
     *
     */
    prefix_padding_ms?: number;
    /**
     * Used only for `server_vad` mode. Duration of silence to detect speech stop (in milliseconds). Defaults
     * to 500ms. With shorter values the model will respond more quickly,
     * but may jump in on short pauses from the user.
     *
     */
    silence_duration_ms?: number;
    /**
     * Used only for `server_vad` mode. Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A
     * higher threshold will require louder audio to activate the model, and
     * thus might perform better in noisy environments.
     *
     */
    threshold?: number;
    /**
     * Type of turn detection.
     *
     */
    type?: 'server_vad' | 'semantic_vad';
  };
  /**
   * The voice the model uses to respond. Voice cannot be changed during the
   * session once the model has responded with audio at least once. Current
   * voice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `sage`,
   * `shimmer`, and `verse`.
   *
   */
  voice?: VoiceIdsShared;
};

/**
 * A new Realtime session configuration, with an ephemeral key. Default TTL
 * for keys is one minute.
 *
 */
export type RealtimeSessionCreateResponse = {
  /**
   * Ephemeral key returned by the API.
   */
  client_secret: {
    /**
     * Timestamp for when the token expires. Currently, all tokens expire
     * after one minute.
     *
     */
    expires_at: number;
    /**
     * Ephemeral key usable in client environments to authenticate connections
     * to the Realtime API. Use this in client-side environments rather than
     * a standard API token, which should only be used server-side.
     *
     */
    value: string;
  };
  /**
   * The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
   *
   */
  input_audio_format?: string;
  /**
   * Configuration for input audio transcription, defaults to off and can be
   * set to `null` to turn off once on. Input audio transcription is not native
   * to the model, since the model consumes audio directly. Transcription runs
   * asynchronously and should be treated as rough guidance
   * rather than the representation understood by the model.
   *
   */
  input_audio_transcription?: {
    /**
     * The model to use for transcription.
     *
     */
    model?: string;
  };
  /**
   * The default system instructions (i.e. system message) prepended to model
   * calls. This field allows the client to guide the model on desired
   * responses. The model can be instructed on response content and format,
   * (e.g. "be extremely succinct", "act friendly", "here are examples of good
   * responses") and on audio behavior (e.g. "talk quickly", "inject emotion
   * into your voice", "laugh frequently"). The instructions are not guaranteed
   * to be followed by the model, but they provide guidance to the model on the
   * desired behavior.
   *
   * Note that the server sets default instructions which will be used if this
   * field is not set and are visible in the `session.created` event at the
   * start of the session.
   *
   */
  instructions?: string;
  /**
   * Maximum number of output tokens for a single assistant response,
   * inclusive of tool calls. Provide an integer between 1 and 4096 to
   * limit output tokens, or `inf` for the maximum available tokens for a
   * given model. Defaults to `inf`.
   *
   */
  max_response_output_tokens?: number | 'inf';
  /**
   * The set of modalities the model can respond with. To disable audio,
   * set this to ["text"].
   *
   */
  modalities?: unknown;
  /**
   * The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
   *
   */
  output_audio_format?: string;
  /**
   * The speed of the model's spoken response. 1.0 is the default speed. 0.25 is
   * the minimum speed. 1.5 is the maximum speed. This value can only be changed
   * in between model turns, not while a response is in progress.
   *
   */
  speed?: number;
  /**
   * Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.
   *
   */
  temperature?: number;
  /**
   * How the model chooses tools. Options are `auto`, `none`, `required`, or
   * specify a function.
   *
   */
  tool_choice?: string;
  /**
   * Tools (functions) available to the model.
   */
  tools?: Array<{
    /**
     * The description of the function, including guidance on when and how
     * to call it, and guidance about what to tell the user when calling
     * (if anything).
     *
     */
    description?: string;
    /**
     * The name of the function.
     */
    name?: string;
    /**
     * Parameters of the function in JSON Schema.
     */
    parameters?: {
      [key: string]: unknown;
    };
    /**
     * The type of the tool, i.e. `function`.
     */
    type?: 'function';
  }>;
  /**
   * Tracing Configuration
   *
   * Configuration options for tracing. Set to null to disable tracing. Once
   * tracing is enabled for a session, the configuration cannot be modified.
   *
   * `auto` will create a trace for the session with default values for the
   * workflow name, group id, and metadata.
   *
   */
  tracing?:
    | 'auto'
    | {
        /**
         * The group id to attach to this trace to enable filtering and
         * grouping in the traces dashboard.
         *
         */
        group_id?: string;
        /**
         * The arbitrary metadata to attach to this trace to enable
         * filtering in the traces dashboard.
         *
         */
        metadata?: {
          [key: string]: unknown;
        };
        /**
         * The name of the workflow to attach to this trace. This is used to
         * name the trace in the traces dashboard.
         *
         */
        workflow_name?: string;
      };
  /**
   * Configuration for turn detection. Can be set to `null` to turn off. Server
   * VAD means that the model will detect the start and end of speech based on
   * audio volume and respond at the end of user speech.
   *
   */
  turn_detection?: {
    /**
     * Amount of audio to include before the VAD detected speech (in
     * milliseconds). Defaults to 300ms.
     *
     */
    prefix_padding_ms?: number;
    /**
     * Duration of silence to detect speech stop (in milliseconds). Defaults
     * to 500ms. With shorter values the model will respond more quickly,
     * but may jump in on short pauses from the user.
     *
     */
    silence_duration_ms?: number;
    /**
     * Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A
     * higher threshold will require louder audio to activate the model, and
     * thus might perform better in noisy environments.
     *
     */
    threshold?: number;
    /**
     * Type of turn detection, only `server_vad` is currently supported.
     *
     */
    type?: string;
  };
  /**
   * The voice the model uses to respond. Voice cannot be changed during the
   * session once the model has responded with audio at least once. Current
   * voice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `sage`,
   * `shimmer`, and `verse`.
   *
   */
  voice?: VoiceIdsShared;
};

/**
 * Realtime transcription session object configuration.
 */
export type RealtimeTranscriptionSessionCreateRequest = {
  /**
   * Configuration options for the generated client secret.
   *
   */
  client_secret?: {
    /**
     * Configuration for the ephemeral token expiration.
     *
     */
    expires_at?: {
      /**
       * The anchor point for the ephemeral token expiration. Only `created_at` is currently supported.
       *
       */
      anchor?: 'created_at';
      /**
       * The number of seconds from the anchor point to the expiration. Select a value between `10` and `7200`.
       *
       */
      seconds?: number;
    };
  };
  /**
   * The set of items to include in the transcription. Current available items are:
   * - `item.input_audio_transcription.logprobs`
   *
   */
  include?: Array<string>;
  /**
   * The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
   * For `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate,
   * single channel (mono), and little-endian byte order.
   *
   */
  input_audio_format?: 'pcm16' | 'g711_ulaw' | 'g711_alaw';
  /**
   * Configuration for input audio noise reduction. This can be set to `null` to turn off.
   * Noise reduction filters audio added to the input audio buffer before it is sent to VAD and the model.
   * Filtering the audio can improve VAD and turn detection accuracy (reducing false positives) and model performance by improving perception of the input audio.
   *
   */
  input_audio_noise_reduction?: {
    /**
     * Type of noise reduction. `near_field` is for close-talking microphones such as headphones, `far_field` is for far-field microphones such as laptop or conference room microphones.
     *
     */
    type?: 'near_field' | 'far_field';
  };
  /**
   * Configuration for input audio transcription. The client can optionally set the language and prompt for transcription, these offer additional guidance to the transcription service.
   *
   */
  input_audio_transcription?: {
    /**
     * The language of the input audio. Supplying the input language in
     * [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format
     * will improve accuracy and latency.
     *
     */
    language?: string;
    /**
     * The model to use for transcription, current options are `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1`.
     *
     */
    model?: 'gpt-4o-transcribe' | 'gpt-4o-mini-transcribe' | 'whisper-1';
    /**
     * An optional text to guide the model's style or continue a previous audio
     * segment.
     * For `whisper-1`, the [prompt is a list of keywords](https://platform.openai.com/docs/guides/speech-to-text#prompting).
     * For `gpt-4o-transcribe` models, the prompt is a free text string, for example "expect words related to technology".
     *
     */
    prompt?: string;
  };
  /**
   * The set of modalities the model can respond with. To disable audio,
   * set this to ["text"].
   *
   */
  modalities?: unknown;
  /**
   * Configuration for turn detection, ether Server VAD or Semantic VAD. This can be set to `null` to turn off, in which case the client must manually trigger model response.
   * Server VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech.
   * Semantic VAD is more advanced and uses a turn detection model (in conjunction with VAD) to semantically estimate whether the user has finished speaking, then dynamically sets a timeout based on this probability. For example, if user audio trails off with "uhhm", the model will score a low probability of turn end and wait longer for the user to continue speaking. This can be useful for more natural conversations, but may have a higher latency.
   *
   */
  turn_detection?: {
    /**
     * Whether or not to automatically generate a response when a VAD stop event occurs. Not available for transcription sessions.
     *
     */
    create_response?: boolean;
    /**
     * Used only for `semantic_vad` mode. The eagerness of the model to respond. `low` will wait longer for the user to continue speaking, `high` will respond more quickly. `auto` is the default and is equivalent to `medium`.
     *
     */
    eagerness?: 'low' | 'medium' | 'high' | 'auto';
    /**
     * Whether or not to automatically interrupt any ongoing response with output to the default
     * conversation (i.e. `conversation` of `auto`) when a VAD start event occurs. Not available for transcription sessions.
     *
     */
    interrupt_response?: boolean;
    /**
     * Used only for `server_vad` mode. Amount of audio to include before the VAD detected speech (in
     * milliseconds). Defaults to 300ms.
     *
     */
    prefix_padding_ms?: number;
    /**
     * Used only for `server_vad` mode. Duration of silence to detect speech stop (in milliseconds). Defaults
     * to 500ms. With shorter values the model will respond more quickly,
     * but may jump in on short pauses from the user.
     *
     */
    silence_duration_ms?: number;
    /**
     * Used only for `server_vad` mode. Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A
     * higher threshold will require louder audio to activate the model, and
     * thus might perform better in noisy environments.
     *
     */
    threshold?: number;
    /**
     * Type of turn detection.
     *
     */
    type?: 'server_vad' | 'semantic_vad';
  };
};

/**
 * A new Realtime transcription session configuration.
 *
 * When a session is created on the server via REST API, the session object
 * also contains an ephemeral key. Default TTL for keys is 10 minutes. This
 * property is not present when a session is updated via the WebSocket API.
 *
 */
export type RealtimeTranscriptionSessionCreateResponse = {
  /**
   * Ephemeral key returned by the API. Only present when the session is
   * created on the server via REST API.
   *
   */
  client_secret: {
    /**
     * Timestamp for when the token expires. Currently, all tokens expire
     * after one minute.
     *
     */
    expires_at: number;
    /**
     * Ephemeral key usable in client environments to authenticate connections
     * to the Realtime API. Use this in client-side environments rather than
     * a standard API token, which should only be used server-side.
     *
     */
    value: string;
  };
  /**
   * The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
   *
   */
  input_audio_format?: string;
  /**
   * Configuration of the transcription model.
   *
   */
  input_audio_transcription?: {
    /**
     * The language of the input audio. Supplying the input language in
     * [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format
     * will improve accuracy and latency.
     *
     */
    language?: string;
    /**
     * The model to use for transcription. Can be `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, or `whisper-1`.
     *
     */
    model?: 'gpt-4o-transcribe' | 'gpt-4o-mini-transcribe' | 'whisper-1';
    /**
     * An optional text to guide the model's style or continue a previous audio
     * segment. The [prompt](https://platform.openai.com/docs/guides/speech-to-text#prompting) should match
     * the audio language.
     *
     */
    prompt?: string;
  };
  /**
   * The set of modalities the model can respond with. To disable audio,
   * set this to ["text"].
   *
   */
  modalities?: unknown;
  /**
   * Configuration for turn detection. Can be set to `null` to turn off. Server
   * VAD means that the model will detect the start and end of speech based on
   * audio volume and respond at the end of user speech.
   *
   */
  turn_detection?: {
    /**
     * Amount of audio to include before the VAD detected speech (in
     * milliseconds). Defaults to 300ms.
     *
     */
    prefix_padding_ms?: number;
    /**
     * Duration of silence to detect speech stop (in milliseconds). Defaults
     * to 500ms. With shorter values the model will respond more quickly,
     * but may jump in on short pauses from the user.
     *
     */
    silence_duration_ms?: number;
    /**
     * Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A
     * higher threshold will require louder audio to activate the model, and
     * thus might perform better in noisy environments.
     *
     */
    threshold?: number;
    /**
     * Type of turn detection, only `server_vad` is currently supported.
     *
     */
    type?: string;
  };
};

/**
 * Reasoning
 *
 * **gpt-5 and o-series models only**
 *
 * Configuration options for
 * [reasoning models](https://platform.openai.com/docs/guides/reasoning).
 *
 */
export type Reasoning = {
  effort?: ReasoningEffort;
  /**
   * **Deprecated:** use `summary` instead.
   *
   * A summary of the reasoning performed by the model. This can be
   * useful for debugging and understanding the model's reasoning process.
   * One of `auto`, `concise`, or `detailed`.
   *
   *
   * @deprecated
   */
  generate_summary?: 'auto' | 'concise' | 'detailed';
  /**
   * A summary of the reasoning performed by the model. This can be
   * useful for debugging and understanding the model's reasoning process.
   * One of `auto`, `concise`, or `detailed`.
   *
   */
  summary?: 'auto' | 'concise' | 'detailed';
};

/**
 * Constrains effort on reasoning for
 * [reasoning models](https://platform.openai.com/docs/guides/reasoning).
 * Currently supported values are `minimal`, `low`, `medium`, and `high`. Reducing
 * reasoning effort can result in faster responses and fewer tokens used
 * on reasoning in a response.
 *
 */
export const ReasoningEffort = {
  HIGH: 'high',
  LOW: 'low',
  MEDIUM: 'medium',
  MINIMAL: 'minimal',
} as const;

/**
 * Constrains effort on reasoning for
 * [reasoning models](https://platform.openai.com/docs/guides/reasoning).
 * Currently supported values are `minimal`, `low`, `medium`, and `high`. Reducing
 * reasoning effort can result in faster responses and fewer tokens used
 * on reasoning in a response.
 *
 */
export type ReasoningEffort =
  (typeof ReasoningEffort)[keyof typeof ReasoningEffort];

/**
 * Reasoning
 *
 * A description of the chain of thought used by a reasoning model while generating
 * a response. Be sure to include these items in your `input` to the Responses API
 * for subsequent turns of a conversation if you are manually
 * [managing context](https://platform.openai.com/docs/guides/conversation-state).
 *
 */
export type ReasoningItem = {
  /**
   * Reasoning text content.
   *
   */
  content?: Array<{
    /**
     * Reasoning text output from the model.
     *
     */
    text: string;
    /**
     * The type of the object. Always `reasoning_text`.
     *
     */
    type: 'reasoning_text';
  }>;
  /**
   * The encrypted content of the reasoning item - populated when a response is
   * generated with `reasoning.encrypted_content` in the `include` parameter.
   *
   */
  encrypted_content?: string;
  /**
   * The unique identifier of the reasoning content.
   *
   */
  id: string;
  /**
   * The status of the item. One of `in_progress`, `completed`, or
   * `incomplete`. Populated when items are returned via API.
   *
   */
  status?: 'in_progress' | 'completed' | 'incomplete';
  /**
   * Reasoning summary content.
   *
   */
  summary: Array<{
    /**
     * A summary of the reasoning output from the model so far.
     *
     */
    text: string;
    /**
     * The type of the object. Always `summary_text`.
     *
     */
    type: 'summary_text';
  }>;
  /**
   * The type of the object. Always `reasoning`.
   *
   */
  type: 'reasoning';
};

/**
 * The response object
 */
export type Response = ModelResponseProperties &
  ResponseProperties & {
    /**
     * Unix timestamp (in seconds) of when this Response was created.
     *
     */
    created_at: number;
    error: ResponseError;
    /**
     * Unique identifier for this Response.
     *
     */
    id: string;
    /**
     * Details about why the response is incomplete.
     *
     */
    incomplete_details: {
      /**
       * The reason why the response is incomplete.
       */
      reason?: 'max_output_tokens' | 'content_filter';
    };
    /**
     * A system (or developer) message inserted into the model's context.
     *
     * When using along with `previous_response_id`, the instructions from a previous
     * response will not be carried over to the next response. This makes it simple
     * to swap out system (or developer) messages in new responses.
     *
     */
    instructions: string | Array<InputItem>;
    /**
     * The object type of this resource - always set to `response`.
     *
     */
    object: 'response';
    /**
     * An array of content items generated by the model.
     *
     * - The length and order of items in the `output` array is dependent
     * on the model's response.
     * - Rather than accessing the first item in the `output` array and
     * assuming it's an `assistant` message with the content generated by
     * the model, you might consider using the `output_text` property where
     * supported in SDKs.
     *
     */
    output: Array<OutputItem>;
    /**
     * SDK-only convenience property that contains the aggregated text output
     * from all `output_text` items in the `output` array, if any are present.
     * Supported in the Python and JavaScript SDKs.
     *
     */
    output_text?: string;
    /**
     * Whether to allow the model to run tool calls in parallel.
     *
     */
    parallel_tool_calls: boolean;
    /**
     * The status of the response generation. One of `completed`, `failed`,
     * `in_progress`, `cancelled`, `queued`, or `incomplete`.
     *
     */
    status?:
      | 'completed'
      | 'failed'
      | 'in_progress'
      | 'cancelled'
      | 'queued'
      | 'incomplete';
    usage?: ResponseUsage;
  };

/**
 * Emitted when there is a partial audio response.
 */
export type ResponseAudioDeltaEvent = {
  /**
   * A chunk of Base64 encoded response audio bytes.
   *
   */
  delta: string;
  /**
   * A sequence number for this chunk of the stream response.
   *
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.audio.delta`.
   *
   */
  type: 'response.audio.delta';
};

/**
 * Emitted when the audio response is complete.
 */
export type ResponseAudioDoneEvent = {
  /**
   * The sequence number of the delta.
   *
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.audio.done`.
   *
   */
  type: 'response.audio.done';
};

/**
 * Emitted when there is a partial transcript of audio.
 */
export type ResponseAudioTranscriptDeltaEvent = {
  /**
   * The partial transcript of the audio response.
   *
   */
  delta: string;
  /**
   * The sequence number of this event.
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.audio.transcript.delta`.
   *
   */
  type: 'response.audio.transcript.delta';
};

/**
 * Emitted when the full audio transcript is completed.
 */
export type ResponseAudioTranscriptDoneEvent = {
  /**
   * The sequence number of this event.
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.audio.transcript.done`.
   *
   */
  type: 'response.audio.transcript.done';
};

/**
 * Emitted when a partial code snippet is streamed by the code interpreter.
 */
export type ResponseCodeInterpreterCallCodeDeltaEvent = {
  /**
   * The partial code snippet being streamed by the code interpreter.
   */
  delta: string;
  /**
   * The unique identifier of the code interpreter tool call item.
   */
  item_id: string;
  /**
   * The index of the output item in the response for which the code is being streamed.
   */
  output_index: number;
  /**
   * The sequence number of this event, used to order streaming events.
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.code_interpreter_call_code.delta`.
   */
  type: 'response.code_interpreter_call_code.delta';
};

/**
 * Emitted when the code snippet is finalized by the code interpreter.
 */
export type ResponseCodeInterpreterCallCodeDoneEvent = {
  /**
   * The final code snippet output by the code interpreter.
   */
  code: string;
  /**
   * The unique identifier of the code interpreter tool call item.
   */
  item_id: string;
  /**
   * The index of the output item in the response for which the code is finalized.
   */
  output_index: number;
  /**
   * The sequence number of this event, used to order streaming events.
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.code_interpreter_call_code.done`.
   */
  type: 'response.code_interpreter_call_code.done';
};

/**
 * Emitted when the code interpreter call is completed.
 */
export type ResponseCodeInterpreterCallCompletedEvent = {
  /**
   * The unique identifier of the code interpreter tool call item.
   */
  item_id: string;
  /**
   * The index of the output item in the response for which the code interpreter call is completed.
   */
  output_index: number;
  /**
   * The sequence number of this event, used to order streaming events.
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.code_interpreter_call.completed`.
   */
  type: 'response.code_interpreter_call.completed';
};

/**
 * Emitted when a code interpreter call is in progress.
 */
export type ResponseCodeInterpreterCallInProgressEvent = {
  /**
   * The unique identifier of the code interpreter tool call item.
   */
  item_id: string;
  /**
   * The index of the output item in the response for which the code interpreter call is in progress.
   */
  output_index: number;
  /**
   * The sequence number of this event, used to order streaming events.
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.code_interpreter_call.in_progress`.
   */
  type: 'response.code_interpreter_call.in_progress';
};

/**
 * Emitted when the code interpreter is actively interpreting the code snippet.
 */
export type ResponseCodeInterpreterCallInterpretingEvent = {
  /**
   * The unique identifier of the code interpreter tool call item.
   */
  item_id: string;
  /**
   * The index of the output item in the response for which the code interpreter is interpreting code.
   */
  output_index: number;
  /**
   * The sequence number of this event, used to order streaming events.
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.code_interpreter_call.interpreting`.
   */
  type: 'response.code_interpreter_call.interpreting';
};

/**
 * Emitted when the model response is complete.
 */
export type ResponseCompletedEvent = {
  /**
   * Properties of the completed response.
   *
   */
  response: Response;
  /**
   * The sequence number for this event.
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.completed`.
   *
   */
  type: 'response.completed';
};

/**
 * Emitted when a new content part is added.
 */
export type ResponseContentPartAddedEvent = {
  /**
   * The index of the content part that was added.
   *
   */
  content_index: number;
  /**
   * The ID of the output item that the content part was added to.
   *
   */
  item_id: string;
  /**
   * The index of the output item that the content part was added to.
   *
   */
  output_index: number;
  /**
   * The content part that was added.
   *
   */
  part: OutputContent;
  /**
   * The sequence number of this event.
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.content_part.added`.
   *
   */
  type: 'response.content_part.added';
};

/**
 * Emitted when a content part is done.
 */
export type ResponseContentPartDoneEvent = {
  /**
   * The index of the content part that is done.
   *
   */
  content_index: number;
  /**
   * The ID of the output item that the content part was added to.
   *
   */
  item_id: string;
  /**
   * The index of the output item that the content part was added to.
   *
   */
  output_index: number;
  /**
   * The content part that is done.
   *
   */
  part: OutputContent;
  /**
   * The sequence number of this event.
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.content_part.done`.
   *
   */
  type: 'response.content_part.done';
};

/**
 * An event that is emitted when a response is created.
 *
 */
export type ResponseCreatedEvent = {
  /**
   * The response that was created.
   *
   */
  response: Response;
  /**
   * The sequence number for this event.
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.created`.
   *
   */
  type: 'response.created';
};

/**
 * ResponseCustomToolCallInputDelta
 *
 * Event representing a delta (partial update) to the input of a custom tool call.
 *
 */
export type ResponseCustomToolCallInputDeltaEvent = {
  /**
   * The incremental input data (delta) for the custom tool call.
   */
  delta: string;
  /**
   * Unique identifier for the API item associated with this event.
   */
  item_id: string;
  /**
   * The index of the output this delta applies to.
   */
  output_index: number;
  /**
   * The sequence number of this event.
   */
  sequence_number: number;
  /**
   * The event type identifier.
   */
  type: 'response.custom_tool_call_input.delta';
};

/**
 * ResponseCustomToolCallInputDone
 *
 * Event indicating that input for a custom tool call is complete.
 *
 */
export type ResponseCustomToolCallInputDoneEvent = {
  /**
   * The complete input data for the custom tool call.
   */
  input: string;
  /**
   * Unique identifier for the API item associated with this event.
   */
  item_id: string;
  /**
   * The index of the output this event applies to.
   */
  output_index: number;
  /**
   * The sequence number of this event.
   */
  sequence_number: number;
  /**
   * The event type identifier.
   */
  type: 'response.custom_tool_call_input.done';
};

/**
 * An error object returned when the model fails to generate a Response.
 *
 */
export type ResponseError = {
  code: ResponseErrorCode;
  /**
   * A human-readable description of the error.
   *
   */
  message: string;
};

/**
 * The error code for the response.
 *
 */
export const ResponseErrorCode = {
  EMPTY_IMAGE_FILE: 'empty_image_file',
  FAILED_TO_DOWNLOAD_IMAGE: 'failed_to_download_image',
  IMAGE_CONTENT_POLICY_VIOLATION: 'image_content_policy_violation',
  IMAGE_FILE_NOT_FOUND: 'image_file_not_found',
  IMAGE_FILE_TOO_LARGE: 'image_file_too_large',
  IMAGE_PARSE_ERROR: 'image_parse_error',
  IMAGE_TOO_LARGE: 'image_too_large',
  IMAGE_TOO_SMALL: 'image_too_small',
  INVALID_BASE64_IMAGE: 'invalid_base64_image',
  INVALID_IMAGE: 'invalid_image',
  INVALID_IMAGE_FORMAT: 'invalid_image_format',
  INVALID_IMAGE_MODE: 'invalid_image_mode',
  INVALID_IMAGE_URL: 'invalid_image_url',
  INVALID_PROMPT: 'invalid_prompt',
  RATE_LIMIT_EXCEEDED: 'rate_limit_exceeded',
  SERVER_ERROR: 'server_error',
  UNSUPPORTED_IMAGE_MEDIA_TYPE: 'unsupported_image_media_type',
  VECTOR_STORE_TIMEOUT: 'vector_store_timeout',
} as const;

/**
 * The error code for the response.
 *
 */
export type ResponseErrorCode =
  (typeof ResponseErrorCode)[keyof typeof ResponseErrorCode];

/**
 * Emitted when an error occurs.
 */
export type ResponseErrorEvent = {
  /**
   * The error code.
   *
   */
  code: string;
  /**
   * The error message.
   *
   */
  message: string;
  /**
   * The error parameter.
   *
   */
  param: string;
  /**
   * The sequence number of this event.
   */
  sequence_number: number;
  /**
   * The type of the event. Always `error`.
   *
   */
  type: 'error';
};

/**
 * An event that is emitted when a response fails.
 *
 */
export type ResponseFailedEvent = {
  /**
   * The response that failed.
   *
   */
  response: Response;
  /**
   * The sequence number of this event.
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.failed`.
   *
   */
  type: 'response.failed';
};

/**
 * Emitted when a file search call is completed (results found).
 */
export type ResponseFileSearchCallCompletedEvent = {
  /**
   * The ID of the output item that the file search call is initiated.
   *
   */
  item_id: string;
  /**
   * The index of the output item that the file search call is initiated.
   *
   */
  output_index: number;
  /**
   * The sequence number of this event.
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.file_search_call.completed`.
   *
   */
  type: 'response.file_search_call.completed';
};

/**
 * Emitted when a file search call is initiated.
 */
export type ResponseFileSearchCallInProgressEvent = {
  /**
   * The ID of the output item that the file search call is initiated.
   *
   */
  item_id: string;
  /**
   * The index of the output item that the file search call is initiated.
   *
   */
  output_index: number;
  /**
   * The sequence number of this event.
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.file_search_call.in_progress`.
   *
   */
  type: 'response.file_search_call.in_progress';
};

/**
 * Emitted when a file search is currently searching.
 */
export type ResponseFileSearchCallSearchingEvent = {
  /**
   * The ID of the output item that the file search call is initiated.
   *
   */
  item_id: string;
  /**
   * The index of the output item that the file search call is searching.
   *
   */
  output_index: number;
  /**
   * The sequence number of this event.
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.file_search_call.searching`.
   *
   */
  type: 'response.file_search_call.searching';
};

/**
 * JSON object
 *
 * JSON object response format. An older method of generating JSON responses.
 * Using `json_schema` is recommended for models that support it. Note that the
 * model will not generate JSON without a system or user message instructing it
 * to do so.
 *
 */
export type ResponseFormatJsonObject = {
  /**
   * The type of response format being defined. Always `json_object`.
   */
  type: 'json_object';
};

/**
 * JSON schema
 *
 * JSON Schema response format. Used to generate structured JSON responses.
 * Learn more about [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs).
 *
 */
export type ResponseFormatJsonSchema = {
  /**
   * JSON schema
   *
   * Structured Outputs configuration options, including a JSON Schema.
   *
   */
  json_schema: {
    /**
     * A description of what the response format is for, used by the model to
     * determine how to respond in the format.
     *
     */
    description?: string;
    /**
     * The name of the response format. Must be a-z, A-Z, 0-9, or contain
     * underscores and dashes, with a maximum length of 64.
     *
     */
    name: string;
    schema?: ResponseFormatJsonSchemaSchema;
    /**
     * Whether to enable strict schema adherence when generating the output.
     * If set to true, the model will always follow the exact schema defined
     * in the `schema` field. Only a subset of JSON Schema is supported when
     * `strict` is `true`. To learn more, read the [Structured Outputs
     * guide](https://platform.openai.com/docs/guides/structured-outputs).
     *
     */
    strict?: boolean;
  };
  /**
   * The type of response format being defined. Always `json_schema`.
   */
  type: 'json_schema';
};

/**
 * JSON schema
 *
 * The schema for the response format, described as a JSON Schema object.
 * Learn how to build JSON schemas [here](https://json-schema.org/).
 *
 */
export type ResponseFormatJsonSchemaSchema = {
  [key: string]: unknown;
};

/**
 * Text
 *
 * Default response format. Used to generate text responses.
 *
 */
export type ResponseFormatText = {
  /**
   * The type of response format being defined. Always `text`.
   */
  type: 'text';
};

/**
 * Text grammar
 *
 * A custom grammar for the model to follow when generating text.
 * Learn more in the [custom grammars guide](https://platform.openai.com/docs/guides/custom-grammars).
 *
 */
export type ResponseFormatTextGrammar = {
  /**
   * The custom grammar for the model to follow.
   */
  grammar: string;
  /**
   * The type of response format being defined. Always `grammar`.
   */
  type: 'grammar';
};

/**
 * Python grammar
 *
 * Configure the model to generate valid Python code. See the
 * [custom grammars guide](https://platform.openai.com/docs/guides/custom-grammars) for more details.
 *
 */
export type ResponseFormatTextPython = {
  /**
   * The type of response format being defined. Always `python`.
   */
  type: 'python';
};

/**
 * Emitted when there is a partial function-call arguments delta.
 */
export type ResponseFunctionCallArgumentsDeltaEvent = {
  /**
   * The function-call arguments delta that is added.
   *
   */
  delta: string;
  /**
   * The ID of the output item that the function-call arguments delta is added to.
   *
   */
  item_id: string;
  /**
   * The index of the output item that the function-call arguments delta is added to.
   *
   */
  output_index: number;
  /**
   * The sequence number of this event.
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.function_call_arguments.delta`.
   *
   */
  type: 'response.function_call_arguments.delta';
};

/**
 * Emitted when function-call arguments are finalized.
 */
export type ResponseFunctionCallArgumentsDoneEvent = {
  /**
   * The function-call arguments.
   */
  arguments: string;
  /**
   * The ID of the item.
   */
  item_id: string;
  /**
   * The index of the output item.
   */
  output_index: number;
  /**
   * The sequence number of this event.
   */
  sequence_number: number;
  type: 'response.function_call_arguments.done';
};

/**
 * ResponseImageGenCallCompletedEvent
 *
 * Emitted when an image generation tool call has completed and the final image is available.
 *
 */
export type ResponseImageGenCallCompletedEvent = {
  /**
   * The unique identifier of the image generation item being processed.
   */
  item_id: string;
  /**
   * The index of the output item in the response's output array.
   */
  output_index: number;
  /**
   * The sequence number of this event.
   */
  sequence_number: number;
  /**
   * The type of the event. Always 'response.image_generation_call.completed'.
   */
  type: 'response.image_generation_call.completed';
};

/**
 * ResponseImageGenCallGeneratingEvent
 *
 * Emitted when an image generation tool call is actively generating an image (intermediate state).
 *
 */
export type ResponseImageGenCallGeneratingEvent = {
  /**
   * The unique identifier of the image generation item being processed.
   */
  item_id: string;
  /**
   * The index of the output item in the response's output array.
   */
  output_index: number;
  /**
   * The sequence number of the image generation item being processed.
   */
  sequence_number: number;
  /**
   * The type of the event. Always 'response.image_generation_call.generating'.
   */
  type: 'response.image_generation_call.generating';
};

/**
 * ResponseImageGenCallInProgressEvent
 *
 * Emitted when an image generation tool call is in progress.
 *
 */
export type ResponseImageGenCallInProgressEvent = {
  /**
   * The unique identifier of the image generation item being processed.
   */
  item_id: string;
  /**
   * The index of the output item in the response's output array.
   */
  output_index: number;
  /**
   * The sequence number of the image generation item being processed.
   */
  sequence_number: number;
  /**
   * The type of the event. Always 'response.image_generation_call.in_progress'.
   */
  type: 'response.image_generation_call.in_progress';
};

/**
 * ResponseImageGenCallPartialImageEvent
 *
 * Emitted when a partial image is available during image generation streaming.
 *
 */
export type ResponseImageGenCallPartialImageEvent = {
  /**
   * The unique identifier of the image generation item being processed.
   */
  item_id: string;
  /**
   * The index of the output item in the response's output array.
   */
  output_index: number;
  /**
   * Base64-encoded partial image data, suitable for rendering as an image.
   */
  partial_image_b64: string;
  /**
   * 0-based index for the partial image (backend is 1-based, but this is 0-based for the user).
   */
  partial_image_index: number;
  /**
   * The sequence number of the image generation item being processed.
   */
  sequence_number: number;
  /**
   * The type of the event. Always 'response.image_generation_call.partial_image'.
   */
  type: 'response.image_generation_call.partial_image';
};

/**
 * Emitted when the response is in progress.
 */
export type ResponseInProgressEvent = {
  /**
   * The response that is in progress.
   *
   */
  response: Response;
  /**
   * The sequence number of this event.
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.in_progress`.
   *
   */
  type: 'response.in_progress';
};

/**
 * An event that is emitted when a response finishes as incomplete.
 *
 */
export type ResponseIncompleteEvent = {
  /**
   * The response that was incomplete.
   *
   */
  response: Response;
  /**
   * The sequence number of this event.
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.incomplete`.
   *
   */
  type: 'response.incomplete';
};

/**
 * A list of Response items.
 */
export type ResponseItemList = {
  /**
   * A list of items used to generate this response.
   */
  data: Array<ItemResource>;
  /**
   * The ID of the first item in the list.
   */
  first_id: string;
  /**
   * Whether there are more items available.
   */
  has_more: boolean;
  /**
   * The ID of the last item in the list.
   */
  last_id: string;
  /**
   * The type of object returned, must be `list`.
   */
  object: 'list';
};

/**
 * A logprob is the logarithmic probability that the model assigns to producing
 * a particular token at a given position in the sequence. Less-negative (higher)
 * logprob values indicate greater model confidence in that token choice.
 *
 */
export type ResponseLogProb = {
  /**
   * The log probability of this token.
   *
   */
  logprob: number;
  /**
   * A possible text token.
   */
  token: string;
  /**
   * The log probability of the top 20 most likely tokens.
   *
   */
  top_logprobs?: Array<{
    /**
     * The log probability of this token.
     */
    logprob?: number;
    /**
     * A possible text token.
     */
    token?: string;
  }>;
};

/**
 * ResponseMCPCallArgumentsDeltaEvent
 *
 * Emitted when there is a delta (partial update) to the arguments of an MCP tool call.
 *
 */
export type ResponseMcpCallArgumentsDeltaEvent = {
  /**
   * A JSON string containing the partial update to the arguments for the MCP tool call.
   *
   */
  delta: string;
  /**
   * The unique identifier of the MCP tool call item being processed.
   */
  item_id: string;
  /**
   * The index of the output item in the response's output array.
   */
  output_index: number;
  /**
   * The sequence number of this event.
   */
  sequence_number: number;
  /**
   * The type of the event. Always 'response.mcp_call_arguments.delta'.
   */
  type: 'response.mcp_call_arguments.delta';
};

/**
 * ResponseMCPCallArgumentsDoneEvent
 *
 * Emitted when the arguments for an MCP tool call are finalized.
 *
 */
export type ResponseMcpCallArgumentsDoneEvent = {
  /**
   * A JSON string containing the finalized arguments for the MCP tool call.
   *
   */
  arguments: string;
  /**
   * The unique identifier of the MCP tool call item being processed.
   */
  item_id: string;
  /**
   * The index of the output item in the response's output array.
   */
  output_index: number;
  /**
   * The sequence number of this event.
   */
  sequence_number: number;
  /**
   * The type of the event. Always 'response.mcp_call_arguments.done'.
   */
  type: 'response.mcp_call_arguments.done';
};

/**
 * ResponseMCPCallCompletedEvent
 *
 * Emitted when an MCP  tool call has completed successfully.
 *
 */
export type ResponseMcpCallCompletedEvent = {
  /**
   * The ID of the MCP tool call item that completed.
   */
  item_id: string;
  /**
   * The index of the output item that completed.
   */
  output_index: number;
  /**
   * The sequence number of this event.
   */
  sequence_number: number;
  /**
   * The type of the event. Always 'response.mcp_call.completed'.
   */
  type: 'response.mcp_call.completed';
};

/**
 * ResponseMCPCallFailedEvent
 *
 * Emitted when an MCP  tool call has failed.
 *
 */
export type ResponseMcpCallFailedEvent = {
  /**
   * The ID of the MCP tool call item that failed.
   */
  item_id: string;
  /**
   * The index of the output item that failed.
   */
  output_index: number;
  /**
   * The sequence number of this event.
   */
  sequence_number: number;
  /**
   * The type of the event. Always 'response.mcp_call.failed'.
   */
  type: 'response.mcp_call.failed';
};

/**
 * ResponseMCPCallInProgressEvent
 *
 * Emitted when an MCP  tool call is in progress.
 *
 */
export type ResponseMcpCallInProgressEvent = {
  /**
   * The unique identifier of the MCP tool call item being processed.
   */
  item_id: string;
  /**
   * The index of the output item in the response's output array.
   */
  output_index: number;
  /**
   * The sequence number of this event.
   */
  sequence_number: number;
  /**
   * The type of the event. Always 'response.mcp_call.in_progress'.
   */
  type: 'response.mcp_call.in_progress';
};

/**
 * ResponseMCPListToolsCompletedEvent
 *
 * Emitted when the list of available MCP tools has been successfully retrieved.
 *
 */
export type ResponseMcpListToolsCompletedEvent = {
  /**
   * The ID of the MCP tool call item that produced this output.
   */
  item_id: string;
  /**
   * The index of the output item that was processed.
   */
  output_index: number;
  /**
   * The sequence number of this event.
   */
  sequence_number: number;
  /**
   * The type of the event. Always 'response.mcp_list_tools.completed'.
   */
  type: 'response.mcp_list_tools.completed';
};

/**
 * ResponseMCPListToolsFailedEvent
 *
 * Emitted when the attempt to list available MCP tools has failed.
 *
 */
export type ResponseMcpListToolsFailedEvent = {
  /**
   * The ID of the MCP tool call item that failed.
   */
  item_id: string;
  /**
   * The index of the output item that failed.
   */
  output_index: number;
  /**
   * The sequence number of this event.
   */
  sequence_number: number;
  /**
   * The type of the event. Always 'response.mcp_list_tools.failed'.
   */
  type: 'response.mcp_list_tools.failed';
};

/**
 * ResponseMCPListToolsInProgressEvent
 *
 * Emitted when the system is in the process of retrieving the list of available MCP tools.
 *
 */
export type ResponseMcpListToolsInProgressEvent = {
  /**
   * The ID of the MCP tool call item that is being processed.
   */
  item_id: string;
  /**
   * The index of the output item that is being processed.
   */
  output_index: number;
  /**
   * The sequence number of this event.
   */
  sequence_number: number;
  /**
   * The type of the event. Always 'response.mcp_list_tools.in_progress'.
   */
  type: 'response.mcp_list_tools.in_progress';
};

/**
 * Output types that you would like the model to generate.
 * Most models are capable of generating text, which is the default:
 *
 * `["text"]`
 *
 * The `gpt-4o-audio-preview` model can also be used to
 * [generate audio](https://platform.openai.com/docs/guides/audio). To request that this model generate
 * both text and audio responses, you can use:
 *
 * `["text", "audio"]`
 *
 */
export type ResponseModalities = Array<'text' | 'audio'>;

/**
 * Emitted when a new output item is added.
 */
export type ResponseOutputItemAddedEvent = {
  /**
   * The output item that was added.
   *
   */
  item: OutputItem;
  /**
   * The index of the output item that was added.
   *
   */
  output_index: number;
  /**
   * The sequence number of this event.
   *
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.output_item.added`.
   *
   */
  type: 'response.output_item.added';
};

/**
 * Emitted when an output item is marked done.
 */
export type ResponseOutputItemDoneEvent = {
  /**
   * The output item that was marked done.
   *
   */
  item: OutputItem;
  /**
   * The index of the output item that was marked done.
   *
   */
  output_index: number;
  /**
   * The sequence number of this event.
   *
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.output_item.done`.
   *
   */
  type: 'response.output_item.done';
};

/**
 * ResponseOutputTextAnnotationAddedEvent
 *
 * Emitted when an annotation is added to output text content.
 *
 */
export type ResponseOutputTextAnnotationAddedEvent = {
  /**
   * The annotation object being added. (See annotation schema for details.)
   */
  annotation: {
    [key: string]: unknown;
  };
  /**
   * The index of the annotation within the content part.
   */
  annotation_index: number;
  /**
   * The index of the content part within the output item.
   */
  content_index: number;
  /**
   * The unique identifier of the item to which the annotation is being added.
   */
  item_id: string;
  /**
   * The index of the output item in the response's output array.
   */
  output_index: number;
  /**
   * The sequence number of this event.
   */
  sequence_number: number;
  /**
   * The type of the event. Always 'response.output_text.annotation.added'.
   */
  type: 'response.output_text.annotation.added';
};

/**
 * Prompt Variables
 *
 * Optional map of values to substitute in for variables in your
 * prompt. The substitution values can either be strings, or other
 * Response input types like images or files.
 *
 */
export type ResponsePromptVariables = {
  [key: string]:
    | string
    | InputTextContent
    | InputImageContent
    | InputFileContent;
};

export type ResponseProperties = {
  /**
   * Whether to run the model response in the background.
   * [Learn more](https://platform.openai.com/docs/guides/background).
   *
   */
  background?: boolean;
  /**
   * An upper bound for the number of tokens that can be generated for a response, including visible output tokens and [reasoning tokens](https://platform.openai.com/docs/guides/reasoning).
   *
   */
  max_output_tokens?: number;
  /**
   * The maximum number of total calls to built-in tools that can be processed in a response. This maximum number applies across all built-in tool calls, not per individual tool. Any further attempts to call a tool by the model will be ignored.
   *
   */
  max_tool_calls?: number;
  /**
   * Model ID used to generate the response, like `gpt-4o` or `o3`. OpenAI
   * offers a wide range of models with different capabilities, performance
   * characteristics, and price points. Refer to the [model guide](https://platform.openai.com/docs/models)
   * to browse and compare available models.
   *
   */
  model?: ModelIdsResponses;
  /**
   * The unique ID of the previous response to the model. Use this to
   * create multi-turn conversations. Learn more about
   * [conversation state](https://platform.openai.com/docs/guides/conversation-state).
   *
   */
  previous_response_id?: string;
  prompt?: Prompt;
  reasoning?: Reasoning;
  /**
   * Configuration options for a text response from the model. Can be plain
   * text or structured JSON data. Learn more:
   * - [Text inputs and outputs](https://platform.openai.com/docs/guides/text)
   * - [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs)
   *
   */
  text?: {
    format?: TextResponseFormatConfiguration;
    verbosity?: Verbosity;
  };
  /**
   * How the model should select which tool (or tools) to use when generating
   * a response. See the `tools` parameter to see how to specify which tools
   * the model can call.
   *
   */
  tool_choice?:
    | ToolChoiceOptions
    | ToolChoiceAllowed
    | ToolChoiceTypes
    | ToolChoiceFunction
    | ToolChoiceMcp
    | ToolChoiceCustom;
  /**
   * An array of tools the model may call while generating a response. You
   * can specify which tool to use by setting the `tool_choice` parameter.
   *
   * The two categories of tools you can provide the model are:
   *
   * - **Built-in tools**: Tools that are provided by OpenAI that extend the
   * model's capabilities, like [web search](https://platform.openai.com/docs/guides/tools-web-search)
   * or [file search](https://platform.openai.com/docs/guides/tools-file-search). Learn more about
   * [built-in tools](https://platform.openai.com/docs/guides/tools).
   * - **Function calls (custom tools)**: Functions that are defined by you,
   * enabling the model to call your own code with strongly typed arguments
   * and outputs. Learn more about
   * [function calling](https://platform.openai.com/docs/guides/function-calling). You can also use
   * custom tools to call your own code.
   *
   */
  tools?: Array<Tool>;
  /**
   * The truncation strategy to use for the model response.
   * - `auto`: If the context of this response and previous ones exceeds
   * the model's context window size, the model will truncate the
   * response to fit the context window by dropping input items in the
   * middle of the conversation.
   * - `disabled` (default): If a model response will exceed the context window
   * size for a model, the request will fail with a 400 error.
   *
   */
  truncation?: 'auto' | 'disabled';
};

/**
 * ResponseQueuedEvent
 *
 * Emitted when a response is queued and waiting to be processed.
 *
 */
export type ResponseQueuedEvent = {
  /**
   * The full response object that is queued.
   */
  response: Response;
  /**
   * The sequence number for this event.
   */
  sequence_number: number;
  /**
   * The type of the event. Always 'response.queued'.
   */
  type: 'response.queued';
};

/**
 * Emitted when a new reasoning summary part is added.
 */
export type ResponseReasoningSummaryPartAddedEvent = {
  /**
   * The ID of the item this summary part is associated with.
   *
   */
  item_id: string;
  /**
   * The index of the output item this summary part is associated with.
   *
   */
  output_index: number;
  /**
   * The summary part that was added.
   *
   */
  part: {
    /**
     * The text of the summary part.
     */
    text: string;
    /**
     * The type of the summary part. Always `summary_text`.
     */
    type: 'summary_text';
  };
  /**
   * The sequence number of this event.
   *
   */
  sequence_number: number;
  /**
   * The index of the summary part within the reasoning summary.
   *
   */
  summary_index: number;
  /**
   * The type of the event. Always `response.reasoning_summary_part.added`.
   *
   */
  type: 'response.reasoning_summary_part.added';
};

/**
 * Emitted when a reasoning summary part is completed.
 */
export type ResponseReasoningSummaryPartDoneEvent = {
  /**
   * The ID of the item this summary part is associated with.
   *
   */
  item_id: string;
  /**
   * The index of the output item this summary part is associated with.
   *
   */
  output_index: number;
  /**
   * The completed summary part.
   *
   */
  part: {
    /**
     * The text of the summary part.
     */
    text: string;
    /**
     * The type of the summary part. Always `summary_text`.
     */
    type: 'summary_text';
  };
  /**
   * The sequence number of this event.
   *
   */
  sequence_number: number;
  /**
   * The index of the summary part within the reasoning summary.
   *
   */
  summary_index: number;
  /**
   * The type of the event. Always `response.reasoning_summary_part.done`.
   *
   */
  type: 'response.reasoning_summary_part.done';
};

/**
 * Emitted when a delta is added to a reasoning summary text.
 */
export type ResponseReasoningSummaryTextDeltaEvent = {
  /**
   * The text delta that was added to the summary.
   *
   */
  delta: string;
  /**
   * The ID of the item this summary text delta is associated with.
   *
   */
  item_id: string;
  /**
   * The index of the output item this summary text delta is associated with.
   *
   */
  output_index: number;
  /**
   * The sequence number of this event.
   *
   */
  sequence_number: number;
  /**
   * The index of the summary part within the reasoning summary.
   *
   */
  summary_index: number;
  /**
   * The type of the event. Always `response.reasoning_summary_text.delta`.
   *
   */
  type: 'response.reasoning_summary_text.delta';
};

/**
 * Emitted when a reasoning summary text is completed.
 */
export type ResponseReasoningSummaryTextDoneEvent = {
  /**
   * The ID of the item this summary text is associated with.
   *
   */
  item_id: string;
  /**
   * The index of the output item this summary text is associated with.
   *
   */
  output_index: number;
  /**
   * The sequence number of this event.
   *
   */
  sequence_number: number;
  /**
   * The index of the summary part within the reasoning summary.
   *
   */
  summary_index: number;
  /**
   * The full text of the completed reasoning summary.
   *
   */
  text: string;
  /**
   * The type of the event. Always `response.reasoning_summary_text.done`.
   *
   */
  type: 'response.reasoning_summary_text.done';
};

/**
 * Emitted when a delta is added to a reasoning text.
 */
export type ResponseReasoningTextDeltaEvent = {
  /**
   * The index of the reasoning content part this delta is associated with.
   *
   */
  content_index: number;
  /**
   * The text delta that was added to the reasoning content.
   *
   */
  delta: string;
  /**
   * The ID of the item this reasoning text delta is associated with.
   *
   */
  item_id: string;
  /**
   * The index of the output item this reasoning text delta is associated with.
   *
   */
  output_index: number;
  /**
   * The sequence number of this event.
   *
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.reasoning_text.delta`.
   *
   */
  type: 'response.reasoning_text.delta';
};

/**
 * Emitted when a reasoning text is completed.
 */
export type ResponseReasoningTextDoneEvent = {
  /**
   * The index of the reasoning content part.
   *
   */
  content_index: number;
  /**
   * The ID of the item this reasoning text is associated with.
   *
   */
  item_id: string;
  /**
   * The index of the output item this reasoning text is associated with.
   *
   */
  output_index: number;
  /**
   * The sequence number of this event.
   *
   */
  sequence_number: number;
  /**
   * The full text of the completed reasoning content.
   *
   */
  text: string;
  /**
   * The type of the event. Always `response.reasoning_text.done`.
   *
   */
  type: 'response.reasoning_text.done';
};

/**
 * Emitted when there is a partial refusal text.
 */
export type ResponseRefusalDeltaEvent = {
  /**
   * The index of the content part that the refusal text is added to.
   *
   */
  content_index: number;
  /**
   * The refusal text that is added.
   *
   */
  delta: string;
  /**
   * The ID of the output item that the refusal text is added to.
   *
   */
  item_id: string;
  /**
   * The index of the output item that the refusal text is added to.
   *
   */
  output_index: number;
  /**
   * The sequence number of this event.
   *
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.refusal.delta`.
   *
   */
  type: 'response.refusal.delta';
};

/**
 * Emitted when refusal text is finalized.
 */
export type ResponseRefusalDoneEvent = {
  /**
   * The index of the content part that the refusal text is finalized.
   *
   */
  content_index: number;
  /**
   * The ID of the output item that the refusal text is finalized.
   *
   */
  item_id: string;
  /**
   * The index of the output item that the refusal text is finalized.
   *
   */
  output_index: number;
  /**
   * The refusal text that is finalized.
   *
   */
  refusal: string;
  /**
   * The sequence number of this event.
   *
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.refusal.done`.
   *
   */
  type: 'response.refusal.done';
};

export type ResponseStreamEvent =
  | ({
      type?: 'ResponseAudioDeltaEvent';
    } & ResponseAudioDeltaEvent)
  | ({
      type?: 'ResponseAudioDoneEvent';
    } & ResponseAudioDoneEvent)
  | ({
      type?: 'ResponseAudioTranscriptDeltaEvent';
    } & ResponseAudioTranscriptDeltaEvent)
  | ({
      type?: 'ResponseAudioTranscriptDoneEvent';
    } & ResponseAudioTranscriptDoneEvent)
  | ({
      type?: 'ResponseCodeInterpreterCallCodeDeltaEvent';
    } & ResponseCodeInterpreterCallCodeDeltaEvent)
  | ({
      type?: 'ResponseCodeInterpreterCallCodeDoneEvent';
    } & ResponseCodeInterpreterCallCodeDoneEvent)
  | ({
      type?: 'ResponseCodeInterpreterCallCompletedEvent';
    } & ResponseCodeInterpreterCallCompletedEvent)
  | ({
      type?: 'ResponseCodeInterpreterCallInProgressEvent';
    } & ResponseCodeInterpreterCallInProgressEvent)
  | ({
      type?: 'ResponseCodeInterpreterCallInterpretingEvent';
    } & ResponseCodeInterpreterCallInterpretingEvent)
  | ({
      type?: 'ResponseCompletedEvent';
    } & ResponseCompletedEvent)
  | ({
      type?: 'ResponseContentPartAddedEvent';
    } & ResponseContentPartAddedEvent)
  | ({
      type?: 'ResponseContentPartDoneEvent';
    } & ResponseContentPartDoneEvent)
  | ({
      type?: 'ResponseCreatedEvent';
    } & ResponseCreatedEvent)
  | ({
      type?: 'ResponseErrorEvent';
    } & ResponseErrorEvent)
  | ({
      type?: 'ResponseFileSearchCallCompletedEvent';
    } & ResponseFileSearchCallCompletedEvent)
  | ({
      type?: 'ResponseFileSearchCallInProgressEvent';
    } & ResponseFileSearchCallInProgressEvent)
  | ({
      type?: 'ResponseFileSearchCallSearchingEvent';
    } & ResponseFileSearchCallSearchingEvent)
  | ({
      type?: 'ResponseFunctionCallArgumentsDeltaEvent';
    } & ResponseFunctionCallArgumentsDeltaEvent)
  | ({
      type?: 'ResponseFunctionCallArgumentsDoneEvent';
    } & ResponseFunctionCallArgumentsDoneEvent)
  | ({
      type?: 'ResponseInProgressEvent';
    } & ResponseInProgressEvent)
  | ({
      type?: 'ResponseFailedEvent';
    } & ResponseFailedEvent)
  | ({
      type?: 'ResponseIncompleteEvent';
    } & ResponseIncompleteEvent)
  | ({
      type?: 'ResponseOutputItemAddedEvent';
    } & ResponseOutputItemAddedEvent)
  | ({
      type?: 'ResponseOutputItemDoneEvent';
    } & ResponseOutputItemDoneEvent)
  | ({
      type?: 'ResponseReasoningSummaryPartAddedEvent';
    } & ResponseReasoningSummaryPartAddedEvent)
  | ({
      type?: 'ResponseReasoningSummaryPartDoneEvent';
    } & ResponseReasoningSummaryPartDoneEvent)
  | ({
      type?: 'ResponseReasoningSummaryTextDeltaEvent';
    } & ResponseReasoningSummaryTextDeltaEvent)
  | ({
      type?: 'ResponseReasoningSummaryTextDoneEvent';
    } & ResponseReasoningSummaryTextDoneEvent)
  | ({
      type?: 'ResponseReasoningTextDeltaEvent';
    } & ResponseReasoningTextDeltaEvent)
  | ({
      type?: 'ResponseReasoningTextDoneEvent';
    } & ResponseReasoningTextDoneEvent)
  | ({
      type?: 'ResponseRefusalDeltaEvent';
    } & ResponseRefusalDeltaEvent)
  | ({
      type?: 'ResponseRefusalDoneEvent';
    } & ResponseRefusalDoneEvent)
  | ({
      type?: 'ResponseTextDeltaEvent';
    } & ResponseTextDeltaEvent)
  | ({
      type?: 'ResponseTextDoneEvent';
    } & ResponseTextDoneEvent)
  | ({
      type?: 'ResponseWebSearchCallCompletedEvent';
    } & ResponseWebSearchCallCompletedEvent)
  | ({
      type?: 'ResponseWebSearchCallInProgressEvent';
    } & ResponseWebSearchCallInProgressEvent)
  | ({
      type?: 'ResponseWebSearchCallSearchingEvent';
    } & ResponseWebSearchCallSearchingEvent)
  | ({
      type?: 'ResponseImageGenCallCompletedEvent';
    } & ResponseImageGenCallCompletedEvent)
  | ({
      type?: 'ResponseImageGenCallGeneratingEvent';
    } & ResponseImageGenCallGeneratingEvent)
  | ({
      type?: 'ResponseImageGenCallInProgressEvent';
    } & ResponseImageGenCallInProgressEvent)
  | ({
      type?: 'ResponseImageGenCallPartialImageEvent';
    } & ResponseImageGenCallPartialImageEvent)
  | ({
      type?: 'ResponseMCPCallArgumentsDeltaEvent';
    } & ResponseMcpCallArgumentsDeltaEvent)
  | ({
      type?: 'ResponseMCPCallArgumentsDoneEvent';
    } & ResponseMcpCallArgumentsDoneEvent)
  | ({
      type?: 'ResponseMCPCallCompletedEvent';
    } & ResponseMcpCallCompletedEvent)
  | ({
      type?: 'ResponseMCPCallFailedEvent';
    } & ResponseMcpCallFailedEvent)
  | ({
      type?: 'ResponseMCPCallInProgressEvent';
    } & ResponseMcpCallInProgressEvent)
  | ({
      type?: 'ResponseMCPListToolsCompletedEvent';
    } & ResponseMcpListToolsCompletedEvent)
  | ({
      type?: 'ResponseMCPListToolsFailedEvent';
    } & ResponseMcpListToolsFailedEvent)
  | ({
      type?: 'ResponseMCPListToolsInProgressEvent';
    } & ResponseMcpListToolsInProgressEvent)
  | ({
      type?: 'ResponseOutputTextAnnotationAddedEvent';
    } & ResponseOutputTextAnnotationAddedEvent)
  | ({
      type?: 'ResponseQueuedEvent';
    } & ResponseQueuedEvent)
  | ({
      type?: 'ResponseCustomToolCallInputDeltaEvent';
    } & ResponseCustomToolCallInputDeltaEvent)
  | ({
      type?: 'ResponseCustomToolCallInputDoneEvent';
    } & ResponseCustomToolCallInputDoneEvent);

/**
 * Options for streaming responses. Only set this when you set `stream: true`.
 *
 */
export type ResponseStreamOptions = {
  /**
   * When true, stream obfuscation will be enabled. Stream obfuscation adds
   * random characters to an `obfuscation` field on streaming delta events to
   * normalize payload sizes as a mitigation to certain side-channel attacks.
   * These obfuscation fields are included by default, but add a small amount
   * of overhead to the data stream. You can set `include_obfuscation` to
   * false to optimize for bandwidth if you trust the network links between
   * your application and the OpenAI API.
   *
   */
  include_obfuscation?: boolean;
};

/**
 * Emitted when there is an additional text delta.
 */
export type ResponseTextDeltaEvent = {
  /**
   * The index of the content part that the text delta was added to.
   *
   */
  content_index: number;
  /**
   * The text delta that was added.
   *
   */
  delta: string;
  /**
   * The ID of the output item that the text delta was added to.
   *
   */
  item_id: string;
  /**
   * The log probabilities of the tokens in the delta.
   *
   */
  logprobs: Array<ResponseLogProb>;
  /**
   * The index of the output item that the text delta was added to.
   *
   */
  output_index: number;
  /**
   * The sequence number for this event.
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.output_text.delta`.
   *
   */
  type: 'response.output_text.delta';
};

/**
 * Emitted when text content is finalized.
 */
export type ResponseTextDoneEvent = {
  /**
   * The index of the content part that the text content is finalized.
   *
   */
  content_index: number;
  /**
   * The ID of the output item that the text content is finalized.
   *
   */
  item_id: string;
  /**
   * The log probabilities of the tokens in the delta.
   *
   */
  logprobs: Array<ResponseLogProb>;
  /**
   * The index of the output item that the text content is finalized.
   *
   */
  output_index: number;
  /**
   * The sequence number for this event.
   */
  sequence_number: number;
  /**
   * The text content that is finalized.
   *
   */
  text: string;
  /**
   * The type of the event. Always `response.output_text.done`.
   *
   */
  type: 'response.output_text.done';
};

/**
 * Represents token usage details including input tokens, output tokens,
 * a breakdown of output tokens, and the total tokens used.
 *
 */
export type ResponseUsage = {
  /**
   * The number of input tokens.
   */
  input_tokens: number;
  /**
   * A detailed breakdown of the input tokens.
   */
  input_tokens_details: {
    /**
     * The number of tokens that were retrieved from the cache.
     * [More on prompt caching](https://platform.openai.com/docs/guides/prompt-caching).
     *
     */
    cached_tokens: number;
  };
  /**
   * The number of output tokens.
   */
  output_tokens: number;
  /**
   * A detailed breakdown of the output tokens.
   */
  output_tokens_details: {
    /**
     * The number of reasoning tokens.
     */
    reasoning_tokens: number;
  };
  /**
   * The total number of tokens used.
   */
  total_tokens: number;
};

/**
 * Emitted when a web search call is completed.
 */
export type ResponseWebSearchCallCompletedEvent = {
  /**
   * Unique ID for the output item associated with the web search call.
   *
   */
  item_id: string;
  /**
   * The index of the output item that the web search call is associated with.
   *
   */
  output_index: number;
  /**
   * The sequence number of the web search call being processed.
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.web_search_call.completed`.
   *
   */
  type: 'response.web_search_call.completed';
};

/**
 * Emitted when a web search call is initiated.
 */
export type ResponseWebSearchCallInProgressEvent = {
  /**
   * Unique ID for the output item associated with the web search call.
   *
   */
  item_id: string;
  /**
   * The index of the output item that the web search call is associated with.
   *
   */
  output_index: number;
  /**
   * The sequence number of the web search call being processed.
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.web_search_call.in_progress`.
   *
   */
  type: 'response.web_search_call.in_progress';
};

/**
 * Emitted when a web search call is executing.
 */
export type ResponseWebSearchCallSearchingEvent = {
  /**
   * Unique ID for the output item associated with the web search call.
   *
   */
  item_id: string;
  /**
   * The index of the output item that the web search call is associated with.
   *
   */
  output_index: number;
  /**
   * The sequence number of the web search call being processed.
   */
  sequence_number: number;
  /**
   * The type of the event. Always `response.web_search_call.searching`.
   *
   */
  type: 'response.web_search_call.searching';
};

/**
 * Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).
 */
export type RunCompletionUsage = {
  /**
   * Number of completion tokens used over the course of the run.
   */
  completion_tokens: number;
  /**
   * Number of prompt tokens used over the course of the run.
   */
  prompt_tokens: number;
  /**
   * Total number of tokens used (prompt + completion).
   */
  total_tokens: number;
};

/**
 * RunGraderRequest
 */
export type RunGraderRequest = {
  /**
   * The grader used for the fine-tuning job.
   */
  grader:
    | ({
        type?: 'GraderStringCheck';
      } & GraderStringCheck)
    | ({
        type?: 'GraderTextSimilarity';
      } & GraderTextSimilarity)
    | ({
        type?: 'GraderPython';
      } & GraderPython)
    | ({
        type?: 'GraderScoreModel';
      } & GraderScoreModel)
    | ({
        type?: 'GraderMulti';
      } & GraderMulti);
  /**
   * The dataset item provided to the grader. This will be used to populate
   * the `item` namespace. See [the guide](https://platform.openai.com/docs/guides/graders) for more details.
   *
   */
  item?: {
    [key: string]: unknown;
  };
  /**
   * The model sample to be evaluated. This value will be used to populate
   * the `sample` namespace. See [the guide](https://platform.openai.com/docs/guides/graders) for more details.
   * The `output_json` variable will be populated if the model sample is a
   * valid JSON string.
   *
   */
  model_sample: string;
};

export type RunGraderResponse = {
  metadata: {
    errors: {
      formula_parse_error: boolean;
      invalid_variable_error: boolean;
      model_grader_parse_error: boolean;
      model_grader_refusal_error: boolean;
      model_grader_server_error: boolean;
      model_grader_server_error_details: string;
      other_error: boolean;
      python_grader_runtime_error: boolean;
      python_grader_runtime_error_details: string;
      python_grader_server_error: boolean;
      python_grader_server_error_type: string;
      sample_parse_error: boolean;
      truncated_observation_error: boolean;
      unresponsive_reward_error: boolean;
    };
    execution_time: number;
    name: string;
    sampled_model_name: string;
    scores: {
      [key: string]: unknown;
    };
    token_usage: number;
    type: string;
  };
  model_grader_token_usage_per_model: {
    [key: string]: unknown;
  };
  reward: number;
  sub_rewards: {
    [key: string]: unknown;
  };
};

/**
 * A run on a thread
 *
 * Represents an execution run on a [thread](https://platform.openai.com/docs/api-reference/threads).
 */
export type RunObject = {
  /**
   * The ID of the [assistant](https://platform.openai.com/docs/api-reference/assistants) used for execution of this run.
   */
  assistant_id: string;
  /**
   * The Unix timestamp (in seconds) for when the run was cancelled.
   */
  cancelled_at: number;
  /**
   * The Unix timestamp (in seconds) for when the run was completed.
   */
  completed_at: number;
  /**
   * The Unix timestamp (in seconds) for when the run was created.
   */
  created_at: number;
  /**
   * The Unix timestamp (in seconds) for when the run will expire.
   */
  expires_at: number;
  /**
   * The Unix timestamp (in seconds) for when the run failed.
   */
  failed_at: number;
  /**
   * The identifier, which can be referenced in API endpoints.
   */
  id: string;
  /**
   * Details on why the run is incomplete. Will be `null` if the run is not incomplete.
   */
  incomplete_details: {
    /**
     * The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.
     */
    reason?: 'max_completion_tokens' | 'max_prompt_tokens';
  };
  /**
   * The instructions that the [assistant](https://platform.openai.com/docs/api-reference/assistants) used for this run.
   */
  instructions: string;
  /**
   * The last error associated with this run. Will be `null` if there are no errors.
   */
  last_error: {
    /**
     * One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.
     */
    code: 'server_error' | 'rate_limit_exceeded' | 'invalid_prompt';
    /**
     * A human-readable description of the error.
     */
    message: string;
  };
  /**
   * The maximum number of completion tokens specified to have been used over the course of the run.
   *
   */
  max_completion_tokens: number;
  /**
   * The maximum number of prompt tokens specified to have been used over the course of the run.
   *
   */
  max_prompt_tokens: number;
  metadata: Metadata;
  /**
   * The model that the [assistant](https://platform.openai.com/docs/api-reference/assistants) used for this run.
   */
  model: string;
  /**
   * The object type, which is always `thread.run`.
   */
  object: 'thread.run';
  parallel_tool_calls: ParallelToolCalls;
  /**
   * Details on the action required to continue the run. Will be `null` if no action is required.
   */
  required_action: {
    /**
     * Details on the tool outputs needed for this run to continue.
     */
    submit_tool_outputs: {
      /**
       * A list of the relevant tool calls.
       */
      tool_calls: Array<RunToolCallObject>;
    };
    /**
     * For now, this is always `submit_tool_outputs`.
     */
    type: 'submit_tool_outputs';
  };
  response_format: AssistantsApiResponseFormatOption;
  /**
   * The Unix timestamp (in seconds) for when the run was started.
   */
  started_at: number;
  status: RunStatus;
  /**
   * The sampling temperature used for this run. If not set, defaults to 1.
   */
  temperature?: number;
  /**
   * The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) that was executed on as a part of this run.
   */
  thread_id: string;
  tool_choice: AssistantsApiToolChoiceOption & unknown;
  /**
   * The list of tools that the [assistant](https://platform.openai.com/docs/api-reference/assistants) used for this run.
   */
  tools: Array<AssistantTool>;
  /**
   * The nucleus sampling value used for this run. If not set, defaults to 1.
   */
  top_p?: number;
  truncation_strategy: TruncationObject & unknown;
  usage: RunCompletionUsage;
};

/**
 * Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`.
 */
export type RunStepCompletionUsage = {
  /**
   * Number of completion tokens used over the course of the run step.
   */
  completion_tokens: number;
  /**
   * Number of prompt tokens used over the course of the run step.
   */
  prompt_tokens: number;
  /**
   * Total number of tokens used (prompt + completion).
   */
  total_tokens: number;
};

/**
 * Run step delta object
 *
 * Represents a run step delta i.e. any changed fields on a run step during streaming.
 *
 */
export type RunStepDeltaObject = {
  delta: RunStepDeltaObjectDelta;
  /**
   * The identifier of the run step, which can be referenced in API endpoints.
   */
  id: string;
  /**
   * The object type, which is always `thread.run.step.delta`.
   */
  object: 'thread.run.step.delta';
};

/**
 * Message creation
 *
 * Details of the message creation by the run step.
 */
export type RunStepDeltaStepDetailsMessageCreationObject = {
  message_creation?: {
    /**
     * The ID of the message that was created by this run step.
     */
    message_id?: string;
  };
  /**
   * Always `message_creation`.
   */
  type: 'message_creation';
};

/**
 * Code interpreter tool call
 *
 * Details of the Code Interpreter tool call the run step was involved in.
 */
export type RunStepDeltaStepDetailsToolCallsCodeObject = {
  /**
   * The Code Interpreter tool call definition.
   */
  code_interpreter?: {
    /**
     * The input to the Code Interpreter tool call.
     */
    input?: string;
    /**
     * The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
     */
    outputs?: Array<
      | ({
          type?: 'RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject';
        } & RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject)
      | ({
          type?: 'RunStepDeltaStepDetailsToolCallsCodeOutputImageObject';
        } & RunStepDeltaStepDetailsToolCallsCodeOutputImageObject)
    >;
  };
  /**
   * The ID of the tool call.
   */
  id?: string;
  /**
   * The index of the tool call in the tool calls array.
   */
  index: number;
  /**
   * The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
   */
  type: 'code_interpreter';
};

/**
 * Code interpreter image output
 */
export type RunStepDeltaStepDetailsToolCallsCodeOutputImageObject = {
  image?: {
    /**
     * The [file](https://platform.openai.com/docs/api-reference/files) ID of the image.
     */
    file_id?: string;
  };
  /**
   * The index of the output in the outputs array.
   */
  index: number;
  /**
   * Always `image`.
   */
  type: 'image';
};

/**
 * Code interpreter log output
 *
 * Text output from the Code Interpreter tool call as part of a run step.
 */
export type RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject = {
  /**
   * The index of the output in the outputs array.
   */
  index: number;
  /**
   * The text output from the Code Interpreter tool call.
   */
  logs?: string;
  /**
   * Always `logs`.
   */
  type: 'logs';
};

/**
 * File search tool call
 */
export type RunStepDeltaStepDetailsToolCallsFileSearchObject = {
  /**
   * For now, this is always going to be an empty object.
   */
  file_search: {
    [key: string]: unknown;
  };
  /**
   * The ID of the tool call object.
   */
  id?: string;
  /**
   * The index of the tool call in the tool calls array.
   */
  index: number;
  /**
   * The type of tool call. This is always going to be `file_search` for this type of tool call.
   */
  type: 'file_search';
};

/**
 * Function tool call
 */
export type RunStepDeltaStepDetailsToolCallsFunctionObject = {
  /**
   * The definition of the function that was called.
   */
  function?: {
    /**
     * The arguments passed to the function.
     */
    arguments?: string;
    /**
     * The name of the function.
     */
    name?: string;
    /**
     * The output of the function. This will be `null` if the outputs have not been [submitted](https://platform.openai.com/docs/api-reference/runs/submitToolOutputs) yet.
     */
    output?: string;
  };
  /**
   * The ID of the tool call object.
   */
  id?: string;
  /**
   * The index of the tool call in the tool calls array.
   */
  index: number;
  /**
   * The type of tool call. This is always going to be `function` for this type of tool call.
   */
  type: 'function';
};

/**
 * Tool calls
 *
 * Details of the tool call.
 */
export type RunStepDeltaStepDetailsToolCallsObject = {
  /**
   * An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.
   *
   */
  tool_calls?: Array<RunStepDeltaStepDetailsToolCall>;
  /**
   * Always `tool_calls`.
   */
  type: 'tool_calls';
};

/**
 * Message creation
 *
 * Details of the message creation by the run step.
 */
export type RunStepDetailsMessageCreationObject = {
  message_creation: {
    /**
     * The ID of the message that was created by this run step.
     */
    message_id: string;
  };
  /**
   * Always `message_creation`.
   */
  type: 'message_creation';
};

/**
 * Code Interpreter tool call
 *
 * Details of the Code Interpreter tool call the run step was involved in.
 */
export type RunStepDetailsToolCallsCodeObject = {
  /**
   * The Code Interpreter tool call definition.
   */
  code_interpreter: {
    /**
     * The input to the Code Interpreter tool call.
     */
    input: string;
    /**
     * The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
     */
    outputs: Array<
      | ({
          type?: 'RunStepDetailsToolCallsCodeOutputLogsObject';
        } & RunStepDetailsToolCallsCodeOutputLogsObject)
      | ({
          type?: 'RunStepDetailsToolCallsCodeOutputImageObject';
        } & RunStepDetailsToolCallsCodeOutputImageObject)
    >;
  };
  /**
   * The ID of the tool call.
   */
  id: string;
  /**
   * The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
   */
  type: 'code_interpreter';
};

/**
 * Code Interpreter image output
 */
export type RunStepDetailsToolCallsCodeOutputImageObject = {
  image: {
    /**
     * The [file](https://platform.openai.com/docs/api-reference/files) ID of the image.
     */
    file_id: string;
  };
  /**
   * Always `image`.
   */
  type: 'image';
};

/**
 * Code Interpreter log output
 *
 * Text output from the Code Interpreter tool call as part of a run step.
 */
export type RunStepDetailsToolCallsCodeOutputLogsObject = {
  /**
   * The text output from the Code Interpreter tool call.
   */
  logs: string;
  /**
   * Always `logs`.
   */
  type: 'logs';
};

/**
 * File search tool call
 */
export type RunStepDetailsToolCallsFileSearchObject = {
  /**
   * For now, this is always going to be an empty object.
   */
  file_search: {
    ranking_options?: RunStepDetailsToolCallsFileSearchRankingOptionsObject;
    /**
     * The results of the file search.
     */
    results?: Array<RunStepDetailsToolCallsFileSearchResultObject>;
  };
  /**
   * The ID of the tool call object.
   */
  id: string;
  /**
   * The type of tool call. This is always going to be `file_search` for this type of tool call.
   */
  type: 'file_search';
};

/**
 * File search tool call ranking options
 *
 * The ranking options for the file search.
 */
export type RunStepDetailsToolCallsFileSearchRankingOptionsObject = {
  ranker: FileSearchRanker;
  /**
   * The score threshold for the file search. All values must be a floating point number between 0 and 1.
   */
  score_threshold: number;
};

/**
 * File search tool call result
 *
 * A result instance of the file search.
 */
export type RunStepDetailsToolCallsFileSearchResultObject = {
  /**
   * The content of the result that was found. The content is only included if requested via the include query parameter.
   */
  content?: Array<{
    /**
     * The text content of the file.
     */
    text?: string;
    /**
     * The type of the content.
     */
    type?: 'text';
  }>;
  /**
   * The ID of the file that result was found in.
   */
  file_id: string;
  /**
   * The name of the file that result was found in.
   */
  file_name: string;
  /**
   * The score of the result. All values must be a floating point number between 0 and 1.
   */
  score: number;
};

/**
 * Function tool call
 */
export type RunStepDetailsToolCallsFunctionObject = {
  /**
   * The definition of the function that was called.
   */
  function: {
    /**
     * The arguments passed to the function.
     */
    arguments: string;
    /**
     * The name of the function.
     */
    name: string;
    /**
     * The output of the function. This will be `null` if the outputs have not been [submitted](https://platform.openai.com/docs/api-reference/runs/submitToolOutputs) yet.
     */
    output: string;
  };
  /**
   * The ID of the tool call object.
   */
  id: string;
  /**
   * The type of tool call. This is always going to be `function` for this type of tool call.
   */
  type: 'function';
};

/**
 * Tool calls
 *
 * Details of the tool call.
 */
export type RunStepDetailsToolCallsObject = {
  /**
   * An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.
   *
   */
  tool_calls: Array<RunStepDetailsToolCall>;
  /**
   * Always `tool_calls`.
   */
  type: 'tool_calls';
};

/**
 * Run steps
 *
 * Represents a step in execution of a run.
 *
 */
export type RunStepObject = {
  /**
   * The ID of the [assistant](https://platform.openai.com/docs/api-reference/assistants) associated with the run step.
   */
  assistant_id: string;
  /**
   * The Unix timestamp (in seconds) for when the run step was cancelled.
   */
  cancelled_at: number;
  /**
   * The Unix timestamp (in seconds) for when the run step completed.
   */
  completed_at: number;
  /**
   * The Unix timestamp (in seconds) for when the run step was created.
   */
  created_at: number;
  /**
   * The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.
   */
  expired_at: number;
  /**
   * The Unix timestamp (in seconds) for when the run step failed.
   */
  failed_at: number;
  /**
   * The identifier of the run step, which can be referenced in API endpoints.
   */
  id: string;
  /**
   * The last error associated with this run step. Will be `null` if there are no errors.
   */
  last_error: {
    /**
     * One of `server_error` or `rate_limit_exceeded`.
     */
    code: 'server_error' | 'rate_limit_exceeded';
    /**
     * A human-readable description of the error.
     */
    message: string;
  };
  metadata: Metadata;
  /**
   * The object type, which is always `thread.run.step`.
   */
  object: 'thread.run.step';
  /**
   * The ID of the [run](https://platform.openai.com/docs/api-reference/runs) that this run step is a part of.
   */
  run_id: string;
  /**
   * The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
   */
  status: 'in_progress' | 'cancelled' | 'failed' | 'completed' | 'expired';
  /**
   * The details of the run step.
   */
  step_details:
    | ({
        type?: 'RunStepDetailsMessageCreationObject';
      } & RunStepDetailsMessageCreationObject)
    | ({
        type?: 'RunStepDetailsToolCallsObject';
      } & RunStepDetailsToolCallsObject);
  /**
   * The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) that was run.
   */
  thread_id: string;
  /**
   * The type of run step, which can be either `message_creation` or `tool_calls`.
   */
  type: 'message_creation' | 'tool_calls';
  usage: RunStepCompletionUsage;
};

export type RunStepStreamEvent =
  | {
      data: RunStepObject;
      event: 'thread.run.step.created';
    }
  | {
      data: RunStepObject;
      event: 'thread.run.step.in_progress';
    }
  | {
      data: RunStepDeltaObject;
      event: 'thread.run.step.delta';
    }
  | {
      data: RunStepObject;
      event: 'thread.run.step.completed';
    }
  | {
      data: RunStepObject;
      event: 'thread.run.step.failed';
    }
  | {
      data: RunStepObject;
      event: 'thread.run.step.cancelled';
    }
  | {
      data: RunStepObject;
      event: 'thread.run.step.expired';
    };

export type RunStreamEvent =
  | {
      data: RunObject;
      event: 'thread.run.created';
    }
  | {
      data: RunObject;
      event: 'thread.run.queued';
    }
  | {
      data: RunObject;
      event: 'thread.run.in_progress';
    }
  | {
      data: RunObject;
      event: 'thread.run.requires_action';
    }
  | {
      data: RunObject;
      event: 'thread.run.completed';
    }
  | {
      data: RunObject;
      event: 'thread.run.incomplete';
    }
  | {
      data: RunObject;
      event: 'thread.run.failed';
    }
  | {
      data: RunObject;
      event: 'thread.run.cancelling';
    }
  | {
      data: RunObject;
      event: 'thread.run.cancelled';
    }
  | {
      data: RunObject;
      event: 'thread.run.expired';
    };

/**
 * Tool call objects
 */
export type RunToolCallObject = {
  /**
   * The function definition.
   */
  function: {
    /**
     * The arguments that the model expects you to pass to the function.
     */
    arguments: string;
    /**
     * The name of the function.
     */
    name: string;
  };
  /**
   * The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](https://platform.openai.com/docs/api-reference/runs/submitToolOutputs) endpoint.
   */
  id: string;
  /**
   * The type of tool call the output is required for. For now, this is always `function`.
   */
  type: 'function';
};

/**
 * Screenshot
 *
 * A screenshot action.
 *
 */
export type Screenshot = {
  /**
   * Specifies the event type. For a screenshot action, this property is
   * always set to `screenshot`.
   *
   */
  type: 'screenshot';
};

/**
 * Scroll
 *
 * A scroll action.
 *
 */
export type Scroll = {
  /**
   * The horizontal scroll distance.
   *
   */
  scroll_x: number;
  /**
   * The vertical scroll distance.
   *
   */
  scroll_y: number;
  /**
   * Specifies the event type. For a scroll action, this property is
   * always set to `scroll`.
   *
   */
  type: 'scroll';
  /**
   * The x-coordinate where the scroll occurred.
   *
   */
  x: number;
  /**
   * The y-coordinate where the scroll occurred.
   *
   */
  y: number;
};

/**
 * Specifies the processing type used for serving the request.
 * - If set to 'auto', then the request will be processed with the service tier configured in the Project settings. Unless otherwise configured, the Project will use 'default'.
 * - If set to 'default', then the request will be processed with the standard pricing and performance for the selected model.
 * - If set to '[flex](https://platform.openai.com/docs/guides/flex-processing)' or '[priority](https://openai.com/api-priority-processing/)', then the request will be processed with the corresponding service tier.
 * - When not set, the default behavior is 'auto'.
 *
 * When the `service_tier` parameter is set, the response body will include the `service_tier` value based on the processing mode actually used to serve the request. This response value may be different from the value set in the parameter.
 *
 */
export const ServiceTier = {
  AUTO: 'auto',
  DEFAULT: 'default',
  FLEX: 'flex',
  PRIORITY: 'priority',
  SCALE: 'scale',
} as const;

/**
 * Specifies the processing type used for serving the request.
 * - If set to 'auto', then the request will be processed with the service tier configured in the Project settings. Unless otherwise configured, the Project will use 'default'.
 * - If set to 'default', then the request will be processed with the standard pricing and performance for the selected model.
 * - If set to '[flex](https://platform.openai.com/docs/guides/flex-processing)' or '[priority](https://openai.com/api-priority-processing/)', then the request will be processed with the corresponding service tier.
 * - When not set, the default behavior is 'auto'.
 *
 * When the `service_tier` parameter is set, the response body will include the `service_tier` value based on the processing mode actually used to serve the request. This response value may be different from the value set in the parameter.
 *
 */
export type ServiceTier = (typeof ServiceTier)[keyof typeof ServiceTier];

/**
 * Emitted for each chunk of audio data generated during speech synthesis.
 */
export type SpeechAudioDeltaEvent = {
  /**
   * A chunk of Base64-encoded audio data.
   *
   */
  audio: string;
  /**
   * The type of the event. Always `speech.audio.delta`.
   *
   */
  type: 'speech.audio.delta';
};

/**
 * Emitted when the speech synthesis is complete and all audio has been streamed.
 */
export type SpeechAudioDoneEvent = {
  /**
   * The type of the event. Always `speech.audio.done`.
   *
   */
  type: 'speech.audio.done';
  /**
   * Token usage statistics for the request.
   *
   */
  usage: {
    /**
     * Number of input tokens in the prompt.
     */
    input_tokens: number;
    /**
     * Number of output tokens generated.
     */
    output_tokens: number;
    /**
     * Total number of tokens used (input + output).
     */
    total_tokens: number;
  };
};

export type StaticChunkingStrategy = {
  /**
   * The number of tokens that overlap between chunks. The default value is `400`.
   *
   * Note that the overlap must not exceed half of `max_chunk_size_tokens`.
   *
   */
  chunk_overlap_tokens: number;
  /**
   * The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`.
   */
  max_chunk_size_tokens: number;
};

/**
 * Static Chunking Strategy
 *
 * Customize your own chunking strategy by setting chunk size and chunk overlap.
 */
export type StaticChunkingStrategyRequestParam = {
  static: StaticChunkingStrategy;
  /**
   * Always `static`.
   */
  type: 'static';
};

/**
 * Static Chunking Strategy
 */
export type StaticChunkingStrategyResponseParam = {
  static: StaticChunkingStrategy;
  /**
   * Always `static`.
   */
  type: 'static';
};

/**
 * Not supported with latest reasoning models `o3` and `o4-mini`.
 *
 * Up to 4 sequences where the API will stop generating further tokens. The
 * returned text will not contain the stop sequence.
 *
 */
export type StopConfiguration = string | Array<string>;

export type SubmitToolOutputsRunRequest = {
  /**
   * If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
   *
   */
  stream?: boolean;
  /**
   * A list of tools for which the outputs are being submitted.
   */
  tool_outputs: Array<{
    /**
     * The output of the tool call to be submitted to continue the run.
     */
    output?: string;
    /**
     * The ID of the tool call in the `required_action` object within the run object the output is being submitted for.
     */
    tool_call_id?: string;
  }>;
};

/**
 * An object specifying the format that the model must output.
 *
 * Configuring `{ "type": "json_schema" }` enables Structured Outputs,
 * which ensures the model will match your supplied JSON schema. Learn more in the
 * [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).
 *
 * The default format is `{ "type": "text" }` with no additional options.
 *
 * **Not recommended for gpt-4o and newer models:**
 *
 * Setting to `{ "type": "json_object" }` enables the older JSON mode, which
 * ensures the message the model generates is valid JSON. Using `json_schema`
 * is preferred for models that support it.
 *
 */
export type TextResponseFormatConfiguration =
  | ({
      type?: 'ResponseFormatText';
    } & ResponseFormatText)
  | ({
      type?: 'TextResponseFormatJsonSchema';
    } & TextResponseFormatJsonSchema)
  | ({
      type?: 'ResponseFormatJsonObject';
    } & ResponseFormatJsonObject);

/**
 * JSON schema
 *
 * JSON Schema response format. Used to generate structured JSON responses.
 * Learn more about [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs).
 *
 */
export type TextResponseFormatJsonSchema = {
  /**
   * A description of what the response format is for, used by the model to
   * determine how to respond in the format.
   *
   */
  description?: string;
  /**
   * The name of the response format. Must be a-z, A-Z, 0-9, or contain
   * underscores and dashes, with a maximum length of 64.
   *
   */
  name: string;
  schema: ResponseFormatJsonSchemaSchema;
  /**
   * Whether to enable strict schema adherence when generating the output.
   * If set to true, the model will always follow the exact schema defined
   * in the `schema` field. Only a subset of JSON Schema is supported when
   * `strict` is `true`. To learn more, read the [Structured Outputs
   * guide](https://platform.openai.com/docs/guides/structured-outputs).
   *
   */
  strict?: boolean;
  /**
   * The type of response format being defined. Always `json_schema`.
   */
  type: 'json_schema';
};

/**
 * Thread
 *
 * Represents a thread that contains [messages](https://platform.openai.com/docs/api-reference/messages).
 */
export type ThreadObject = {
  /**
   * The Unix timestamp (in seconds) for when the thread was created.
   */
  created_at: number;
  /**
   * The identifier, which can be referenced in API endpoints.
   */
  id: string;
  metadata: Metadata;
  /**
   * The object type, which is always `thread`.
   */
  object: 'thread';
  /**
   * A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
   *
   */
  tool_resources: {
    code_interpreter?: {
      /**
       * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
       *
       */
      file_ids?: Array<string>;
    };
    file_search?: {
      /**
       * The [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.
       *
       */
      vector_store_ids?: Array<string>;
    };
  };
};

/**
 * Occurs when a new [thread](https://platform.openai.com/docs/api-reference/threads/object) is created.
 */
export type ThreadStreamEvent = {
  data: ThreadObject;
  /**
   * Whether to enable input audio transcription.
   */
  enabled?: boolean;
  event: 'thread.created';
};

export type ToggleCertificatesRequest = {
  certificate_ids: Array<string>;
};

/**
 * A tool that can be used to generate a response.
 *
 */
export type Tool =
  | ({
      type?: 'FunctionTool';
    } & FunctionTool)
  | ({
      type?: 'FileSearchTool';
    } & FileSearchTool)
  | ({
      type?: 'WebSearchPreviewTool';
    } & WebSearchPreviewTool)
  | ({
      type?: 'ComputerUsePreviewTool';
    } & ComputerUsePreviewTool)
  | ({
      type?: 'MCPTool';
    } & McpTool)
  | ({
      type?: 'CodeInterpreterTool';
    } & CodeInterpreterTool)
  | ({
      type?: 'ImageGenTool';
    } & ImageGenTool)
  | ({
      type?: 'LocalShellTool';
    } & LocalShellTool)
  | ({
      type?: 'CustomTool';
    } & CustomTool);

/**
 * Allowed tools
 *
 * Constrains the tools available to the model to a pre-defined set.
 *
 */
export type ToolChoiceAllowed = {
  /**
   * Constrains the tools available to the model to a pre-defined set.
   *
   * `auto` allows the model to pick from among the allowed tools and generate a
   * message.
   *
   * `required` requires the model to call one or more of the allowed tools.
   *
   */
  mode: 'auto' | 'required';
  /**
   * A list of tool definitions that the model should be allowed to call.
   *
   * For the Responses API, the list of tool definitions might look like:
   * ```json
   * [
   * { "type": "function", "name": "get_weather" },
   * { "type": "mcp", "server_label": "deepwiki" },
   * { "type": "image_generation" }
   * ]
   * ```
   *
   */
  tools: Array<{
    [key: string]: unknown;
  }>;
  /**
   * Allowed tool configuration type. Always `allowed_tools`.
   */
  type: 'allowed_tools';
};

/**
 * Custom tool
 *
 * Use this option to force the model to call a specific custom tool.
 *
 */
export type ToolChoiceCustom = {
  /**
   * The name of the custom tool to call.
   */
  name: string;
  /**
   * For custom tool calling, the type is always `custom`.
   */
  type: 'custom';
};

/**
 * Function tool
 *
 * Use this option to force the model to call a specific function.
 *
 */
export type ToolChoiceFunction = {
  /**
   * The name of the function to call.
   */
  name: string;
  /**
   * For function calling, the type is always `function`.
   */
  type: 'function';
};

/**
 * MCP tool
 *
 * Use this option to force the model to call a specific tool on a remote MCP server.
 *
 */
export type ToolChoiceMcp = {
  /**
   * The name of the tool to call on the server.
   *
   */
  name?: string;
  /**
   * The label of the MCP server to use.
   *
   */
  server_label: string;
  /**
   * For MCP tools, the type is always `mcp`.
   */
  type: 'mcp';
};

/**
 * Tool choice mode
 *
 * Controls which (if any) tool is called by the model.
 *
 * `none` means the model will not call any tool and instead generates a message.
 *
 * `auto` means the model can pick between generating a message or calling one or
 * more tools.
 *
 * `required` means the model must call one or more tools.
 *
 */
export const ToolChoiceOptions = {
  AUTO: 'auto',
  NONE: 'none',
  REQUIRED: 'required',
} as const;

/**
 * Tool choice mode
 *
 * Controls which (if any) tool is called by the model.
 *
 * `none` means the model will not call any tool and instead generates a message.
 *
 * `auto` means the model can pick between generating a message or calling one or
 * more tools.
 *
 * `required` means the model must call one or more tools.
 *
 */
export type ToolChoiceOptions =
  (typeof ToolChoiceOptions)[keyof typeof ToolChoiceOptions];

/**
 * Hosted tool
 *
 * Indicates that the model should use a built-in tool to generate a response.
 * [Learn more about built-in tools](https://platform.openai.com/docs/guides/tools).
 *
 */
export type ToolChoiceTypes = {
  /**
   * The type of hosted tool the model should to use. Learn more about
   * [built-in tools](https://platform.openai.com/docs/guides/tools).
   *
   * Allowed values are:
   * - `file_search`
   * - `web_search_preview`
   * - `computer_use_preview`
   * - `code_interpreter`
   * - `image_generation`
   *
   */
  type:
    | 'file_search'
    | 'web_search_preview'
    | 'computer_use_preview'
    | 'web_search_preview_2025_03_11'
    | 'image_generation'
    | 'code_interpreter';
};

/**
 * Emitted when there is an additional text delta. This is also the first event emitted when the transcription starts. Only emitted when you [create a transcription](https://platform.openai.com/docs/api-reference/audio/create-transcription) with the `Stream` parameter set to `true`.
 */
export type TranscriptTextDeltaEvent = {
  /**
   * The text delta that was additionally transcribed.
   *
   */
  delta: string;
  /**
   * The log probabilities of the delta. Only included if you [create a transcription](https://platform.openai.com/docs/api-reference/audio/create-transcription) with the `include[]` parameter set to `logprobs`.
   *
   */
  logprobs?: Array<{
    /**
     * The bytes that were used to generate the log probability.
     *
     */
    bytes?: Array<number>;
    /**
     * The log probability of the token.
     *
     */
    logprob?: number;
    /**
     * The token that was used to generate the log probability.
     *
     */
    token?: string;
  }>;
  /**
   * The type of the event. Always `transcript.text.delta`.
   *
   */
  type: 'transcript.text.delta';
};

/**
 * Emitted when the transcription is complete. Contains the complete transcription text. Only emitted when you [create a transcription](https://platform.openai.com/docs/api-reference/audio/create-transcription) with the `Stream` parameter set to `true`.
 */
export type TranscriptTextDoneEvent = {
  /**
   * The log probabilities of the individual tokens in the transcription. Only included if you [create a transcription](https://platform.openai.com/docs/api-reference/audio/create-transcription) with the `include[]` parameter set to `logprobs`.
   *
   */
  logprobs?: Array<{
    /**
     * The bytes that were used to generate the log probability.
     *
     */
    bytes?: Array<number>;
    /**
     * The log probability of the token.
     *
     */
    logprob?: number;
    /**
     * The token that was used to generate the log probability.
     *
     */
    token?: string;
  }>;
  /**
   * The text that was transcribed.
   *
   */
  text: string;
  /**
   * The type of the event. Always `transcript.text.done`.
   *
   */
  type: 'transcript.text.done';
  usage?: TranscriptTextUsageTokens;
};

/**
 * Duration Usage
 *
 * Usage statistics for models billed by audio input duration.
 */
export type TranscriptTextUsageDuration = {
  /**
   * Duration of the input audio in seconds.
   */
  seconds: number;
  /**
   * The type of the usage object. Always `duration` for this variant.
   */
  type: 'duration';
};

/**
 * Token Usage
 *
 * Usage statistics for models billed by token usage.
 */
export type TranscriptTextUsageTokens = {
  /**
   * Details about the input tokens billed for this request.
   */
  input_token_details?: {
    /**
     * Number of audio tokens billed for this request.
     */
    audio_tokens?: number;
    /**
     * Number of text tokens billed for this request.
     */
    text_tokens?: number;
  };
  /**
   * Number of input tokens billed for this request.
   */
  input_tokens: number;
  /**
   * Number of output tokens generated.
   */
  output_tokens: number;
  /**
   * Total number of tokens used (input + output).
   */
  total_tokens: number;
  /**
   * The type of the usage object. Always `tokens` for this variant.
   */
  type: 'tokens';
};

/**
 * Controls how the audio is cut into chunks. When set to `"auto"`, the server first normalizes loudness and then uses voice activity detection (VAD) to choose boundaries. `server_vad` object can be provided to tweak VAD detection parameters manually. If unset, the audio is transcribed as a single block.
 */
export type TranscriptionChunkingStrategy = 'auto' | VadConfig;

export const TranscriptionInclude = {
  LOGPROBS: 'logprobs',
} as const;

export type TranscriptionInclude =
  (typeof TranscriptionInclude)[keyof typeof TranscriptionInclude];

export type TranscriptionSegment = {
  /**
   * Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
   */
  avg_logprob: number;
  /**
   * Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
   */
  compression_ratio: number;
  /**
   * End time of the segment in seconds.
   */
  end: number;
  /**
   * Unique identifier of the segment.
   */
  id: number;
  /**
   * Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.
   */
  no_speech_prob: number;
  /**
   * Seek offset of the segment.
   */
  seek: number;
  /**
   * Start time of the segment in seconds.
   */
  start: number;
  /**
   * Temperature parameter used for generating the segment.
   */
  temperature: number;
  /**
   * Text content of the segment.
   */
  text: string;
  /**
   * Array of token IDs for the text content.
   */
  tokens: Array<number>;
};

export type TranscriptionWord = {
  /**
   * End time of the word in seconds.
   */
  end: number;
  /**
   * Start time of the word in seconds.
   */
  start: number;
  /**
   * The text content of the word.
   */
  word: string;
};

/**
 * Thread Truncation Controls
 *
 * Controls for how a thread will be truncated prior to the run. Use this to control the initial context window of the run.
 */
export type TruncationObject = {
  /**
   * The number of most recent messages from the thread when constructing the context for the run.
   */
  last_messages?: number;
  /**
   * The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.
   */
  type: 'auto' | 'last_messages';
};

/**
 * Type
 *
 * An action to type in text.
 *
 */
export type Type = {
  /**
   * The text to type.
   *
   */
  text: string;
  /**
   * Specifies the event type. For a type action, this property is
   * always set to `type`.
   *
   */
  type: 'type';
};

export type UpdateVectorStoreFileAttributesRequest = {
  attributes: VectorStoreFileAttributes;
};

export type UpdateVectorStoreRequest = {
  expires_after?: VectorStoreExpirationAfter & unknown;
  metadata?: Metadata;
  /**
   * The name of the vector store.
   */
  name?: string;
};

/**
 * Upload
 *
 * The Upload object can accept byte chunks in the form of Parts.
 *
 */
export type Upload = {
  /**
   * The intended number of bytes to be uploaded.
   */
  bytes: number;
  /**
   * The Unix timestamp (in seconds) for when the Upload was created.
   */
  created_at: number;
  /**
   * The Unix timestamp (in seconds) for when the Upload will expire.
   */
  expires_at: number;
  file?: OpenAiFile & unknown;
  /**
   * The name of the file to be uploaded.
   */
  filename: string;
  /**
   * The Upload unique identifier, which can be referenced in API endpoints.
   */
  id: string;
  /**
   * The object type, which is always "upload".
   */
  object: 'upload';
  /**
   * The intended purpose of the file. [Please refer here](https://platform.openai.com/docs/api-reference/files/object#files/object-purpose) for acceptable values.
   */
  purpose: string;
  /**
   * The status of the Upload.
   */
  status: 'pending' | 'completed' | 'cancelled' | 'expired';
};

export type UploadCertificateRequest = {
  /**
   * The certificate content in PEM format
   */
  content: string;
  /**
   * An optional name for the certificate
   */
  name?: string;
};

/**
 * UploadPart
 *
 * The upload Part represents a chunk of bytes we can add to an Upload object.
 *
 */
export type UploadPart = {
  /**
   * The Unix timestamp (in seconds) for when the Part was created.
   */
  created_at: number;
  /**
   * The upload Part unique identifier, which can be referenced in API endpoints.
   */
  id: string;
  /**
   * The object type, which is always `upload.part`.
   */
  object: 'upload.part';
  /**
   * The ID of the Upload object that this Part was added to.
   */
  upload_id: string;
};

/**
 * The aggregated audio speeches usage details of the specific time bucket.
 */
export type UsageAudioSpeechesResult = {
  /**
   * When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
   */
  api_key_id?: string;
  /**
   * The number of characters processed.
   */
  characters: number;
  /**
   * When `group_by=model`, this field provides the model name of the grouped usage result.
   */
  model?: string;
  /**
   * The count of requests made to the model.
   */
  num_model_requests: number;
  object: 'organization.usage.audio_speeches.result';
  /**
   * When `group_by=project_id`, this field provides the project ID of the grouped usage result.
   */
  project_id?: string;
  /**
   * When `group_by=user_id`, this field provides the user ID of the grouped usage result.
   */
  user_id?: string;
};

/**
 * The aggregated audio transcriptions usage details of the specific time bucket.
 */
export type UsageAudioTranscriptionsResult = {
  /**
   * When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
   */
  api_key_id?: string;
  /**
   * When `group_by=model`, this field provides the model name of the grouped usage result.
   */
  model?: string;
  /**
   * The count of requests made to the model.
   */
  num_model_requests: number;
  object: 'organization.usage.audio_transcriptions.result';
  /**
   * When `group_by=project_id`, this field provides the project ID of the grouped usage result.
   */
  project_id?: string;
  /**
   * The number of seconds processed.
   */
  seconds: number;
  /**
   * When `group_by=user_id`, this field provides the user ID of the grouped usage result.
   */
  user_id?: string;
};

/**
 * The aggregated code interpreter sessions usage details of the specific time bucket.
 */
export type UsageCodeInterpreterSessionsResult = {
  /**
   * The number of code interpreter sessions.
   */
  num_sessions?: number;
  object: 'organization.usage.code_interpreter_sessions.result';
  /**
   * When `group_by=project_id`, this field provides the project ID of the grouped usage result.
   */
  project_id?: string;
};

/**
 * The aggregated completions usage details of the specific time bucket.
 */
export type UsageCompletionsResult = {
  /**
   * When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
   */
  api_key_id?: string;
  /**
   * When `group_by=batch`, this field tells whether the grouped usage result is batch or not.
   */
  batch?: boolean;
  /**
   * The aggregated number of audio input tokens used, including cached tokens.
   */
  input_audio_tokens?: number;
  /**
   * The aggregated number of text input tokens that has been cached from previous requests. For customers subscribe to scale tier, this includes scale tier tokens.
   */
  input_cached_tokens?: number;
  /**
   * The aggregated number of text input tokens used, including cached tokens. For customers subscribe to scale tier, this includes scale tier tokens.
   */
  input_tokens: number;
  /**
   * When `group_by=model`, this field provides the model name of the grouped usage result.
   */
  model?: string;
  /**
   * The count of requests made to the model.
   */
  num_model_requests: number;
  object: 'organization.usage.completions.result';
  /**
   * The aggregated number of audio output tokens used.
   */
  output_audio_tokens?: number;
  /**
   * The aggregated number of text output tokens used. For customers subscribe to scale tier, this includes scale tier tokens.
   */
  output_tokens: number;
  /**
   * When `group_by=project_id`, this field provides the project ID of the grouped usage result.
   */
  project_id?: string;
  /**
   * When `group_by=user_id`, this field provides the user ID of the grouped usage result.
   */
  user_id?: string;
};

/**
 * The aggregated embeddings usage details of the specific time bucket.
 */
export type UsageEmbeddingsResult = {
  /**
   * When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
   */
  api_key_id?: string;
  /**
   * The aggregated number of input tokens used.
   */
  input_tokens: number;
  /**
   * When `group_by=model`, this field provides the model name of the grouped usage result.
   */
  model?: string;
  /**
   * The count of requests made to the model.
   */
  num_model_requests: number;
  object: 'organization.usage.embeddings.result';
  /**
   * When `group_by=project_id`, this field provides the project ID of the grouped usage result.
   */
  project_id?: string;
  /**
   * When `group_by=user_id`, this field provides the user ID of the grouped usage result.
   */
  user_id?: string;
};

/**
 * The aggregated images usage details of the specific time bucket.
 */
export type UsageImagesResult = {
  /**
   * When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
   */
  api_key_id?: string;
  /**
   * The number of images processed.
   */
  images: number;
  /**
   * When `group_by=model`, this field provides the model name of the grouped usage result.
   */
  model?: string;
  /**
   * The count of requests made to the model.
   */
  num_model_requests: number;
  object: 'organization.usage.images.result';
  /**
   * When `group_by=project_id`, this field provides the project ID of the grouped usage result.
   */
  project_id?: string;
  /**
   * When `group_by=size`, this field provides the image size of the grouped usage result.
   */
  size?: string;
  /**
   * When `group_by=source`, this field provides the source of the grouped usage result, possible values are `image.generation`, `image.edit`, `image.variation`.
   */
  source?: string;
  /**
   * When `group_by=user_id`, this field provides the user ID of the grouped usage result.
   */
  user_id?: string;
};

/**
 * The aggregated moderations usage details of the specific time bucket.
 */
export type UsageModerationsResult = {
  /**
   * When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
   */
  api_key_id?: string;
  /**
   * The aggregated number of input tokens used.
   */
  input_tokens: number;
  /**
   * When `group_by=model`, this field provides the model name of the grouped usage result.
   */
  model?: string;
  /**
   * The count of requests made to the model.
   */
  num_model_requests: number;
  object: 'organization.usage.moderations.result';
  /**
   * When `group_by=project_id`, this field provides the project ID of the grouped usage result.
   */
  project_id?: string;
  /**
   * When `group_by=user_id`, this field provides the user ID of the grouped usage result.
   */
  user_id?: string;
};

export type UsageResponse = {
  data: Array<UsageTimeBucket>;
  has_more: boolean;
  next_page: string;
  object: 'page';
};

export type UsageTimeBucket = {
  end_time: number;
  object: 'bucket';
  result: Array<
    | ({
        object?: 'UsageCompletionsResult';
      } & UsageCompletionsResult)
    | ({
        object?: 'UsageEmbeddingsResult';
      } & UsageEmbeddingsResult)
    | ({
        object?: 'UsageModerationsResult';
      } & UsageModerationsResult)
    | ({
        object?: 'UsageImagesResult';
      } & UsageImagesResult)
    | ({
        object?: 'UsageAudioSpeechesResult';
      } & UsageAudioSpeechesResult)
    | ({
        object?: 'UsageAudioTranscriptionsResult';
      } & UsageAudioTranscriptionsResult)
    | ({
        object?: 'UsageVectorStoresResult';
      } & UsageVectorStoresResult)
    | ({
        object?: 'UsageCodeInterpreterSessionsResult';
      } & UsageCodeInterpreterSessionsResult)
    | ({
        object?: 'CostsResult';
      } & CostsResult)
  >;
  start_time: number;
};

/**
 * The aggregated vector stores usage details of the specific time bucket.
 */
export type UsageVectorStoresResult = {
  object: 'organization.usage.vector_stores.result';
  /**
   * When `group_by=project_id`, this field provides the project ID of the grouped usage result.
   */
  project_id?: string;
  /**
   * The vector stores usage in bytes.
   */
  usage_bytes: number;
};

/**
 * Represents an individual `user` within an organization.
 */
export type User = {
  /**
   * The Unix timestamp (in seconds) of when the user was added.
   */
  added_at: number;
  /**
   * The email address of the user
   */
  email: string;
  /**
   * The identifier, which can be referenced in API endpoints
   */
  id: string;
  /**
   * The name of the user
   */
  name: string;
  /**
   * The object type, which is always `organization.user`
   */
  object: 'organization.user';
  /**
   * `owner` or `reader`
   */
  role: 'owner' | 'reader';
};

export type UserDeleteResponse = {
  deleted: boolean;
  id: string;
  object: 'organization.user.deleted';
};

export type UserListResponse = {
  data: Array<User>;
  first_id: string;
  has_more: boolean;
  last_id: string;
  object: 'list';
};

export type UserRoleUpdateRequest = {
  /**
   * `owner` or `reader`
   */
  role: 'owner' | 'reader';
};

export type VadConfig = {
  /**
   * Amount of audio to include before the VAD detected speech (in
   * milliseconds).
   *
   */
  prefix_padding_ms?: number;
  /**
   * Duration of silence to detect speech stop (in milliseconds).
   * With shorter values the model will respond more quickly,
   * but may jump in on short pauses from the user.
   *
   */
  silence_duration_ms?: number;
  /**
   * Sensitivity threshold (0.0 to 1.0) for voice activity detection. A
   * higher threshold will require louder audio to activate the model, and
   * thus might perform better in noisy environments.
   *
   */
  threshold?: number;
  /**
   * Must be set to `server_vad` to enable manual chunking using server side VAD.
   */
  type: 'server_vad';
};

/**
 * ValidateGraderRequest
 */
export type ValidateGraderRequest = {
  /**
   * The grader used for the fine-tuning job.
   */
  grader:
    | GraderStringCheck
    | GraderTextSimilarity
    | GraderPython
    | GraderScoreModel
    | GraderMulti;
};

/**
 * ValidateGraderResponse
 */
export type ValidateGraderResponse = {
  /**
   * The grader used for the fine-tuning job.
   */
  grader?:
    | GraderStringCheck
    | GraderTextSimilarity
    | GraderPython
    | GraderScoreModel
    | GraderMulti;
};

/**
 * Vector store expiration policy
 *
 * The expiration policy for a vector store.
 */
export type VectorStoreExpirationAfter = {
  /**
   * Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.
   */
  anchor: 'last_active_at';
  /**
   * The number of days after the anchor time that the vector store will expire.
   */
  days: number;
};

/**
 * Set of 16 key-value pairs that can be attached to an object. This can be
 * useful for storing additional information about the object in a structured
 * format, and querying for objects via API or the dashboard. Keys are strings
 * with a maximum length of 64 characters. Values are strings with a maximum
 * length of 512 characters, booleans, or numbers.
 *
 */
export type VectorStoreFileAttributes = {
  [key: string]: string | number | boolean;
};

/**
 * Vector store file batch
 *
 * A batch of files attached to a vector store.
 */
export type VectorStoreFileBatchObject = {
  /**
   * The Unix timestamp (in seconds) for when the vector store files batch was created.
   */
  created_at: number;
  file_counts: {
    /**
     * The number of files that where cancelled.
     */
    cancelled: number;
    /**
     * The number of files that have been processed.
     */
    completed: number;
    /**
     * The number of files that have failed to process.
     */
    failed: number;
    /**
     * The number of files that are currently being processed.
     */
    in_progress: number;
    /**
     * The total number of files.
     */
    total: number;
  };
  /**
   * The identifier, which can be referenced in API endpoints.
   */
  id: string;
  /**
   * The object type, which is always `vector_store.file_batch`.
   */
  object: 'vector_store.files_batch';
  /**
   * The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.
   */
  status: 'in_progress' | 'completed' | 'cancelled' | 'failed';
  /**
   * The ID of the [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) that the [File](https://platform.openai.com/docs/api-reference/files) is attached to.
   */
  vector_store_id: string;
};

/**
 * Represents the parsed content of a vector store file.
 */
export type VectorStoreFileContentResponse = {
  /**
   * Parsed content of the file.
   */
  data: Array<{
    /**
     * The text content
     */
    text?: string;
    /**
     * The content type (currently only `"text"`)
     */
    type?: string;
  }>;
  /**
   * Indicates if there are more content pages to fetch.
   */
  has_more: boolean;
  /**
   * The token for the next page, if any.
   */
  next_page: string;
  /**
   * The object type, which is always `vector_store.file_content.page`
   */
  object: 'vector_store.file_content.page';
};

/**
 * Vector store files
 *
 * A list of files attached to a vector store.
 */
export type VectorStoreFileObject = {
  attributes?: VectorStoreFileAttributes;
  chunking_strategy?: ChunkingStrategyResponse;
  /**
   * The Unix timestamp (in seconds) for when the vector store file was created.
   */
  created_at: number;
  /**
   * The identifier, which can be referenced in API endpoints.
   */
  id: string;
  /**
   * The last error associated with this vector store file. Will be `null` if there are no errors.
   */
  last_error: {
    /**
     * One of `server_error` or `rate_limit_exceeded`.
     */
    code: 'server_error' | 'unsupported_file' | 'invalid_file';
    /**
     * A human-readable description of the error.
     */
    message: string;
  };
  /**
   * The object type, which is always `vector_store.file`.
   */
  object: 'vector_store.file';
  /**
   * The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.
   */
  status: 'in_progress' | 'completed' | 'cancelled' | 'failed';
  /**
   * The total vector store usage in bytes. Note that this may be different from the original file size.
   */
  usage_bytes: number;
  /**
   * The ID of the [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) that the [File](https://platform.openai.com/docs/api-reference/files) is attached to.
   */
  vector_store_id: string;
};

/**
 * Vector store
 *
 * A vector store is a collection of processed files can be used by the `file_search` tool.
 */
export type VectorStoreObject = {
  /**
   * The Unix timestamp (in seconds) for when the vector store was created.
   */
  created_at: number;
  expires_after?: VectorStoreExpirationAfter;
  /**
   * The Unix timestamp (in seconds) for when the vector store will expire.
   */
  expires_at?: number;
  file_counts: {
    /**
     * The number of files that were cancelled.
     */
    cancelled: number;
    /**
     * The number of files that have been successfully processed.
     */
    completed: number;
    /**
     * The number of files that have failed to process.
     */
    failed: number;
    /**
     * The number of files that are currently being processed.
     */
    in_progress: number;
    /**
     * The total number of files.
     */
    total: number;
  };
  /**
   * The identifier, which can be referenced in API endpoints.
   */
  id: string;
  /**
   * The Unix timestamp (in seconds) for when the vector store was last active.
   */
  last_active_at: number;
  metadata: Metadata;
  /**
   * The name of the vector store.
   */
  name: string;
  /**
   * The object type, which is always `vector_store`.
   */
  object: 'vector_store';
  /**
   * The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
   */
  status: 'expired' | 'in_progress' | 'completed';
  /**
   * The total number of bytes used by the files in the vector store.
   */
  usage_bytes: number;
};

export type VectorStoreSearchRequest = {
  /**
   * A filter to apply based on file attributes.
   */
  filters?: ComparisonFilter | CompoundFilter;
  /**
   * The maximum number of results to return. This number should be between 1 and 50 inclusive.
   */
  max_num_results?: number;
  /**
   * A query string for a search
   */
  query: string | Array<string>;
  /**
   * Ranking options for search.
   */
  ranking_options?: {
    /**
     * Enable re-ranking; set to `none` to disable, which can help reduce latency.
     */
    ranker?: 'none' | 'auto' | 'default-2024-11-15';
    score_threshold?: number;
  };
  /**
   * Whether to rewrite the natural language query for vector search.
   */
  rewrite_query?: boolean;
};

export type VectorStoreSearchResultContentObject = {
  /**
   * The text content returned from search.
   */
  text: string;
  /**
   * The type of content.
   */
  type: 'text';
};

export type VectorStoreSearchResultItem = {
  attributes: VectorStoreFileAttributes;
  /**
   * Content chunks from the file.
   */
  content: Array<VectorStoreSearchResultContentObject>;
  /**
   * The ID of the vector store file.
   */
  file_id: string;
  /**
   * The name of the vector store file.
   */
  filename: string;
  /**
   * The similarity score for the result.
   */
  score: number;
};

export type VectorStoreSearchResultsPage = {
  /**
   * The list of search result items.
   */
  data: Array<VectorStoreSearchResultItem>;
  /**
   * Indicates if there are more results to fetch.
   */
  has_more: boolean;
  /**
   * The token for the next page, if any.
   */
  next_page: string;
  /**
   * The object type, which is always `vector_store.search_results.page`
   */
  object: 'vector_store.search_results.page';
  search_query: Array<string>;
};

/**
 * Constrains the verbosity of the model's response. Lower values will result in
 * more concise responses, while higher values will result in more verbose responses.
 * Currently supported values are `low`, `medium`, and `high`.
 *
 */
export const Verbosity = {
  HIGH: 'high',
  LOW: 'low',
  MEDIUM: 'medium',
} as const;

/**
 * Constrains the verbosity of the model's response. Lower values will result in
 * more concise responses, while higher values will result in more verbose responses.
 * Currently supported values are `low`, `medium`, and `high`.
 *
 */
export type Verbosity = (typeof Verbosity)[keyof typeof Verbosity];

export type VoiceIdsShared =
  | string
  | 'alloy'
  | 'ash'
  | 'ballad'
  | 'coral'
  | 'echo'
  | 'sage'
  | 'shimmer'
  | 'verse';

/**
 * Wait
 *
 * A wait action.
 *
 */
export type Wait = {
  /**
   * Specifies the event type. For a wait action, this property is
   * always set to `wait`.
   *
   */
  type: 'wait';
};

/**
 * Find action
 *
 * Action type "find": Searches for a pattern within a loaded page.
 *
 */
export type WebSearchActionFind = {
  /**
   * The pattern or text to search for within the page.
   *
   */
  pattern: string;
  /**
   * The action type.
   *
   */
  type: 'find';
  /**
   * The URL of the page searched for the pattern.
   *
   */
  url: string;
};

/**
 * Open page action
 *
 * Action type "open_page" - Opens a specific URL from search results.
 *
 */
export type WebSearchActionOpenPage = {
  /**
   * The action type.
   *
   */
  type: 'open_page';
  /**
   * The URL opened by the model.
   *
   */
  url: string;
};

/**
 * Search action
 *
 * Action type "search" - Performs a web search query.
 *
 */
export type WebSearchActionSearch = {
  /**
   * The search query.
   *
   */
  query: string;
  /**
   * The action type.
   *
   */
  type: 'search';
};

/**
 * High level guidance for the amount of context window space to use for the
 * search. One of `low`, `medium`, or `high`. `medium` is the default.
 *
 */
export const WebSearchContextSize = {
  HIGH: 'high',
  LOW: 'low',
  MEDIUM: 'medium',
} as const;

/**
 * High level guidance for the amount of context window space to use for the
 * search. One of `low`, `medium`, or `high`. `medium` is the default.
 *
 */
export type WebSearchContextSize =
  (typeof WebSearchContextSize)[keyof typeof WebSearchContextSize];

/**
 * Web search location
 *
 * Approximate location parameters for the search.
 */
export type WebSearchLocation = {
  /**
   * Free text input for the city of the user, e.g. `San Francisco`.
   *
   */
  city?: string;
  /**
   * The two-letter
   * [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the user,
   * e.g. `US`.
   *
   */
  country?: string;
  /**
   * Free text input for the region of the user, e.g. `California`.
   *
   */
  region?: string;
  /**
   * The [IANA timezone](https://timeapi.io/documentation/iana-timezones)
   * of the user, e.g. `America/Los_Angeles`.
   *
   */
  timezone?: string;
};

/**
 * Web search tool call
 *
 * The results of a web search tool call. See the
 * [web search guide](https://platform.openai.com/docs/guides/tools-web-search) for more information.
 *
 */
export type WebSearchToolCall = {
  /**
   * An object describing the specific action taken in this web search call.
   * Includes details on how the model used the web (search, open_page, find).
   *
   */
  action:
    | ({
        type?: 'WebSearchActionSearch';
      } & WebSearchActionSearch)
    | ({
        type?: 'WebSearchActionOpenPage';
      } & WebSearchActionOpenPage)
    | ({
        type?: 'WebSearchActionFind';
      } & WebSearchActionFind);
  /**
   * The unique ID of the web search tool call.
   *
   */
  id: string;
  /**
   * The status of the web search tool call.
   *
   */
  status: 'in_progress' | 'searching' | 'completed' | 'failed';
  /**
   * The type of the web search tool call. Always `web_search_call`.
   *
   */
  type: 'web_search_call';
};

/**
 * batch.cancelled
 *
 * Sent when a batch API request has been cancelled.
 *
 */
export type WebhookBatchCancelled = {
  /**
   * The Unix timestamp (in seconds) of when the batch API request was cancelled.
   *
   */
  created_at: number;
  /**
   * Event data payload.
   *
   */
  data: {
    /**
     * The unique ID of the batch API request.
     *
     */
    id: string;
  };
  /**
   * The unique ID of the event.
   *
   */
  id: string;
  /**
   * The object of the event. Always `event`.
   *
   */
  object?: 'event';
  /**
   * The type of the event. Always `batch.cancelled`.
   *
   */
  type: 'batch.cancelled';
};

/**
 * batch.completed
 *
 * Sent when a batch API request has been completed.
 *
 */
export type WebhookBatchCompleted = {
  /**
   * The Unix timestamp (in seconds) of when the batch API request was completed.
   *
   */
  created_at: number;
  /**
   * Event data payload.
   *
   */
  data: {
    /**
     * The unique ID of the batch API request.
     *
     */
    id: string;
  };
  /**
   * The unique ID of the event.
   *
   */
  id: string;
  /**
   * The object of the event. Always `event`.
   *
   */
  object?: 'event';
  /**
   * The type of the event. Always `batch.completed`.
   *
   */
  type: 'batch.completed';
};

/**
 * batch.expired
 *
 * Sent when a batch API request has expired.
 *
 */
export type WebhookBatchExpired = {
  /**
   * The Unix timestamp (in seconds) of when the batch API request expired.
   *
   */
  created_at: number;
  /**
   * Event data payload.
   *
   */
  data: {
    /**
     * The unique ID of the batch API request.
     *
     */
    id: string;
  };
  /**
   * The unique ID of the event.
   *
   */
  id: string;
  /**
   * The object of the event. Always `event`.
   *
   */
  object?: 'event';
  /**
   * The type of the event. Always `batch.expired`.
   *
   */
  type: 'batch.expired';
};

/**
 * batch.failed
 *
 * Sent when a batch API request has failed.
 *
 */
export type WebhookBatchFailed = {
  /**
   * The Unix timestamp (in seconds) of when the batch API request failed.
   *
   */
  created_at: number;
  /**
   * Event data payload.
   *
   */
  data: {
    /**
     * The unique ID of the batch API request.
     *
     */
    id: string;
  };
  /**
   * The unique ID of the event.
   *
   */
  id: string;
  /**
   * The object of the event. Always `event`.
   *
   */
  object?: 'event';
  /**
   * The type of the event. Always `batch.failed`.
   *
   */
  type: 'batch.failed';
};

/**
 * eval.run.canceled
 *
 * Sent when an eval run has been canceled.
 *
 */
export type WebhookEvalRunCanceled = {
  /**
   * The Unix timestamp (in seconds) of when the eval run was canceled.
   *
   */
  created_at: number;
  /**
   * Event data payload.
   *
   */
  data: {
    /**
     * The unique ID of the eval run.
     *
     */
    id: string;
  };
  /**
   * The unique ID of the event.
   *
   */
  id: string;
  /**
   * The object of the event. Always `event`.
   *
   */
  object?: 'event';
  /**
   * The type of the event. Always `eval.run.canceled`.
   *
   */
  type: 'eval.run.canceled';
};

/**
 * eval.run.failed
 *
 * Sent when an eval run has failed.
 *
 */
export type WebhookEvalRunFailed = {
  /**
   * The Unix timestamp (in seconds) of when the eval run failed.
   *
   */
  created_at: number;
  /**
   * Event data payload.
   *
   */
  data: {
    /**
     * The unique ID of the eval run.
     *
     */
    id: string;
  };
  /**
   * The unique ID of the event.
   *
   */
  id: string;
  /**
   * The object of the event. Always `event`.
   *
   */
  object?: 'event';
  /**
   * The type of the event. Always `eval.run.failed`.
   *
   */
  type: 'eval.run.failed';
};

/**
 * eval.run.succeeded
 *
 * Sent when an eval run has succeeded.
 *
 */
export type WebhookEvalRunSucceeded = {
  /**
   * The Unix timestamp (in seconds) of when the eval run succeeded.
   *
   */
  created_at: number;
  /**
   * Event data payload.
   *
   */
  data: {
    /**
     * The unique ID of the eval run.
     *
     */
    id: string;
  };
  /**
   * The unique ID of the event.
   *
   */
  id: string;
  /**
   * The object of the event. Always `event`.
   *
   */
  object?: 'event';
  /**
   * The type of the event. Always `eval.run.succeeded`.
   *
   */
  type: 'eval.run.succeeded';
};

/**
 * fine_tuning.job.cancelled
 *
 * Sent when a fine-tuning job has been cancelled.
 *
 */
export type WebhookFineTuningJobCancelled = {
  /**
   * The Unix timestamp (in seconds) of when the fine-tuning job was cancelled.
   *
   */
  created_at: number;
  /**
   * Event data payload.
   *
   */
  data: {
    /**
     * The unique ID of the fine-tuning job.
     *
     */
    id: string;
  };
  /**
   * The unique ID of the event.
   *
   */
  id: string;
  /**
   * The object of the event. Always `event`.
   *
   */
  object?: 'event';
  /**
   * The type of the event. Always `fine_tuning.job.cancelled`.
   *
   */
  type: 'fine_tuning.job.cancelled';
};

/**
 * fine_tuning.job.failed
 *
 * Sent when a fine-tuning job has failed.
 *
 */
export type WebhookFineTuningJobFailed = {
  /**
   * The Unix timestamp (in seconds) of when the fine-tuning job failed.
   *
   */
  created_at: number;
  /**
   * Event data payload.
   *
   */
  data: {
    /**
     * The unique ID of the fine-tuning job.
     *
     */
    id: string;
  };
  /**
   * The unique ID of the event.
   *
   */
  id: string;
  /**
   * The object of the event. Always `event`.
   *
   */
  object?: 'event';
  /**
   * The type of the event. Always `fine_tuning.job.failed`.
   *
   */
  type: 'fine_tuning.job.failed';
};

/**
 * fine_tuning.job.succeeded
 *
 * Sent when a fine-tuning job has succeeded.
 *
 */
export type WebhookFineTuningJobSucceeded = {
  /**
   * The Unix timestamp (in seconds) of when the fine-tuning job succeeded.
   *
   */
  created_at: number;
  /**
   * Event data payload.
   *
   */
  data: {
    /**
     * The unique ID of the fine-tuning job.
     *
     */
    id: string;
  };
  /**
   * The unique ID of the event.
   *
   */
  id: string;
  /**
   * The object of the event. Always `event`.
   *
   */
  object?: 'event';
  /**
   * The type of the event. Always `fine_tuning.job.succeeded`.
   *
   */
  type: 'fine_tuning.job.succeeded';
};

/**
 * response.cancelled
 *
 * Sent when a background response has been cancelled.
 *
 */
export type WebhookResponseCancelled = {
  /**
   * The Unix timestamp (in seconds) of when the model response was cancelled.
   *
   */
  created_at: number;
  /**
   * Event data payload.
   *
   */
  data: {
    /**
     * The unique ID of the model response.
     *
     */
    id: string;
  };
  /**
   * The unique ID of the event.
   *
   */
  id: string;
  /**
   * The object of the event. Always `event`.
   *
   */
  object?: 'event';
  /**
   * The type of the event. Always `response.cancelled`.
   *
   */
  type: 'response.cancelled';
};

/**
 * response.completed
 *
 * Sent when a background response has been completed.
 *
 */
export type WebhookResponseCompleted = {
  /**
   * The Unix timestamp (in seconds) of when the model response was completed.
   *
   */
  created_at: number;
  /**
   * Event data payload.
   *
   */
  data: {
    /**
     * The unique ID of the model response.
     *
     */
    id: string;
  };
  /**
   * The unique ID of the event.
   *
   */
  id: string;
  /**
   * The object of the event. Always `event`.
   *
   */
  object?: 'event';
  /**
   * The type of the event. Always `response.completed`.
   *
   */
  type: 'response.completed';
};

/**
 * response.failed
 *
 * Sent when a background response has failed.
 *
 */
export type WebhookResponseFailed = {
  /**
   * The Unix timestamp (in seconds) of when the model response failed.
   *
   */
  created_at: number;
  /**
   * Event data payload.
   *
   */
  data: {
    /**
     * The unique ID of the model response.
     *
     */
    id: string;
  };
  /**
   * The unique ID of the event.
   *
   */
  id: string;
  /**
   * The object of the event. Always `event`.
   *
   */
  object?: 'event';
  /**
   * The type of the event. Always `response.failed`.
   *
   */
  type: 'response.failed';
};

/**
 * response.incomplete
 *
 * Sent when a background response has been interrupted.
 *
 */
export type WebhookResponseIncomplete = {
  /**
   * The Unix timestamp (in seconds) of when the model response was interrupted.
   *
   */
  created_at: number;
  /**
   * Event data payload.
   *
   */
  data: {
    /**
     * The unique ID of the model response.
     *
     */
    id: string;
  };
  /**
   * The unique ID of the event.
   *
   */
  id: string;
  /**
   * The object of the event. Always `event`.
   *
   */
  object?: 'event';
  /**
   * The type of the event. Always `response.incomplete`.
   *
   */
  type: 'response.incomplete';
};

/**
 * Input text
 *
 * A text input to the model.
 */
export type InputTextContent = {
  /**
   * The text input to the model.
   */
  text: string;
  /**
   * The type of the input item. Always `input_text`.
   */
  type: 'input_text';
};

/**
 * Input image
 *
 * An image input to the model. Learn about [image inputs](https://platform.openai.com/docs/guides/vision).
 */
export type InputImageContent = {
  /**
   * The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`.
   */
  detail: 'low' | 'high' | 'auto';
  file_id?: string | null;
  image_url?: string | null;
  /**
   * The type of the input item. Always `input_image`.
   */
  type: 'input_image';
};

/**
 * Input file
 *
 * A file input to the model.
 */
export type InputFileContent = {
  /**
   * The content of the file to be sent to the model.
   *
   */
  file_data?: string;
  file_id?: string | null;
  /**
   * The URL of the file to be sent to the model.
   */
  file_url?: string;
  /**
   * The name of the file to be sent to the model.
   */
  filename?: string;
  /**
   * The type of the input item. Always `input_file`.
   */
  type: 'input_file';
};

/**
 * Function
 *
 * Defines a function in your own code the model can choose to call. Learn more about [function calling](https://platform.openai.com/docs/guides/function-calling).
 */
export type FunctionTool = {
  description?: string | null;
  /**
   * The name of the function to call.
   */
  name: string;
  parameters: {
    [key: string]: unknown;
  } | null;
  strict: boolean | null;
  /**
   * The type of the function tool. Always `function`.
   */
  type: 'function';
};

export type RankingOptions = {
  /**
   * The ranker to use for the file search.
   */
  ranker?: 'auto' | 'default-2024-11-15';
  /**
   * The score threshold for the file search, a number between 0 and 1. Numbers closer to 1 will attempt to return only the most relevant results, but may return fewer results.
   */
  score_threshold?: number;
};

export type Filters = ComparisonFilter | CompoundFilter;

/**
 * File search
 *
 * A tool that searches for relevant content from uploaded files. Learn more about the [file search tool](https://platform.openai.com/docs/guides/tools-file-search).
 */
export type FileSearchTool = {
  filters?: Filters | null;
  /**
   * The maximum number of results to return. This number should be between 1 and 50 inclusive.
   */
  max_num_results?: number;
  /**
   * Ranking options for search.
   */
  ranking_options?: RankingOptions;
  /**
   * The type of the file search tool. Always `file_search`.
   */
  type: 'file_search';
  /**
   * The IDs of the vector stores to search.
   */
  vector_store_ids: Array<string>;
};

export type ApproximateLocation = {
  city?: string | null;
  country?: string | null;
  region?: string | null;
  timezone?: string | null;
  /**
   * The type of location approximation. Always `approximate`.
   */
  type: 'approximate';
};

/**
 * Web search preview
 *
 * This tool searches the web for relevant results to use in a response. Learn more about the [web search tool](https://platform.openai.com/docs/guides/tools-web-search).
 */
export type WebSearchPreviewTool = {
  /**
   * High level guidance for the amount of context window space to use for the search. One of `low`, `medium`, or `high`. `medium` is the default.
   */
  search_context_size?: 'low' | 'medium' | 'high';
  /**
   * The type of the web search tool. One of `web_search_preview` or `web_search_preview_2025_03_11`.
   */
  type: 'web_search_preview' | 'web_search_preview_2025_03_11';
  user_location?: ApproximateLocation | null;
};

/**
 * Computer use preview
 *
 * A tool that controls a virtual computer. Learn more about the [computer tool](https://platform.openai.com/docs/guides/tools-computer-use).
 */
export type ComputerUsePreviewTool = {
  /**
   * The height of the computer display.
   */
  display_height: number;
  /**
   * The width of the computer display.
   */
  display_width: number;
  /**
   * The type of computer environment to control.
   */
  environment: 'windows' | 'mac' | 'linux' | 'ubuntu' | 'browser';
  /**
   * The type of the computer use tool. Always `computer_use_preview`.
   */
  type: 'computer_use_preview';
};

/**
 * Input usage details
 *
 * The input tokens detailed information for the image generation.
 */
export type ImageGenInputUsageDetails = {
  /**
   * The number of image tokens in the input prompt.
   */
  image_tokens: number;
  /**
   * The number of text tokens in the input prompt.
   */
  text_tokens: number;
};

/**
 * Image generation usage
 *
 * For `gpt-image-1` only, the token usage information for the image generation.
 */
export type ImageGenUsage = {
  /**
   * The number of tokens (images and text) in the input prompt.
   */
  input_tokens: number;
  input_tokens_details: ImageGenInputUsageDetails;
  /**
   * The number of output tokens generated by the model.
   */
  output_tokens: number;
  /**
   * The total number of tokens (images and text) used for the image generation.
   */
  total_tokens: number;
};

/**
 * File citation
 *
 * A citation to a file.
 */
export type FileCitationBody = {
  /**
   * The ID of the file.
   */
  file_id: string;
  /**
   * The filename of the file cited.
   */
  filename: string;
  /**
   * The index of the file in the list of files.
   */
  index: number;
  /**
   * The type of the file citation. Always `file_citation`.
   */
  type: 'file_citation';
};

/**
 * URL citation
 *
 * A citation for a web resource used to generate a model response.
 */
export type UrlCitationBody = {
  /**
   * The index of the last character of the URL citation in the message.
   */
  end_index: number;
  /**
   * The index of the first character of the URL citation in the message.
   */
  start_index: number;
  /**
   * The title of the web resource.
   */
  title: string;
  /**
   * The type of the URL citation. Always `url_citation`.
   */
  type: 'url_citation';
  /**
   * The URL of the web resource.
   */
  url: string;
};

/**
 * Container file citation
 *
 * A citation for a container file used to generate a model response.
 */
export type ContainerFileCitationBody = {
  /**
   * The ID of the container file.
   */
  container_id: string;
  /**
   * The index of the last character of the container file citation in the message.
   */
  end_index: number;
  /**
   * The ID of the file.
   */
  file_id: string;
  /**
   * The filename of the container file cited.
   */
  filename: string;
  /**
   * The index of the first character of the container file citation in the message.
   */
  start_index: number;
  /**
   * The type of the container file citation. Always `container_file_citation`.
   */
  type: 'container_file_citation';
};

export type Annotation =
  | ({
      type?: 'FileCitationBody';
    } & FileCitationBody)
  | ({
      type?: 'UrlCitationBody';
    } & UrlCitationBody)
  | ({
      type?: 'ContainerFileCitationBody';
    } & ContainerFileCitationBody)
  | ({
      type?: 'FilePath';
    } & FilePath);

/**
 * Top log probability
 *
 * The top log probability of a token.
 */
export type TopLogProb = {
  bytes: Array<number>;
  logprob: number;
  token: string;
};

/**
 * Log probability
 *
 * The log probability of a token.
 */
export type LogProb = {
  bytes: Array<number>;
  logprob: number;
  token: string;
  top_logprobs: Array<TopLogProb>;
};

/**
 * Output text
 *
 * A text output from the model.
 */
export type OutputTextContent = {
  /**
   * The annotations of the text output.
   */
  annotations: Array<Annotation>;
  logprobs?: Array<LogProb>;
  /**
   * The text output from the model.
   */
  text: string;
  /**
   * The type of the output text. Always `output_text`.
   */
  type: 'output_text';
};

/**
 * Refusal
 *
 * A refusal from the model.
 */
export type RefusalContent = {
  /**
   * The refusal explanation from the model.
   */
  refusal: string;
  /**
   * The type of the refusal. Always `refusal`.
   */
  type: 'refusal';
};

/**
 * A pending safety check for the computer call.
 */
export type ComputerCallSafetyCheckParam = {
  code?: string | null;
  /**
   * The ID of the pending safety check.
   */
  id: string;
  message?: string | null;
};

/**
 * Computer tool call output
 *
 * The output of a computer tool call.
 */
export type ComputerCallOutputItemParam = {
  acknowledged_safety_checks?: Array<ComputerCallSafetyCheckParam> | null;
  /**
   * The ID of the computer tool call that produced the output.
   */
  call_id: string;
  id?: string | null;
  output: ComputerScreenshotImage;
  status?: 'in_progress' | 'completed' | 'incomplete' | null;
  /**
   * The type of the computer tool call output. Always `computer_call_output`.
   */
  type: 'computer_call_output';
};

/**
 * Function tool call output
 *
 * The output of a function tool call.
 */
export type FunctionCallOutputItemParam = {
  /**
   * The unique ID of the function tool call generated by the model.
   */
  call_id: string;
  id?: string | null;
  /**
   * A JSON string of the output of the function tool call.
   */
  output: string;
  status?: 'in_progress' | 'completed' | 'incomplete' | null;
  /**
   * The type of the function tool call output. Always `function_call_output`.
   */
  type: 'function_call_output';
};

/**
 * Item reference
 *
 * An internal identifier for an item to reference.
 */
export type ItemReferenceParam = {
  /**
   * The ID of the item to reference.
   */
  id: string;
  type?: 'item_reference' | null;
};

export type RealtimeConversationItemContent = {
  /**
   * Base64-encoded audio bytes, used for `input_audio` content type.
   *
   */
  audio?: string;
  /**
   * ID of a previous conversation item to reference (for `item_reference`
   * content types in `response.create` events). These can reference both
   * client and server created items.
   *
   */
  id?: string;
  /**
   * The text content, used for `input_text` and `text` content types.
   *
   */
  text?: string;
  /**
   * The transcript of the audio, used for `input_audio` and `audio`
   * content types.
   *
   */
  transcript?: string;
  /**
   * The content type (`input_text`, `input_audio`, `item_reference`, `text`, `audio`).
   *
   */
  type?: 'input_text' | 'input_audio' | 'item_reference' | 'text' | 'audio';
};

export type RealtimeConnectParams = {
  model: string;
};

/**
 * An object describing an image to classify.
 */
export type ModerationImageUrlInput = {
  /**
   * Contains either an image URL or a data URL for a base64 encoded image.
   */
  image_url: {
    /**
     * Either a URL of the image or the base64 encoded image data.
     */
    url: string;
  };
  /**
   * Always `image_url`.
   */
  type: 'image_url';
};

/**
 * An object describing text to classify.
 */
export type ModerationTextInput = {
  /**
   * A string of text to classify.
   */
  text: string;
  /**
   * Always `text`.
   */
  type: 'text';
};

/**
 * The strategy used to chunk the file.
 */
export type ChunkingStrategyResponse =
  | ({
      type?: 'StaticChunkingStrategyResponseParam';
    } & StaticChunkingStrategyResponseParam)
  | ({
      type?: 'OtherChunkingStrategyResponseParam';
    } & OtherChunkingStrategyResponseParam);

/**
 * The intended purpose of the uploaded file. One of: - `assistants`: Used in the Assistants API - `batch`: Used in the Batch API - `fine-tune`: Used for fine-tuning - `vision`: Images used for vision fine-tuning - `user_data`: Flexible file type for any purpose - `evals`: Used for eval data sets
 *
 */
export const FilePurpose = {
  ASSISTANTS: 'assistants',
  BATCH: 'batch',
  EVALS: 'evals',
  FINE_TUNE: 'fine-tune',
  USER_DATA: 'user_data',
  VISION: 'vision',
} as const;

/**
 * The intended purpose of the uploaded file. One of: - `assistants`: Used in the Assistants API - `batch`: Used in the Batch API - `fine-tune`: Used for fine-tuning - `vision`: Images used for vision fine-tuning - `user_data`: Flexible file type for any purpose - `evals`: Used for eval data sets
 *
 */
export type FilePurpose = (typeof FilePurpose)[keyof typeof FilePurpose];

export type BatchError = {
  /**
   * An error code identifying the error type.
   */
  code?: string;
  /**
   * The line number of the input file where the error occurred, if applicable.
   */
  line?: number;
  /**
   * A human-readable message providing more details about the error.
   */
  message?: string;
  /**
   * The name of the parameter that caused the error, if applicable.
   */
  param?: string;
};

/**
 * The request counts for different statuses within the batch.
 */
export type BatchRequestCounts = {
  /**
   * Number of requests that have been completed successfully.
   */
  completed: number;
  /**
   * Number of requests that have failed.
   */
  failed: number;
  /**
   * Total number of requests in the batch.
   */
  total: number;
};

export type AssistantTool =
  | ({
      type?: 'AssistantToolsCode';
    } & AssistantToolsCode)
  | ({
      type?: 'AssistantToolsFileSearch';
    } & AssistantToolsFileSearch)
  | ({
      type?: 'AssistantToolsFunction';
    } & AssistantToolsFunction);

export type TextAnnotationDelta =
  | ({
      type?: 'MessageDeltaContentTextAnnotationsFileCitationObject';
    } & MessageDeltaContentTextAnnotationsFileCitationObject)
  | ({
      type?: 'MessageDeltaContentTextAnnotationsFilePathObject';
    } & MessageDeltaContentTextAnnotationsFilePathObject);

export type TextAnnotation =
  | ({
      type?: 'MessageContentTextAnnotationsFileCitationObject';
    } & MessageContentTextAnnotationsFileCitationObject)
  | ({
      type?: 'MessageContentTextAnnotationsFilePathObject';
    } & MessageContentTextAnnotationsFilePathObject);

export type RunStepDetailsToolCall =
  | ({
      type?: 'RunStepDetailsToolCallsCodeObject';
    } & RunStepDetailsToolCallsCodeObject)
  | ({
      type?: 'RunStepDetailsToolCallsFileSearchObject';
    } & RunStepDetailsToolCallsFileSearchObject)
  | ({
      type?: 'RunStepDetailsToolCallsFunctionObject';
    } & RunStepDetailsToolCallsFunctionObject);

export type RunStepDeltaStepDetailsToolCall =
  | ({
      type?: 'RunStepDeltaStepDetailsToolCallsCodeObject';
    } & RunStepDeltaStepDetailsToolCallsCodeObject)
  | ({
      type?: 'RunStepDeltaStepDetailsToolCallsFileSearchObject';
    } & RunStepDeltaStepDetailsToolCallsFileSearchObject)
  | ({
      type?: 'RunStepDeltaStepDetailsToolCallsFunctionObject';
    } & RunStepDeltaStepDetailsToolCallsFunctionObject);

export type MessageContent =
  | ({
      type?: 'MessageContentImageFileObject';
    } & MessageContentImageFileObject)
  | ({
      type?: 'MessageContentImageUrlObject';
    } & MessageContentImageUrlObject)
  | ({
      type?: 'MessageContentTextObject';
    } & MessageContentTextObject)
  | ({
      type?: 'MessageContentRefusalObject';
    } & MessageContentRefusalObject);

export type MessageContentDelta =
  | ({
      type?: 'MessageDeltaContentImageFileObject';
    } & MessageDeltaContentImageFileObject)
  | ({
      type?: 'MessageDeltaContentTextObject';
    } & MessageDeltaContentTextObject)
  | ({
      type?: 'MessageDeltaContentRefusalObject';
    } & MessageDeltaContentRefusalObject)
  | ({
      type?: 'MessageDeltaContentImageUrlObject';
    } & MessageDeltaContentImageUrlObject);

export const ChatModel = {
  CHATGPT_4O_LATEST: 'chatgpt-4o-latest',
  CODEX_MINI_LATEST: 'codex-mini-latest',
  GPT_3_5_TURBO: 'gpt-3.5-turbo',
  GPT_3_5_TURBO_0125: 'gpt-3.5-turbo-0125',
  GPT_3_5_TURBO_0301: 'gpt-3.5-turbo-0301',
  GPT_3_5_TURBO_0613: 'gpt-3.5-turbo-0613',
  GPT_3_5_TURBO_1106: 'gpt-3.5-turbo-1106',
  GPT_3_5_TURBO_16K: 'gpt-3.5-turbo-16k',
  GPT_3_5_TURBO_16K_0613: 'gpt-3.5-turbo-16k-0613',
  GPT_4: 'gpt-4',
  GPT_4O: 'gpt-4o',
  GPT_4O_2024_05_13: 'gpt-4o-2024-05-13',
  GPT_4O_2024_08_06: 'gpt-4o-2024-08-06',
  GPT_4O_2024_11_20: 'gpt-4o-2024-11-20',
  GPT_4O_AUDIO_PREVIEW: 'gpt-4o-audio-preview',
  GPT_4O_AUDIO_PREVIEW_2024_10_01: 'gpt-4o-audio-preview-2024-10-01',
  GPT_4O_AUDIO_PREVIEW_2024_12_17: 'gpt-4o-audio-preview-2024-12-17',
  GPT_4O_AUDIO_PREVIEW_2025_06_03: 'gpt-4o-audio-preview-2025-06-03',
  GPT_4O_MINI: 'gpt-4o-mini',
  GPT_4O_MINI_2024_07_18: 'gpt-4o-mini-2024-07-18',
  GPT_4O_MINI_AUDIO_PREVIEW: 'gpt-4o-mini-audio-preview',
  GPT_4O_MINI_AUDIO_PREVIEW_2024_12_17: 'gpt-4o-mini-audio-preview-2024-12-17',
  GPT_4O_MINI_SEARCH_PREVIEW: 'gpt-4o-mini-search-preview',
  GPT_4O_MINI_SEARCH_PREVIEW_2025_03_11:
    'gpt-4o-mini-search-preview-2025-03-11',
  GPT_4O_SEARCH_PREVIEW: 'gpt-4o-search-preview',
  GPT_4O_SEARCH_PREVIEW_2025_03_11: 'gpt-4o-search-preview-2025-03-11',
  GPT_4_0125_PREVIEW: 'gpt-4-0125-preview',
  GPT_4_0314: 'gpt-4-0314',
  GPT_4_0613: 'gpt-4-0613',
  GPT_4_1: 'gpt-4.1',
  GPT_4_1106_PREVIEW: 'gpt-4-1106-preview',
  GPT_4_1_2025_04_14: 'gpt-4.1-2025-04-14',
  GPT_4_1_MINI: 'gpt-4.1-mini',
  GPT_4_1_MINI_2025_04_14: 'gpt-4.1-mini-2025-04-14',
  GPT_4_1_NANO: 'gpt-4.1-nano',
  GPT_4_1_NANO_2025_04_14: 'gpt-4.1-nano-2025-04-14',
  GPT_4_32K: 'gpt-4-32k',
  GPT_4_32K_0314: 'gpt-4-32k-0314',
  GPT_4_32K_0613: 'gpt-4-32k-0613',
  GPT_4_TURBO: 'gpt-4-turbo',
  GPT_4_TURBO_2024_04_09: 'gpt-4-turbo-2024-04-09',
  GPT_4_TURBO_PREVIEW: 'gpt-4-turbo-preview',
  GPT_4_VISION_PREVIEW: 'gpt-4-vision-preview',
  GPT_5: 'gpt-5',
  GPT_5_2025_08_07: 'gpt-5-2025-08-07',
  GPT_5_CHAT_LATEST: 'gpt-5-chat-latest',
  GPT_5_MINI: 'gpt-5-mini',
  GPT_5_MINI_2025_08_07: 'gpt-5-mini-2025-08-07',
  GPT_5_NANO: 'gpt-5-nano',
  GPT_5_NANO_2025_08_07: 'gpt-5-nano-2025-08-07',
  O1: 'o1',
  O1_2024_12_17: 'o1-2024-12-17',
  O1_MINI: 'o1-mini',
  O1_MINI_2024_09_12: 'o1-mini-2024-09-12',
  O1_PREVIEW: 'o1-preview',
  O1_PREVIEW_2024_09_12: 'o1-preview-2024-09-12',
  O3: 'o3',
  O3_2025_04_16: 'o3-2025-04-16',
  O3_MINI: 'o3-mini',
  O3_MINI_2025_01_31: 'o3-mini-2025-01-31',
  O4_MINI: 'o4-mini',
  O4_MINI_2025_04_16: 'o4-mini-2025-04-16',
} as const;

export type ChatModel = (typeof ChatModel)[keyof typeof ChatModel];

export type CreateThreadAndRunRequestWithoutStream = {
  /**
   * The ID of the [assistant](https://platform.openai.com/docs/api-reference/assistants) to use to execute this run.
   */
  assistant_id: string;
  /**
   * Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.
   */
  instructions?: string;
  /**
   * The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
   *
   */
  max_completion_tokens?: number;
  /**
   * The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
   *
   */
  max_prompt_tokens?: number;
  metadata?: Metadata;
  /**
   * The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
   */
  model?:
    | string
    | 'gpt-5'
    | 'gpt-5-mini'
    | 'gpt-5-nano'
    | 'gpt-5-2025-08-07'
    | 'gpt-5-mini-2025-08-07'
    | 'gpt-5-nano-2025-08-07'
    | 'gpt-4.1'
    | 'gpt-4.1-mini'
    | 'gpt-4.1-nano'
    | 'gpt-4.1-2025-04-14'
    | 'gpt-4.1-mini-2025-04-14'
    | 'gpt-4.1-nano-2025-04-14'
    | 'gpt-4o'
    | 'gpt-4o-2024-11-20'
    | 'gpt-4o-2024-08-06'
    | 'gpt-4o-2024-05-13'
    | 'gpt-4o-mini'
    | 'gpt-4o-mini-2024-07-18'
    | 'gpt-4.5-preview'
    | 'gpt-4.5-preview-2025-02-27'
    | 'gpt-4-turbo'
    | 'gpt-4-turbo-2024-04-09'
    | 'gpt-4-0125-preview'
    | 'gpt-4-turbo-preview'
    | 'gpt-4-1106-preview'
    | 'gpt-4-vision-preview'
    | 'gpt-4'
    | 'gpt-4-0314'
    | 'gpt-4-0613'
    | 'gpt-4-32k'
    | 'gpt-4-32k-0314'
    | 'gpt-4-32k-0613'
    | 'gpt-3.5-turbo'
    | 'gpt-3.5-turbo-16k'
    | 'gpt-3.5-turbo-0613'
    | 'gpt-3.5-turbo-1106'
    | 'gpt-3.5-turbo-0125'
    | 'gpt-3.5-turbo-16k-0613';
  parallel_tool_calls?: ParallelToolCalls;
  response_format?: AssistantsApiResponseFormatOption;
  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
   *
   */
  temperature?: number;
  thread?: CreateThreadRequest;
  tool_choice?: AssistantsApiToolChoiceOption & unknown;
  /**
   * A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
   *
   */
  tool_resources?: {
    code_interpreter?: {
      /**
       * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
       *
       */
      file_ids?: Array<string>;
    };
    file_search?: {
      /**
       * The ID of the [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
       *
       */
      vector_store_ids?: Array<string>;
    };
  };
  /**
   * Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
   */
  tools?: Array<AssistantTool>;
  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
   *
   * We generally recommend altering this or temperature but not both.
   *
   */
  top_p?: number;
  truncation_strategy?: TruncationObject & unknown;
};

export type CreateRunRequestWithoutStream = {
  /**
   * Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.
   */
  additional_instructions?: string;
  /**
   * Adds additional messages to the thread before creating the run.
   */
  additional_messages?: Array<CreateMessageRequest>;
  /**
   * The ID of the [assistant](https://platform.openai.com/docs/api-reference/assistants) to use to execute this run.
   */
  assistant_id: string;
  /**
   * Overrides the [instructions](https://platform.openai.com/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.
   */
  instructions?: string;
  /**
   * The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
   *
   */
  max_completion_tokens?: number;
  /**
   * The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
   *
   */
  max_prompt_tokens?: number;
  metadata?: Metadata;
  /**
   * The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
   */
  model?: string | AssistantSupportedModels;
  parallel_tool_calls?: ParallelToolCalls;
  reasoning_effort?: ReasoningEffort;
  response_format?: AssistantsApiResponseFormatOption;
  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
   *
   */
  temperature?: number;
  tool_choice?: AssistantsApiToolChoiceOption & unknown;
  /**
   * Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
   */
  tools?: Array<AssistantTool>;
  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
   *
   * We generally recommend altering this or temperature but not both.
   *
   */
  top_p?: number;
  truncation_strategy?: TruncationObject & unknown;
};

export type SubmitToolOutputsRunRequestWithoutStream = {
  /**
   * A list of tools for which the outputs are being submitted.
   */
  tool_outputs: Array<{
    /**
     * The output of the tool call to be submitted to continue the run.
     */
    output?: string;
    /**
     * The ID of the tool call in the `required_action` object within the run object the output is being submitted for.
     */
    tool_call_id?: string;
  }>;
};

/**
 * The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.
 */
export const RunStatus = {
  CANCELLED: 'cancelled',
  CANCELLING: 'cancelling',
  COMPLETED: 'completed',
  EXPIRED: 'expired',
  FAILED: 'failed',
  INCOMPLETE: 'incomplete',
  IN_PROGRESS: 'in_progress',
  QUEUED: 'queued',
  REQUIRES_ACTION: 'requires_action',
} as const;

/**
 * The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.
 */
export type RunStatus = (typeof RunStatus)[keyof typeof RunStatus];

/**
 * The delta containing the fields that have changed on the run step.
 */
export type RunStepDeltaObjectDelta = {
  /**
   * The details of the run step.
   */
  step_details?:
    | ({
        type?: 'RunStepDeltaStepDetailsMessageCreationObject';
      } & RunStepDeltaStepDetailsMessageCreationObject)
    | ({
        type?: 'RunStepDeltaStepDetailsToolCallsObject';
      } & RunStepDeltaStepDetailsToolCallsObject);
};

export type ListAssistantsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
     *
     */
    after?: string;
    /**
     * A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
     *
     */
    before?: string;
    /**
     * A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
     *
     */
    limit?: number;
    /**
     * Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
     *
     */
    order?: 'asc' | 'desc';
  };
  url: '/assistants';
};

export type ListAssistantsResponses = {
  /**
   * OK
   */
  200: ListAssistantsResponse;
};

export type ListAssistantsResponse2 =
  ListAssistantsResponses[keyof ListAssistantsResponses];

export type CreateAssistantData = {
  body: CreateAssistantRequest;
  path?: never;
  query?: never;
  url: '/assistants';
};

export type CreateAssistantResponses = {
  /**
   * OK
   */
  200: AssistantObject;
};

export type CreateAssistantResponse =
  CreateAssistantResponses[keyof CreateAssistantResponses];

export type DeleteAssistantData = {
  body?: never;
  path: {
    /**
     * The ID of the assistant to delete.
     */
    assistant_id: string;
  };
  query?: never;
  url: '/assistants/{assistant_id}';
};

export type DeleteAssistantResponses = {
  /**
   * OK
   */
  200: DeleteAssistantResponse;
};

export type DeleteAssistantResponse2 =
  DeleteAssistantResponses[keyof DeleteAssistantResponses];

export type GetAssistantData = {
  body?: never;
  path: {
    /**
     * The ID of the assistant to retrieve.
     */
    assistant_id: string;
  };
  query?: never;
  url: '/assistants/{assistant_id}';
};

export type GetAssistantResponses = {
  /**
   * OK
   */
  200: AssistantObject;
};

export type GetAssistantResponse =
  GetAssistantResponses[keyof GetAssistantResponses];

export type ModifyAssistantData = {
  body: ModifyAssistantRequest;
  path: {
    /**
     * The ID of the assistant to modify.
     */
    assistant_id: string;
  };
  query?: never;
  url: '/assistants/{assistant_id}';
};

export type ModifyAssistantResponses = {
  /**
   * OK
   */
  200: AssistantObject;
};

export type ModifyAssistantResponse =
  ModifyAssistantResponses[keyof ModifyAssistantResponses];

export type CreateSpeechData = {
  body: CreateSpeechRequest;
  path?: never;
  query?: never;
  url: '/audio/speech';
};

export type CreateSpeechResponses = {
  /**
   * OK
   */
  200: Blob | File;
};

export type CreateSpeechResponse =
  CreateSpeechResponses[keyof CreateSpeechResponses];

export type CreateTranscriptionData = {
  body: CreateTranscriptionRequest;
  path?: never;
  query?: never;
  url: '/audio/transcriptions';
};

export type CreateTranscriptionResponses = {
  /**
   * OK
   */
  200: CreateTranscriptionResponseJson | CreateTranscriptionResponseVerboseJson;
};

export type CreateTranscriptionResponse =
  CreateTranscriptionResponses[keyof CreateTranscriptionResponses];

export type CreateTranslationData = {
  body: CreateTranslationRequest;
  path?: never;
  query?: never;
  url: '/audio/translations';
};

export type CreateTranslationResponses = {
  /**
   * OK
   */
  200: CreateTranslationResponseJson | CreateTranslationResponseVerboseJson;
};

export type CreateTranslationResponse =
  CreateTranslationResponses[keyof CreateTranslationResponses];

export type ListBatchesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
     *
     */
    after?: string;
    /**
     * A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
     *
     */
    limit?: number;
  };
  url: '/batches';
};

export type ListBatchesResponses = {
  /**
   * Batch listed successfully.
   */
  200: ListBatchesResponse;
};

export type ListBatchesResponse2 =
  ListBatchesResponses[keyof ListBatchesResponses];

export type CreateBatchData = {
  body: {
    /**
     * The time frame within which the batch should be processed. Currently only `24h` is supported.
     */
    completion_window: '24h';
    /**
     * The endpoint to be used for all requests in the batch. Currently `/v1/responses`, `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported. Note that `/v1/embeddings` batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch.
     */
    endpoint:
      | '/v1/responses'
      | '/v1/chat/completions'
      | '/v1/embeddings'
      | '/v1/completions';
    /**
     * The ID of an uploaded file that contains requests for the new batch.
     *
     * See [upload file](https://platform.openai.com/docs/api-reference/files/create) for how to upload a file.
     *
     * Your input file must be formatted as a [JSONL file](https://platform.openai.com/docs/api-reference/batch/request-input), and must be uploaded with the purpose `batch`. The file can contain up to 50,000 requests, and can be up to 200 MB in size.
     *
     */
    input_file_id: string;
    metadata?: Metadata;
    output_expires_after?: BatchFileExpirationAfter;
  };
  path?: never;
  query?: never;
  url: '/batches';
};

export type CreateBatchResponses = {
  /**
   * Batch created successfully.
   */
  200: Batch;
};

export type CreateBatchResponse =
  CreateBatchResponses[keyof CreateBatchResponses];

export type RetrieveBatchData = {
  body?: never;
  path: {
    /**
     * The ID of the batch to retrieve.
     */
    batch_id: string;
  };
  query?: never;
  url: '/batches/{batch_id}';
};

export type RetrieveBatchResponses = {
  /**
   * Batch retrieved successfully.
   */
  200: Batch;
};

export type RetrieveBatchResponse =
  RetrieveBatchResponses[keyof RetrieveBatchResponses];

export type CancelBatchData = {
  body?: never;
  path: {
    /**
     * The ID of the batch to cancel.
     */
    batch_id: string;
  };
  query?: never;
  url: '/batches/{batch_id}/cancel';
};

export type CancelBatchResponses = {
  /**
   * Batch is cancelling. Returns the cancelling batch's details.
   */
  200: Batch;
};

export type CancelBatchResponse =
  CancelBatchResponses[keyof CancelBatchResponses];

export type ListChatCompletionsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Identifier for the last chat completion from the previous pagination request.
     */
    after?: string;
    /**
     * Number of Chat Completions to retrieve.
     */
    limit?: number;
    /**
     * A list of metadata keys to filter the Chat Completions by. Example:
     *
     * `metadata[key1]=value1&metadata[key2]=value2`
     *
     */
    metadata?: Metadata;
    /**
     * The model used to generate the Chat Completions.
     */
    model?: string;
    /**
     * Sort order for Chat Completions by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`.
     */
    order?: 'asc' | 'desc';
  };
  url: '/chat/completions';
};

export type ListChatCompletionsResponses = {
  /**
   * A list of Chat Completions
   */
  200: ChatCompletionList;
};

export type ListChatCompletionsResponse =
  ListChatCompletionsResponses[keyof ListChatCompletionsResponses];

export type CreateChatCompletionData = {
  body: CreateChatCompletionRequest;
  path?: never;
  query?: never;
  url: '/chat/completions';
};

export type CreateChatCompletionResponses = {
  /**
   * OK
   */
  200: CreateChatCompletionResponse;
};

export type CreateChatCompletionResponse2 =
  CreateChatCompletionResponses[keyof CreateChatCompletionResponses];

export type DeleteChatCompletionData = {
  body?: never;
  path: {
    /**
     * The ID of the chat completion to delete.
     */
    completion_id: string;
  };
  query?: never;
  url: '/chat/completions/{completion_id}';
};

export type DeleteChatCompletionResponses = {
  /**
   * The chat completion was deleted successfully.
   */
  200: ChatCompletionDeleted;
};

export type DeleteChatCompletionResponse =
  DeleteChatCompletionResponses[keyof DeleteChatCompletionResponses];

export type GetChatCompletionData = {
  body?: never;
  path: {
    /**
     * The ID of the chat completion to retrieve.
     */
    completion_id: string;
  };
  query?: never;
  url: '/chat/completions/{completion_id}';
};

export type GetChatCompletionResponses = {
  /**
   * A chat completion
   */
  200: CreateChatCompletionResponse;
};

export type GetChatCompletionResponse =
  GetChatCompletionResponses[keyof GetChatCompletionResponses];

export type UpdateChatCompletionData = {
  body: {
    metadata: Metadata;
  };
  path: {
    /**
     * The ID of the chat completion to update.
     */
    completion_id: string;
  };
  query?: never;
  url: '/chat/completions/{completion_id}';
};

export type UpdateChatCompletionResponses = {
  /**
   * A chat completion
   */
  200: CreateChatCompletionResponse;
};

export type UpdateChatCompletionResponse =
  UpdateChatCompletionResponses[keyof UpdateChatCompletionResponses];

export type GetChatCompletionMessagesData = {
  body?: never;
  path: {
    /**
     * The ID of the chat completion to retrieve messages from.
     */
    completion_id: string;
  };
  query?: {
    /**
     * Identifier for the last message from the previous pagination request.
     */
    after?: string;
    /**
     * Number of messages to retrieve.
     */
    limit?: number;
    /**
     * Sort order for messages by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`.
     */
    order?: 'asc' | 'desc';
  };
  url: '/chat/completions/{completion_id}/messages';
};

export type GetChatCompletionMessagesResponses = {
  /**
   * A list of messages
   */
  200: ChatCompletionMessageList;
};

export type GetChatCompletionMessagesResponse =
  GetChatCompletionMessagesResponses[keyof GetChatCompletionMessagesResponses];

export type CreateCompletionData = {
  body: CreateCompletionRequest;
  path?: never;
  query?: never;
  url: '/completions';
};

export type CreateCompletionResponses = {
  /**
   * OK
   */
  200: CreateCompletionResponse;
};

export type CreateCompletionResponse2 =
  CreateCompletionResponses[keyof CreateCompletionResponses];

export type ListContainersData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
     *
     */
    after?: string;
    /**
     * A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
     *
     */
    limit?: number;
    /**
     * Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
     *
     */
    order?: 'asc' | 'desc';
  };
  url: '/containers';
};

export type ListContainersResponses = {
  /**
   * Success
   */
  200: ContainerListResource;
};

export type ListContainersResponse =
  ListContainersResponses[keyof ListContainersResponses];

export type CreateContainerData = {
  body?: CreateContainerBody;
  path?: never;
  query?: never;
  url: '/containers';
};

export type CreateContainerResponses = {
  /**
   * Success
   */
  200: ContainerResource;
};

export type CreateContainerResponse =
  CreateContainerResponses[keyof CreateContainerResponses];

export type DeleteContainerData = {
  body?: never;
  path: {
    /**
     * The ID of the container to delete.
     */
    container_id: string;
  };
  query?: never;
  url: '/containers/{container_id}';
};

export type DeleteContainerResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type RetrieveContainerData = {
  body?: never;
  path: {
    container_id: string;
  };
  query?: never;
  url: '/containers/{container_id}';
};

export type RetrieveContainerResponses = {
  /**
   * Success
   */
  200: ContainerResource;
};

export type RetrieveContainerResponse =
  RetrieveContainerResponses[keyof RetrieveContainerResponses];

export type ListContainerFilesData = {
  body?: never;
  path: {
    container_id: string;
  };
  query?: {
    /**
     * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
     *
     */
    after?: string;
    /**
     * A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
     *
     */
    limit?: number;
    /**
     * Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
     *
     */
    order?: 'asc' | 'desc';
  };
  url: '/containers/{container_id}/files';
};

export type ListContainerFilesResponses = {
  /**
   * Success
   */
  200: ContainerFileListResource;
};

export type ListContainerFilesResponse =
  ListContainerFilesResponses[keyof ListContainerFilesResponses];

export type CreateContainerFileData = {
  body: CreateContainerFileBody;
  path: {
    container_id: string;
  };
  query?: never;
  url: '/containers/{container_id}/files';
};

export type CreateContainerFileResponses = {
  /**
   * Success
   */
  200: ContainerFileResource;
};

export type CreateContainerFileResponse =
  CreateContainerFileResponses[keyof CreateContainerFileResponses];

export type DeleteContainerFileData = {
  body?: never;
  path: {
    container_id: string;
    file_id: string;
  };
  query?: never;
  url: '/containers/{container_id}/files/{file_id}';
};

export type DeleteContainerFileResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type RetrieveContainerFileData = {
  body?: never;
  path: {
    container_id: string;
    file_id: string;
  };
  query?: never;
  url: '/containers/{container_id}/files/{file_id}';
};

export type RetrieveContainerFileResponses = {
  /**
   * Success
   */
  200: ContainerFileResource;
};

export type RetrieveContainerFileResponse =
  RetrieveContainerFileResponses[keyof RetrieveContainerFileResponses];

export type RetrieveContainerFileContentData = {
  body?: never;
  path: {
    container_id: string;
    file_id: string;
  };
  query?: never;
  url: '/containers/{container_id}/files/{file_id}/content';
};

export type RetrieveContainerFileContentResponses = {
  /**
   * Success
   */
  200: unknown;
};

export type CreateEmbeddingData = {
  body: CreateEmbeddingRequest;
  path?: never;
  query?: never;
  url: '/embeddings';
};

export type CreateEmbeddingResponses = {
  /**
   * OK
   */
  200: CreateEmbeddingResponse;
};

export type CreateEmbeddingResponse2 =
  CreateEmbeddingResponses[keyof CreateEmbeddingResponses];

export type ListEvalsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Identifier for the last eval from the previous pagination request.
     */
    after?: string;
    /**
     * Number of evals to retrieve.
     */
    limit?: number;
    /**
     * Sort order for evals by timestamp. Use `asc` for ascending order or `desc` for descending order.
     */
    order?: 'asc' | 'desc';
    /**
     * Evals can be ordered by creation time or last updated time. Use
     * `created_at` for creation time or `updated_at` for last updated time.
     *
     */
    order_by?: 'created_at' | 'updated_at';
  };
  url: '/evals';
};

export type ListEvalsResponses = {
  /**
   * A list of evals
   */
  200: EvalList;
};

export type ListEvalsResponse = ListEvalsResponses[keyof ListEvalsResponses];

export type CreateEvalData = {
  body: CreateEvalRequest;
  path?: never;
  query?: never;
  url: '/evals';
};

export type CreateEvalResponses = {
  /**
   * OK
   */
  201: Eval;
};

export type CreateEvalResponse = CreateEvalResponses[keyof CreateEvalResponses];

export type DeleteEvalData = {
  body?: never;
  path: {
    /**
     * The ID of the evaluation to delete.
     */
    eval_id: string;
  };
  query?: never;
  url: '/evals/{eval_id}';
};

export type DeleteEvalErrors = {
  /**
   * Evaluation not found.
   */
  404: _Error;
};

export type DeleteEvalError = DeleteEvalErrors[keyof DeleteEvalErrors];

export type DeleteEvalResponses = {
  /**
   * Successfully deleted the evaluation.
   */
  200: {
    deleted: boolean;
    eval_id: string;
    object: string;
  };
};

export type DeleteEvalResponse = DeleteEvalResponses[keyof DeleteEvalResponses];

export type GetEvalData = {
  body?: never;
  path: {
    /**
     * The ID of the evaluation to retrieve.
     */
    eval_id: string;
  };
  query?: never;
  url: '/evals/{eval_id}';
};

export type GetEvalResponses = {
  /**
   * The evaluation
   */
  200: Eval;
};

export type GetEvalResponse = GetEvalResponses[keyof GetEvalResponses];

export type UpdateEvalData = {
  /**
   * Request to update an evaluation
   */
  body: {
    metadata?: Metadata;
    /**
     * Rename the evaluation.
     */
    name?: string;
  };
  path: {
    /**
     * The ID of the evaluation to update.
     */
    eval_id: string;
  };
  query?: never;
  url: '/evals/{eval_id}';
};

export type UpdateEvalResponses = {
  /**
   * The updated evaluation
   */
  200: Eval;
};

export type UpdateEvalResponse = UpdateEvalResponses[keyof UpdateEvalResponses];

export type GetEvalRunsData = {
  body?: never;
  path: {
    /**
     * The ID of the evaluation to retrieve runs for.
     */
    eval_id: string;
  };
  query?: {
    /**
     * Identifier for the last run from the previous pagination request.
     */
    after?: string;
    /**
     * Number of runs to retrieve.
     */
    limit?: number;
    /**
     * Sort order for runs by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`.
     */
    order?: 'asc' | 'desc';
    /**
     * Filter runs by status. One of `queued` | `in_progress` | `failed` | `completed` | `canceled`.
     */
    status?: 'queued' | 'in_progress' | 'completed' | 'canceled' | 'failed';
  };
  url: '/evals/{eval_id}/runs';
};

export type GetEvalRunsResponses = {
  /**
   * A list of runs for the evaluation
   */
  200: EvalRunList;
};

export type GetEvalRunsResponse =
  GetEvalRunsResponses[keyof GetEvalRunsResponses];

export type CreateEvalRunData = {
  body: CreateEvalRunRequest;
  path: {
    /**
     * The ID of the evaluation to create a run for.
     */
    eval_id: string;
  };
  query?: never;
  url: '/evals/{eval_id}/runs';
};

export type CreateEvalRunErrors = {
  /**
   * Bad request (for example, missing eval object)
   */
  400: _Error;
};

export type CreateEvalRunError = CreateEvalRunErrors[keyof CreateEvalRunErrors];

export type CreateEvalRunResponses = {
  /**
   * Successfully created a run for the evaluation
   */
  201: EvalRun;
};

export type CreateEvalRunResponse =
  CreateEvalRunResponses[keyof CreateEvalRunResponses];

export type DeleteEvalRunData = {
  body?: never;
  path: {
    /**
     * The ID of the evaluation to delete the run from.
     */
    eval_id: string;
    /**
     * The ID of the run to delete.
     */
    run_id: string;
  };
  query?: never;
  url: '/evals/{eval_id}/runs/{run_id}';
};

export type DeleteEvalRunErrors = {
  /**
   * Run not found
   */
  404: _Error;
};

export type DeleteEvalRunError = DeleteEvalRunErrors[keyof DeleteEvalRunErrors];

export type DeleteEvalRunResponses = {
  /**
   * Successfully deleted the eval run
   */
  200: {
    deleted?: boolean;
    object?: string;
    run_id?: string;
  };
};

export type DeleteEvalRunResponse =
  DeleteEvalRunResponses[keyof DeleteEvalRunResponses];

export type GetEvalRunData = {
  body?: never;
  path: {
    /**
     * The ID of the evaluation to retrieve runs for.
     */
    eval_id: string;
    /**
     * The ID of the run to retrieve.
     */
    run_id: string;
  };
  query?: never;
  url: '/evals/{eval_id}/runs/{run_id}';
};

export type GetEvalRunResponses = {
  /**
   * The evaluation run
   */
  200: EvalRun;
};

export type GetEvalRunResponse = GetEvalRunResponses[keyof GetEvalRunResponses];

export type CancelEvalRunData = {
  body?: never;
  path: {
    /**
     * The ID of the evaluation whose run you want to cancel.
     */
    eval_id: string;
    /**
     * The ID of the run to cancel.
     */
    run_id: string;
  };
  query?: never;
  url: '/evals/{eval_id}/runs/{run_id}';
};

export type CancelEvalRunResponses = {
  /**
   * The canceled eval run object
   */
  200: EvalRun;
};

export type CancelEvalRunResponse =
  CancelEvalRunResponses[keyof CancelEvalRunResponses];

export type GetEvalRunOutputItemsData = {
  body?: never;
  path: {
    /**
     * The ID of the evaluation to retrieve runs for.
     */
    eval_id: string;
    /**
     * The ID of the run to retrieve output items for.
     */
    run_id: string;
  };
  query?: {
    /**
     * Identifier for the last output item from the previous pagination request.
     */
    after?: string;
    /**
     * Number of output items to retrieve.
     */
    limit?: number;
    /**
     * Sort order for output items by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`.
     */
    order?: 'asc' | 'desc';
    /**
     * Filter output items by status. Use `failed` to filter by failed output
     * items or `pass` to filter by passed output items.
     *
     */
    status?: 'fail' | 'pass';
  };
  url: '/evals/{eval_id}/runs/{run_id}/output_items';
};

export type GetEvalRunOutputItemsResponses = {
  /**
   * A list of output items for the evaluation run
   */
  200: EvalRunOutputItemList;
};

export type GetEvalRunOutputItemsResponse =
  GetEvalRunOutputItemsResponses[keyof GetEvalRunOutputItemsResponses];

export type GetEvalRunOutputItemData = {
  body?: never;
  path: {
    /**
     * The ID of the evaluation to retrieve runs for.
     */
    eval_id: string;
    /**
     * The ID of the output item to retrieve.
     */
    output_item_id: string;
    /**
     * The ID of the run to retrieve.
     */
    run_id: string;
  };
  query?: never;
  url: '/evals/{eval_id}/runs/{run_id}/output_items/{output_item_id}';
};

export type GetEvalRunOutputItemResponses = {
  /**
   * The evaluation run output item
   */
  200: EvalRunOutputItem;
};

export type GetEvalRunOutputItemResponse =
  GetEvalRunOutputItemResponses[keyof GetEvalRunOutputItemResponses];

export type ListFilesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
     *
     */
    after?: string;
    /**
     * A limit on the number of objects to be returned. Limit can range between 1 and 10,000, and the default is 10,000.
     *
     */
    limit?: number;
    /**
     * Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
     *
     */
    order?: 'asc' | 'desc';
    /**
     * Only return files with the given purpose.
     */
    purpose?: string;
  };
  url: '/files';
};

export type ListFilesResponses = {
  /**
   * OK
   */
  200: ListFilesResponse;
};

export type ListFilesResponse2 = ListFilesResponses[keyof ListFilesResponses];

export type CreateFileData = {
  body: CreateFileRequest;
  path?: never;
  query?: never;
  url: '/files';
};

export type CreateFileResponses = {
  /**
   * OK
   */
  200: OpenAiFile;
};

export type CreateFileResponse = CreateFileResponses[keyof CreateFileResponses];

export type DeleteFileData = {
  body?: never;
  path: {
    /**
     * The ID of the file to use for this request.
     */
    file_id: string;
  };
  query?: never;
  url: '/files/{file_id}';
};

export type DeleteFileResponses = {
  /**
   * OK
   */
  200: DeleteFileResponse;
};

export type DeleteFileResponse2 =
  DeleteFileResponses[keyof DeleteFileResponses];

export type RetrieveFileData = {
  body?: never;
  path: {
    /**
     * The ID of the file to use for this request.
     */
    file_id: string;
  };
  query?: never;
  url: '/files/{file_id}';
};

export type RetrieveFileResponses = {
  /**
   * OK
   */
  200: OpenAiFile;
};

export type RetrieveFileResponse =
  RetrieveFileResponses[keyof RetrieveFileResponses];

export type DownloadFileData = {
  body?: never;
  path: {
    /**
     * The ID of the file to use for this request.
     */
    file_id: string;
  };
  query?: never;
  url: '/files/{file_id}/content';
};

export type DownloadFileResponses = {
  /**
   * OK
   */
  200: string;
};

export type DownloadFileResponse =
  DownloadFileResponses[keyof DownloadFileResponses];

export type RunGraderData = {
  body: RunGraderRequest;
  path?: never;
  query?: never;
  url: '/fine_tuning/alpha/graders/run';
};

export type RunGraderResponses = {
  /**
   * OK
   */
  200: RunGraderResponse;
};

export type RunGraderResponse2 = RunGraderResponses[keyof RunGraderResponses];

export type ValidateGraderData = {
  body: ValidateGraderRequest;
  path?: never;
  query?: never;
  url: '/fine_tuning/alpha/graders/validate';
};

export type ValidateGraderResponses = {
  /**
   * OK
   */
  200: ValidateGraderResponse;
};

export type ValidateGraderResponse2 =
  ValidateGraderResponses[keyof ValidateGraderResponses];

export type ListFineTuningCheckpointPermissionsData = {
  body?: never;
  path: {
    /**
     * The ID of the fine-tuned model checkpoint to get permissions for.
     *
     */
    fine_tuned_model_checkpoint: string;
  };
  query?: {
    /**
     * Identifier for the last permission ID from the previous pagination request.
     */
    after?: string;
    /**
     * Number of permissions to retrieve.
     */
    limit?: number;
    /**
     * The order in which to retrieve permissions.
     */
    order?: 'ascending' | 'descending';
    /**
     * The ID of the project to get permissions for.
     */
    project_id?: string;
  };
  url: '/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions';
};

export type ListFineTuningCheckpointPermissionsResponses = {
  /**
   * OK
   */
  200: ListFineTuningCheckpointPermissionResponse;
};

export type ListFineTuningCheckpointPermissionsResponse =
  ListFineTuningCheckpointPermissionsResponses[keyof ListFineTuningCheckpointPermissionsResponses];

export type CreateFineTuningCheckpointPermissionData = {
  body: CreateFineTuningCheckpointPermissionRequest;
  path: {
    /**
     * The ID of the fine-tuned model checkpoint to create a permission for.
     *
     */
    fine_tuned_model_checkpoint: string;
  };
  query?: never;
  url: '/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions';
};

export type CreateFineTuningCheckpointPermissionResponses = {
  /**
   * OK
   */
  200: ListFineTuningCheckpointPermissionResponse;
};

export type CreateFineTuningCheckpointPermissionResponse =
  CreateFineTuningCheckpointPermissionResponses[keyof CreateFineTuningCheckpointPermissionResponses];

export type DeleteFineTuningCheckpointPermissionData = {
  body?: never;
  path: {
    /**
     * The ID of the fine-tuned model checkpoint to delete a permission for.
     *
     */
    fine_tuned_model_checkpoint: string;
    /**
     * The ID of the fine-tuned model checkpoint permission to delete.
     *
     */
    permission_id: string;
  };
  query?: never;
  url: '/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/{permission_id}';
};

export type DeleteFineTuningCheckpointPermissionResponses = {
  /**
   * OK
   */
  200: DeleteFineTuningCheckpointPermissionResponse;
};

export type DeleteFineTuningCheckpointPermissionResponse2 =
  DeleteFineTuningCheckpointPermissionResponses[keyof DeleteFineTuningCheckpointPermissionResponses];

export type ListPaginatedFineTuningJobsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Identifier for the last job from the previous pagination request.
     */
    after?: string;
    /**
     * Number of fine-tuning jobs to retrieve.
     */
    limit?: number;
    /**
     * Optional metadata filter. To filter, use the syntax `metadata[k]=v`. Alternatively, set `metadata=null` to indicate no metadata.
     *
     */
    metadata?: {
      [key: string]: string;
    };
  };
  url: '/fine_tuning/jobs';
};

export type ListPaginatedFineTuningJobsResponses = {
  /**
   * OK
   */
  200: ListPaginatedFineTuningJobsResponse;
};

export type ListPaginatedFineTuningJobsResponse2 =
  ListPaginatedFineTuningJobsResponses[keyof ListPaginatedFineTuningJobsResponses];

export type CreateFineTuningJobData = {
  body: CreateFineTuningJobRequest;
  path?: never;
  query?: never;
  url: '/fine_tuning/jobs';
};

export type CreateFineTuningJobResponses = {
  /**
   * OK
   */
  200: FineTuningJob;
};

export type CreateFineTuningJobResponse =
  CreateFineTuningJobResponses[keyof CreateFineTuningJobResponses];

export type RetrieveFineTuningJobData = {
  body?: never;
  path: {
    /**
     * The ID of the fine-tuning job.
     *
     */
    fine_tuning_job_id: string;
  };
  query?: never;
  url: '/fine_tuning/jobs/{fine_tuning_job_id}';
};

export type RetrieveFineTuningJobResponses = {
  /**
   * OK
   */
  200: FineTuningJob;
};

export type RetrieveFineTuningJobResponse =
  RetrieveFineTuningJobResponses[keyof RetrieveFineTuningJobResponses];

export type CancelFineTuningJobData = {
  body?: never;
  path: {
    /**
     * The ID of the fine-tuning job to cancel.
     *
     */
    fine_tuning_job_id: string;
  };
  query?: never;
  url: '/fine_tuning/jobs/{fine_tuning_job_id}/cancel';
};

export type CancelFineTuningJobResponses = {
  /**
   * OK
   */
  200: FineTuningJob;
};

export type CancelFineTuningJobResponse =
  CancelFineTuningJobResponses[keyof CancelFineTuningJobResponses];

export type ListFineTuningJobCheckpointsData = {
  body?: never;
  path: {
    /**
     * The ID of the fine-tuning job to get checkpoints for.
     *
     */
    fine_tuning_job_id: string;
  };
  query?: {
    /**
     * Identifier for the last checkpoint ID from the previous pagination request.
     */
    after?: string;
    /**
     * Number of checkpoints to retrieve.
     */
    limit?: number;
  };
  url: '/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints';
};

export type ListFineTuningJobCheckpointsResponses = {
  /**
   * OK
   */
  200: ListFineTuningJobCheckpointsResponse;
};

export type ListFineTuningJobCheckpointsResponse2 =
  ListFineTuningJobCheckpointsResponses[keyof ListFineTuningJobCheckpointsResponses];

export type ListFineTuningEventsData = {
  body?: never;
  path: {
    /**
     * The ID of the fine-tuning job to get events for.
     *
     */
    fine_tuning_job_id: string;
  };
  query?: {
    /**
     * Identifier for the last event from the previous pagination request.
     */
    after?: string;
    /**
     * Number of events to retrieve.
     */
    limit?: number;
  };
  url: '/fine_tuning/jobs/{fine_tuning_job_id}/events';
};

export type ListFineTuningEventsResponses = {
  /**
   * OK
   */
  200: ListFineTuningJobEventsResponse;
};

export type ListFineTuningEventsResponse =
  ListFineTuningEventsResponses[keyof ListFineTuningEventsResponses];

export type PauseFineTuningJobData = {
  body?: never;
  path: {
    /**
     * The ID of the fine-tuning job to pause.
     *
     */
    fine_tuning_job_id: string;
  };
  query?: never;
  url: '/fine_tuning/jobs/{fine_tuning_job_id}/pause';
};

export type PauseFineTuningJobResponses = {
  /**
   * OK
   */
  200: FineTuningJob;
};

export type PauseFineTuningJobResponse =
  PauseFineTuningJobResponses[keyof PauseFineTuningJobResponses];

export type ResumeFineTuningJobData = {
  body?: never;
  path: {
    /**
     * The ID of the fine-tuning job to resume.
     *
     */
    fine_tuning_job_id: string;
  };
  query?: never;
  url: '/fine_tuning/jobs/{fine_tuning_job_id}/resume';
};

export type ResumeFineTuningJobResponses = {
  /**
   * OK
   */
  200: FineTuningJob;
};

export type ResumeFineTuningJobResponse =
  ResumeFineTuningJobResponses[keyof ResumeFineTuningJobResponses];

export type CreateImageEditData = {
  body: CreateImageEditRequest;
  path?: never;
  query?: never;
  url: '/images/edits';
};

export type CreateImageEditResponses = {
  /**
   * OK
   */
  200: ImagesResponse;
};

export type CreateImageEditResponse =
  CreateImageEditResponses[keyof CreateImageEditResponses];

export type CreateImageData = {
  body: CreateImageRequest;
  path?: never;
  query?: never;
  url: '/images/generations';
};

export type CreateImageResponses = {
  /**
   * OK
   */
  200: ImagesResponse;
};

export type CreateImageResponse =
  CreateImageResponses[keyof CreateImageResponses];

export type CreateImageVariationData = {
  body: CreateImageVariationRequest;
  path?: never;
  query?: never;
  url: '/images/variations';
};

export type CreateImageVariationResponses = {
  /**
   * OK
   */
  200: ImagesResponse;
};

export type CreateImageVariationResponse =
  CreateImageVariationResponses[keyof CreateImageVariationResponses];

export type ListModelsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/models';
};

export type ListModelsResponses = {
  /**
   * OK
   */
  200: ListModelsResponse;
};

export type ListModelsResponse2 =
  ListModelsResponses[keyof ListModelsResponses];

export type DeleteModelData = {
  body?: never;
  path: {
    /**
     * The model to delete
     */
    model: string;
  };
  query?: never;
  url: '/models/{model}';
};

export type DeleteModelResponses = {
  /**
   * OK
   */
  200: DeleteModelResponse;
};

export type DeleteModelResponse2 =
  DeleteModelResponses[keyof DeleteModelResponses];

export type RetrieveModelData = {
  body?: never;
  path: {
    /**
     * The ID of the model to use for this request
     */
    model: string;
  };
  query?: never;
  url: '/models/{model}';
};

export type RetrieveModelResponses = {
  /**
   * OK
   */
  200: Model;
};

export type RetrieveModelResponse =
  RetrieveModelResponses[keyof RetrieveModelResponses];

export type CreateModerationData = {
  body: CreateModerationRequest;
  path?: never;
  query?: never;
  url: '/moderations';
};

export type CreateModerationResponses = {
  /**
   * OK
   */
  200: CreateModerationResponse;
};

export type CreateModerationResponse2 =
  CreateModerationResponses[keyof CreateModerationResponses];

export type AdminApiKeysListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Return keys with IDs that come after this ID in the pagination order.
     */
    after?: string;
    /**
     * Maximum number of keys to return.
     */
    limit?: number;
    /**
     * Order results by creation time, ascending or descending.
     */
    order?: 'asc' | 'desc';
  };
  url: '/organization/admin_api_keys';
};

export type AdminApiKeysListResponses = {
  /**
   * A list of organization API keys.
   */
  200: ApiKeyList;
};

export type AdminApiKeysListResponse =
  AdminApiKeysListResponses[keyof AdminApiKeysListResponses];

export type AdminApiKeysCreateData = {
  body: {
    name: string;
  };
  path?: never;
  query?: never;
  url: '/organization/admin_api_keys';
};

export type AdminApiKeysCreateResponses = {
  /**
   * The newly created admin API key.
   */
  200: AdminApiKey;
};

export type AdminApiKeysCreateResponse =
  AdminApiKeysCreateResponses[keyof AdminApiKeysCreateResponses];

export type AdminApiKeysDeleteData = {
  body?: never;
  path: {
    /**
     * The ID of the API key to be deleted.
     */
    key_id: string;
  };
  query?: never;
  url: '/organization/admin_api_keys/{key_id}';
};

export type AdminApiKeysDeleteResponses = {
  /**
   * Confirmation that the API key was deleted.
   */
  200: {
    deleted?: boolean;
    id?: string;
    object?: string;
  };
};

export type AdminApiKeysDeleteResponse =
  AdminApiKeysDeleteResponses[keyof AdminApiKeysDeleteResponses];

export type AdminApiKeysGetData = {
  body?: never;
  path: {
    /**
     * The ID of the API key.
     */
    key_id: string;
  };
  query?: never;
  url: '/organization/admin_api_keys/{key_id}';
};

export type AdminApiKeysGetResponses = {
  /**
   * Details of the requested API key.
   */
  200: AdminApiKey;
};

export type AdminApiKeysGetResponse =
  AdminApiKeysGetResponses[keyof AdminApiKeysGetResponses];

export type ListAuditLogsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Return only events performed by users with these emails.
     */
    'actor_emails[]'?: Array<string>;
    /**
     * Return only events performed by these actors. Can be a user ID, a service account ID, or an api key tracking ID.
     */
    'actor_ids[]'?: Array<string>;
    /**
     * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
     *
     */
    after?: string;
    /**
     * A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
     *
     */
    before?: string;
    /**
     * Return only events whose `effective_at` (Unix seconds) is in this range.
     */
    effective_at?: {
      /**
       * Return only events whose `effective_at` (Unix seconds) is greater than this value.
       */
      gt?: number;
      /**
       * Return only events whose `effective_at` (Unix seconds) is greater than or equal to this value.
       */
      gte?: number;
      /**
       * Return only events whose `effective_at` (Unix seconds) is less than this value.
       */
      lt?: number;
      /**
       * Return only events whose `effective_at` (Unix seconds) is less than or equal to this value.
       */
      lte?: number;
    };
    /**
     * Return only events with a `type` in one of these values. For example, `project.created`. For all options, see the documentation for the [audit log object](https://platform.openai.com/docs/api-reference/audit-logs/object).
     */
    'event_types[]'?: Array<AuditLogEventType>;
    /**
     * A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
     *
     */
    limit?: number;
    /**
     * Return only events for these projects.
     */
    'project_ids[]'?: Array<string>;
    /**
     * Return only events performed on these targets. For example, a project ID updated.
     */
    'resource_ids[]'?: Array<string>;
  };
  url: '/organization/audit_logs';
};

export type ListAuditLogsResponses = {
  /**
   * Audit logs listed successfully.
   */
  200: ListAuditLogsResponse;
};

export type ListAuditLogsResponse2 =
  ListAuditLogsResponses[keyof ListAuditLogsResponses];

export type ListOrganizationCertificatesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
     *
     */
    after?: string;
    /**
     * A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
     *
     */
    limit?: number;
    /**
     * Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
     *
     */
    order?: 'asc' | 'desc';
  };
  url: '/organization/certificates';
};

export type ListOrganizationCertificatesResponses = {
  /**
   * Certificates listed successfully.
   */
  200: ListCertificatesResponse;
};

export type ListOrganizationCertificatesResponse =
  ListOrganizationCertificatesResponses[keyof ListOrganizationCertificatesResponses];

export type UploadCertificateData = {
  /**
   * The certificate upload payload.
   */
  body: UploadCertificateRequest;
  path?: never;
  query?: never;
  url: '/organization/certificates';
};

export type UploadCertificateResponses = {
  /**
   * Certificate uploaded successfully.
   */
  200: Certificate;
};

export type UploadCertificateResponse =
  UploadCertificateResponses[keyof UploadCertificateResponses];

export type ActivateOrganizationCertificatesData = {
  /**
   * The certificate activation payload.
   */
  body: ToggleCertificatesRequest;
  path?: never;
  query?: never;
  url: '/organization/certificates/activate';
};

export type ActivateOrganizationCertificatesResponses = {
  /**
   * Certificates activated successfully.
   */
  200: ListCertificatesResponse;
};

export type ActivateOrganizationCertificatesResponse =
  ActivateOrganizationCertificatesResponses[keyof ActivateOrganizationCertificatesResponses];

export type DeactivateOrganizationCertificatesData = {
  /**
   * The certificate deactivation payload.
   */
  body: ToggleCertificatesRequest;
  path?: never;
  query?: never;
  url: '/organization/certificates/deactivate';
};

export type DeactivateOrganizationCertificatesResponses = {
  /**
   * Certificates deactivated successfully.
   */
  200: ListCertificatesResponse;
};

export type DeactivateOrganizationCertificatesResponse =
  DeactivateOrganizationCertificatesResponses[keyof DeactivateOrganizationCertificatesResponses];

export type DeleteCertificateData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/organization/certificates/{certificate_id}';
};

export type DeleteCertificateResponses = {
  /**
   * Certificate deleted successfully.
   */
  200: DeleteCertificateResponse;
};

export type DeleteCertificateResponse2 =
  DeleteCertificateResponses[keyof DeleteCertificateResponses];

export type GetCertificateData = {
  body?: never;
  path: {
    /**
     * Unique ID of the certificate to retrieve.
     */
    certificate_id: string;
  };
  query?: {
    /**
     * A list of additional fields to include in the response. Currently the only supported value is `content` to fetch the PEM content of the certificate.
     */
    include?: Array<'content'>;
  };
  url: '/organization/certificates/{certificate_id}';
};

export type GetCertificateResponses = {
  /**
   * Certificate retrieved successfully.
   */
  200: Certificate;
};

export type GetCertificateResponse =
  GetCertificateResponses[keyof GetCertificateResponses];

export type ModifyCertificateData = {
  /**
   * The certificate modification payload.
   */
  body: ModifyCertificateRequest;
  path?: never;
  query?: never;
  url: '/organization/certificates/{certificate_id}';
};

export type ModifyCertificateResponses = {
  /**
   * Certificate modified successfully.
   */
  200: Certificate;
};

export type ModifyCertificateResponse =
  ModifyCertificateResponses[keyof ModifyCertificateResponses];

export type UsageCostsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Width of each time bucket in response. Currently only `1d` is supported, default to `1d`.
     */
    bucket_width?: '1d';
    /**
     * End time (Unix seconds) of the query time range, exclusive.
     */
    end_time?: number;
    /**
     * Group the costs by the specified fields. Support fields include `project_id`, `line_item` and any combination of them.
     */
    group_by?: Array<'project_id' | 'line_item'>;
    /**
     * A limit on the number of buckets to be returned. Limit can range between 1 and 180, and the default is 7.
     *
     */
    limit?: number;
    /**
     * A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
     */
    page?: string;
    /**
     * Return only costs for these projects.
     */
    project_ids?: Array<string>;
    /**
     * Start time (Unix seconds) of the query time range, inclusive.
     */
    start_time: number;
  };
  url: '/organization/costs';
};

export type UsageCostsResponses = {
  /**
   * Costs data retrieved successfully.
   */
  200: UsageResponse;
};

export type UsageCostsResponse = UsageCostsResponses[keyof UsageCostsResponses];

export type ListInvitesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
     *
     */
    after?: string;
    /**
     * A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
     *
     */
    limit?: number;
  };
  url: '/organization/invites';
};

export type ListInvitesResponses = {
  /**
   * Invites listed successfully.
   */
  200: InviteListResponse;
};

export type ListInvitesResponse =
  ListInvitesResponses[keyof ListInvitesResponses];

export type InviteUserData = {
  /**
   * The invite request payload.
   */
  body: InviteRequest;
  path?: never;
  query?: never;
  url: '/organization/invites';
};

export type InviteUserResponses = {
  /**
   * User invited successfully.
   */
  200: Invite;
};

export type InviteUserResponse = InviteUserResponses[keyof InviteUserResponses];

export type DeleteInviteData = {
  body?: never;
  path: {
    /**
     * The ID of the invite to delete.
     */
    invite_id: string;
  };
  query?: never;
  url: '/organization/invites/{invite_id}';
};

export type DeleteInviteResponses = {
  /**
   * Invite deleted successfully.
   */
  200: InviteDeleteResponse;
};

export type DeleteInviteResponse =
  DeleteInviteResponses[keyof DeleteInviteResponses];

export type RetrieveInviteData = {
  body?: never;
  path: {
    /**
     * The ID of the invite to retrieve.
     */
    invite_id: string;
  };
  query?: never;
  url: '/organization/invites/{invite_id}';
};

export type RetrieveInviteResponses = {
  /**
   * Invite retrieved successfully.
   */
  200: Invite;
};

export type RetrieveInviteResponse =
  RetrieveInviteResponses[keyof RetrieveInviteResponses];

export type ListProjectsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
     *
     */
    after?: string;
    /**
     * If `true` returns all projects including those that have been `archived`. Archived projects are not included by default.
     */
    include_archived?: boolean;
    /**
     * A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
     *
     */
    limit?: number;
  };
  url: '/organization/projects';
};

export type ListProjectsResponses = {
  /**
   * Projects listed successfully.
   */
  200: ProjectListResponse;
};

export type ListProjectsResponse =
  ListProjectsResponses[keyof ListProjectsResponses];

export type CreateProjectData = {
  /**
   * The project create request payload.
   */
  body: ProjectCreateRequest;
  path?: never;
  query?: never;
  url: '/organization/projects';
};

export type CreateProjectResponses = {
  /**
   * Project created successfully.
   */
  200: Project;
};

export type CreateProjectResponse =
  CreateProjectResponses[keyof CreateProjectResponses];

export type RetrieveProjectData = {
  body?: never;
  path: {
    /**
     * The ID of the project.
     */
    project_id: string;
  };
  query?: never;
  url: '/organization/projects/{project_id}';
};

export type RetrieveProjectResponses = {
  /**
   * Project retrieved successfully.
   */
  200: Project;
};

export type RetrieveProjectResponse =
  RetrieveProjectResponses[keyof RetrieveProjectResponses];

export type ModifyProjectData = {
  /**
   * The project update request payload.
   */
  body: ProjectUpdateRequest;
  path: {
    /**
     * The ID of the project.
     */
    project_id: string;
  };
  query?: never;
  url: '/organization/projects/{project_id}';
};

export type ModifyProjectErrors = {
  /**
   * Error response when updating the default project.
   */
  400: ErrorResponse;
};

export type ModifyProjectError = ModifyProjectErrors[keyof ModifyProjectErrors];

export type ModifyProjectResponses = {
  /**
   * Project updated successfully.
   */
  200: Project;
};

export type ModifyProjectResponse =
  ModifyProjectResponses[keyof ModifyProjectResponses];

export type ListProjectApiKeysData = {
  body?: never;
  path: {
    /**
     * The ID of the project.
     */
    project_id: string;
  };
  query?: {
    /**
     * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
     *
     */
    after?: string;
    /**
     * A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
     *
     */
    limit?: number;
  };
  url: '/organization/projects/{project_id}/api_keys';
};

export type ListProjectApiKeysResponses = {
  /**
   * Project API keys listed successfully.
   */
  200: ProjectApiKeyListResponse;
};

export type ListProjectApiKeysResponse =
  ListProjectApiKeysResponses[keyof ListProjectApiKeysResponses];

export type DeleteProjectApiKeyData = {
  body?: never;
  path: {
    /**
     * The ID of the API key.
     */
    key_id: string;
    /**
     * The ID of the project.
     */
    project_id: string;
  };
  query?: never;
  url: '/organization/projects/{project_id}/api_keys/{key_id}';
};

export type DeleteProjectApiKeyErrors = {
  /**
   * Error response for various conditions.
   */
  400: ErrorResponse;
};

export type DeleteProjectApiKeyError =
  DeleteProjectApiKeyErrors[keyof DeleteProjectApiKeyErrors];

export type DeleteProjectApiKeyResponses = {
  /**
   * Project API key deleted successfully.
   */
  200: ProjectApiKeyDeleteResponse;
};

export type DeleteProjectApiKeyResponse =
  DeleteProjectApiKeyResponses[keyof DeleteProjectApiKeyResponses];

export type RetrieveProjectApiKeyData = {
  body?: never;
  path: {
    /**
     * The ID of the API key.
     */
    key_id: string;
    /**
     * The ID of the project.
     */
    project_id: string;
  };
  query?: never;
  url: '/organization/projects/{project_id}/api_keys/{key_id}';
};

export type RetrieveProjectApiKeyResponses = {
  /**
   * Project API key retrieved successfully.
   */
  200: ProjectApiKey;
};

export type RetrieveProjectApiKeyResponse =
  RetrieveProjectApiKeyResponses[keyof RetrieveProjectApiKeyResponses];

export type ArchiveProjectData = {
  body?: never;
  path: {
    /**
     * The ID of the project.
     */
    project_id: string;
  };
  query?: never;
  url: '/organization/projects/{project_id}/archive';
};

export type ArchiveProjectResponses = {
  /**
   * Project archived successfully.
   */
  200: Project;
};

export type ArchiveProjectResponse =
  ArchiveProjectResponses[keyof ArchiveProjectResponses];

export type ListProjectCertificatesData = {
  body?: never;
  path: {
    /**
     * The ID of the project.
     */
    project_id: string;
  };
  query?: {
    /**
     * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
     *
     */
    after?: string;
    /**
     * A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
     *
     */
    limit?: number;
    /**
     * Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
     *
     */
    order?: 'asc' | 'desc';
  };
  url: '/organization/projects/{project_id}/certificates';
};

export type ListProjectCertificatesResponses = {
  /**
   * Certificates listed successfully.
   */
  200: ListCertificatesResponse;
};

export type ListProjectCertificatesResponse =
  ListProjectCertificatesResponses[keyof ListProjectCertificatesResponses];

export type ActivateProjectCertificatesData = {
  /**
   * The certificate activation payload.
   */
  body: ToggleCertificatesRequest;
  path: {
    /**
     * The ID of the project.
     */
    project_id: string;
  };
  query?: never;
  url: '/organization/projects/{project_id}/certificates/activate';
};

export type ActivateProjectCertificatesResponses = {
  /**
   * Certificates activated successfully.
   */
  200: ListCertificatesResponse;
};

export type ActivateProjectCertificatesResponse =
  ActivateProjectCertificatesResponses[keyof ActivateProjectCertificatesResponses];

export type DeactivateProjectCertificatesData = {
  /**
   * The certificate deactivation payload.
   */
  body: ToggleCertificatesRequest;
  path: {
    /**
     * The ID of the project.
     */
    project_id: string;
  };
  query?: never;
  url: '/organization/projects/{project_id}/certificates/deactivate';
};

export type DeactivateProjectCertificatesResponses = {
  /**
   * Certificates deactivated successfully.
   */
  200: ListCertificatesResponse;
};

export type DeactivateProjectCertificatesResponse =
  DeactivateProjectCertificatesResponses[keyof DeactivateProjectCertificatesResponses];

export type ListProjectRateLimitsData = {
  body?: never;
  path: {
    /**
     * The ID of the project.
     */
    project_id: string;
  };
  query?: {
    /**
     * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
     *
     */
    after?: string;
    /**
     * A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, beginning with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
     *
     */
    before?: string;
    /**
     * A limit on the number of objects to be returned. The default is 100.
     *
     */
    limit?: number;
  };
  url: '/organization/projects/{project_id}/rate_limits';
};

export type ListProjectRateLimitsResponses = {
  /**
   * Project rate limits listed successfully.
   */
  200: ProjectRateLimitListResponse;
};

export type ListProjectRateLimitsResponse =
  ListProjectRateLimitsResponses[keyof ListProjectRateLimitsResponses];

export type UpdateProjectRateLimitsData = {
  /**
   * The project rate limit update request payload.
   */
  body: ProjectRateLimitUpdateRequest;
  path: {
    /**
     * The ID of the project.
     */
    project_id: string;
    /**
     * The ID of the rate limit.
     */
    rate_limit_id: string;
  };
  query?: never;
  url: '/organization/projects/{project_id}/rate_limits/{rate_limit_id}';
};

export type UpdateProjectRateLimitsErrors = {
  /**
   * Error response for various conditions.
   */
  400: ErrorResponse;
};

export type UpdateProjectRateLimitsError =
  UpdateProjectRateLimitsErrors[keyof UpdateProjectRateLimitsErrors];

export type UpdateProjectRateLimitsResponses = {
  /**
   * Project rate limit updated successfully.
   */
  200: ProjectRateLimit;
};

export type UpdateProjectRateLimitsResponse =
  UpdateProjectRateLimitsResponses[keyof UpdateProjectRateLimitsResponses];

export type ListProjectServiceAccountsData = {
  body?: never;
  path: {
    /**
     * The ID of the project.
     */
    project_id: string;
  };
  query?: {
    /**
     * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
     *
     */
    after?: string;
    /**
     * A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
     *
     */
    limit?: number;
  };
  url: '/organization/projects/{project_id}/service_accounts';
};

export type ListProjectServiceAccountsErrors = {
  /**
   * Error response when project is archived.
   */
  400: ErrorResponse;
};

export type ListProjectServiceAccountsError =
  ListProjectServiceAccountsErrors[keyof ListProjectServiceAccountsErrors];

export type ListProjectServiceAccountsResponses = {
  /**
   * Project service accounts listed successfully.
   */
  200: ProjectServiceAccountListResponse;
};

export type ListProjectServiceAccountsResponse =
  ListProjectServiceAccountsResponses[keyof ListProjectServiceAccountsResponses];

export type CreateProjectServiceAccountData = {
  /**
   * The project service account create request payload.
   */
  body: ProjectServiceAccountCreateRequest;
  path: {
    /**
     * The ID of the project.
     */
    project_id: string;
  };
  query?: never;
  url: '/organization/projects/{project_id}/service_accounts';
};

export type CreateProjectServiceAccountErrors = {
  /**
   * Error response when project is archived.
   */
  400: ErrorResponse;
};

export type CreateProjectServiceAccountError =
  CreateProjectServiceAccountErrors[keyof CreateProjectServiceAccountErrors];

export type CreateProjectServiceAccountResponses = {
  /**
   * Project service account created successfully.
   */
  200: ProjectServiceAccountCreateResponse;
};

export type CreateProjectServiceAccountResponse =
  CreateProjectServiceAccountResponses[keyof CreateProjectServiceAccountResponses];

export type DeleteProjectServiceAccountData = {
  body?: never;
  path: {
    /**
     * The ID of the project.
     */
    project_id: string;
    /**
     * The ID of the service account.
     */
    service_account_id: string;
  };
  query?: never;
  url: '/organization/projects/{project_id}/service_accounts/{service_account_id}';
};

export type DeleteProjectServiceAccountResponses = {
  /**
   * Project service account deleted successfully.
   */
  200: ProjectServiceAccountDeleteResponse;
};

export type DeleteProjectServiceAccountResponse =
  DeleteProjectServiceAccountResponses[keyof DeleteProjectServiceAccountResponses];

export type RetrieveProjectServiceAccountData = {
  body?: never;
  path: {
    /**
     * The ID of the project.
     */
    project_id: string;
    /**
     * The ID of the service account.
     */
    service_account_id: string;
  };
  query?: never;
  url: '/organization/projects/{project_id}/service_accounts/{service_account_id}';
};

export type RetrieveProjectServiceAccountResponses = {
  /**
   * Project service account retrieved successfully.
   */
  200: ProjectServiceAccount;
};

export type RetrieveProjectServiceAccountResponse =
  RetrieveProjectServiceAccountResponses[keyof RetrieveProjectServiceAccountResponses];

export type ListProjectUsersData = {
  body?: never;
  path: {
    /**
     * The ID of the project.
     */
    project_id: string;
  };
  query?: {
    /**
     * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
     *
     */
    after?: string;
    /**
     * A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
     *
     */
    limit?: number;
  };
  url: '/organization/projects/{project_id}/users';
};

export type ListProjectUsersErrors = {
  /**
   * Error response when project is archived.
   */
  400: ErrorResponse;
};

export type ListProjectUsersError =
  ListProjectUsersErrors[keyof ListProjectUsersErrors];

export type ListProjectUsersResponses = {
  /**
   * Project users listed successfully.
   */
  200: ProjectUserListResponse;
};

export type ListProjectUsersResponse =
  ListProjectUsersResponses[keyof ListProjectUsersResponses];

export type CreateProjectUserData = {
  /**
   * The project user create request payload.
   */
  body: ProjectUserCreateRequest;
  path: {
    /**
     * The ID of the project.
     */
    project_id: string;
  };
  query?: never;
  url: '/organization/projects/{project_id}/users';
};

export type CreateProjectUserErrors = {
  /**
   * Error response for various conditions.
   */
  400: ErrorResponse;
};

export type CreateProjectUserError =
  CreateProjectUserErrors[keyof CreateProjectUserErrors];

export type CreateProjectUserResponses = {
  /**
   * User added to project successfully.
   */
  200: ProjectUser;
};

export type CreateProjectUserResponse =
  CreateProjectUserResponses[keyof CreateProjectUserResponses];

export type DeleteProjectUserData = {
  body?: never;
  path: {
    /**
     * The ID of the project.
     */
    project_id: string;
    /**
     * The ID of the user.
     */
    user_id: string;
  };
  query?: never;
  url: '/organization/projects/{project_id}/users/{user_id}';
};

export type DeleteProjectUserErrors = {
  /**
   * Error response for various conditions.
   */
  400: ErrorResponse;
};

export type DeleteProjectUserError =
  DeleteProjectUserErrors[keyof DeleteProjectUserErrors];

export type DeleteProjectUserResponses = {
  /**
   * Project user deleted successfully.
   */
  200: ProjectUserDeleteResponse;
};

export type DeleteProjectUserResponse =
  DeleteProjectUserResponses[keyof DeleteProjectUserResponses];

export type RetrieveProjectUserData = {
  body?: never;
  path: {
    /**
     * The ID of the project.
     */
    project_id: string;
    /**
     * The ID of the user.
     */
    user_id: string;
  };
  query?: never;
  url: '/organization/projects/{project_id}/users/{user_id}';
};

export type RetrieveProjectUserResponses = {
  /**
   * Project user retrieved successfully.
   */
  200: ProjectUser;
};

export type RetrieveProjectUserResponse =
  RetrieveProjectUserResponses[keyof RetrieveProjectUserResponses];

export type ModifyProjectUserData = {
  /**
   * The project user update request payload.
   */
  body: ProjectUserUpdateRequest;
  path: {
    /**
     * The ID of the project.
     */
    project_id: string;
    /**
     * The ID of the user.
     */
    user_id: string;
  };
  query?: never;
  url: '/organization/projects/{project_id}/users/{user_id}';
};

export type ModifyProjectUserErrors = {
  /**
   * Error response for various conditions.
   */
  400: ErrorResponse;
};

export type ModifyProjectUserError =
  ModifyProjectUserErrors[keyof ModifyProjectUserErrors];

export type ModifyProjectUserResponses = {
  /**
   * Project user's role updated successfully.
   */
  200: ProjectUser;
};

export type ModifyProjectUserResponse =
  ModifyProjectUserResponses[keyof ModifyProjectUserResponses];

export type UsageAudioSpeechesData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Return only usage for these API keys.
     */
    api_key_ids?: Array<string>;
    /**
     * Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
     */
    bucket_width?: '1m' | '1h' | '1d';
    /**
     * End time (Unix seconds) of the query time range, exclusive.
     */
    end_time?: number;
    /**
     * Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.
     */
    group_by?: Array<'project_id' | 'user_id' | 'api_key_id' | 'model'>;
    /**
     * Specifies the number of buckets to return.
     * - `bucket_width=1d`: default: 7, max: 31
     * - `bucket_width=1h`: default: 24, max: 168
     * - `bucket_width=1m`: default: 60, max: 1440
     *
     */
    limit?: number;
    /**
     * Return only usage for these models.
     */
    models?: Array<string>;
    /**
     * A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
     */
    page?: string;
    /**
     * Return only usage for these projects.
     */
    project_ids?: Array<string>;
    /**
     * Start time (Unix seconds) of the query time range, inclusive.
     */
    start_time: number;
    /**
     * Return only usage for these users.
     */
    user_ids?: Array<string>;
  };
  url: '/organization/usage/audio_speeches';
};

export type UsageAudioSpeechesResponses = {
  /**
   * Usage data retrieved successfully.
   */
  200: UsageResponse;
};

export type UsageAudioSpeechesResponse =
  UsageAudioSpeechesResponses[keyof UsageAudioSpeechesResponses];

export type UsageAudioTranscriptionsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Return only usage for these API keys.
     */
    api_key_ids?: Array<string>;
    /**
     * Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
     */
    bucket_width?: '1m' | '1h' | '1d';
    /**
     * End time (Unix seconds) of the query time range, exclusive.
     */
    end_time?: number;
    /**
     * Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.
     */
    group_by?: Array<'project_id' | 'user_id' | 'api_key_id' | 'model'>;
    /**
     * Specifies the number of buckets to return.
     * - `bucket_width=1d`: default: 7, max: 31
     * - `bucket_width=1h`: default: 24, max: 168
     * - `bucket_width=1m`: default: 60, max: 1440
     *
     */
    limit?: number;
    /**
     * Return only usage for these models.
     */
    models?: Array<string>;
    /**
     * A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
     */
    page?: string;
    /**
     * Return only usage for these projects.
     */
    project_ids?: Array<string>;
    /**
     * Start time (Unix seconds) of the query time range, inclusive.
     */
    start_time: number;
    /**
     * Return only usage for these users.
     */
    user_ids?: Array<string>;
  };
  url: '/organization/usage/audio_transcriptions';
};

export type UsageAudioTranscriptionsResponses = {
  /**
   * Usage data retrieved successfully.
   */
  200: UsageResponse;
};

export type UsageAudioTranscriptionsResponse =
  UsageAudioTranscriptionsResponses[keyof UsageAudioTranscriptionsResponses];

export type UsageCodeInterpreterSessionsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
     */
    bucket_width?: '1m' | '1h' | '1d';
    /**
     * End time (Unix seconds) of the query time range, exclusive.
     */
    end_time?: number;
    /**
     * Group the usage data by the specified fields. Support fields include `project_id`.
     */
    group_by?: Array<'project_id'>;
    /**
     * Specifies the number of buckets to return.
     * - `bucket_width=1d`: default: 7, max: 31
     * - `bucket_width=1h`: default: 24, max: 168
     * - `bucket_width=1m`: default: 60, max: 1440
     *
     */
    limit?: number;
    /**
     * A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
     */
    page?: string;
    /**
     * Return only usage for these projects.
     */
    project_ids?: Array<string>;
    /**
     * Start time (Unix seconds) of the query time range, inclusive.
     */
    start_time: number;
  };
  url: '/organization/usage/code_interpreter_sessions';
};

export type UsageCodeInterpreterSessionsResponses = {
  /**
   * Usage data retrieved successfully.
   */
  200: UsageResponse;
};

export type UsageCodeInterpreterSessionsResponse =
  UsageCodeInterpreterSessionsResponses[keyof UsageCodeInterpreterSessionsResponses];

export type UsageCompletionsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Return only usage for these API keys.
     */
    api_key_ids?: Array<string>;
    /**
     * If `true`, return batch jobs only. If `false`, return non-batch jobs only. By default, return both.
     *
     */
    batch?: boolean;
    /**
     * Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
     */
    bucket_width?: '1m' | '1h' | '1d';
    /**
     * End time (Unix seconds) of the query time range, exclusive.
     */
    end_time?: number;
    /**
     * Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model`, `batch` or any combination of them.
     */
    group_by?: Array<
      'project_id' | 'user_id' | 'api_key_id' | 'model' | 'batch'
    >;
    /**
     * Specifies the number of buckets to return.
     * - `bucket_width=1d`: default: 7, max: 31
     * - `bucket_width=1h`: default: 24, max: 168
     * - `bucket_width=1m`: default: 60, max: 1440
     *
     */
    limit?: number;
    /**
     * Return only usage for these models.
     */
    models?: Array<string>;
    /**
     * A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
     */
    page?: string;
    /**
     * Return only usage for these projects.
     */
    project_ids?: Array<string>;
    /**
     * Start time (Unix seconds) of the query time range, inclusive.
     */
    start_time: number;
    /**
     * Return only usage for these users.
     */
    user_ids?: Array<string>;
  };
  url: '/organization/usage/completions';
};

export type UsageCompletionsResponses = {
  /**
   * Usage data retrieved successfully.
   */
  200: UsageResponse;
};

export type UsageCompletionsResponse =
  UsageCompletionsResponses[keyof UsageCompletionsResponses];

export type UsageEmbeddingsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Return only usage for these API keys.
     */
    api_key_ids?: Array<string>;
    /**
     * Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
     */
    bucket_width?: '1m' | '1h' | '1d';
    /**
     * End time (Unix seconds) of the query time range, exclusive.
     */
    end_time?: number;
    /**
     * Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.
     */
    group_by?: Array<'project_id' | 'user_id' | 'api_key_id' | 'model'>;
    /**
     * Specifies the number of buckets to return.
     * - `bucket_width=1d`: default: 7, max: 31
     * - `bucket_width=1h`: default: 24, max: 168
     * - `bucket_width=1m`: default: 60, max: 1440
     *
     */
    limit?: number;
    /**
     * Return only usage for these models.
     */
    models?: Array<string>;
    /**
     * A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
     */
    page?: string;
    /**
     * Return only usage for these projects.
     */
    project_ids?: Array<string>;
    /**
     * Start time (Unix seconds) of the query time range, inclusive.
     */
    start_time: number;
    /**
     * Return only usage for these users.
     */
    user_ids?: Array<string>;
  };
  url: '/organization/usage/embeddings';
};

export type UsageEmbeddingsResponses = {
  /**
   * Usage data retrieved successfully.
   */
  200: UsageResponse;
};

export type UsageEmbeddingsResponse =
  UsageEmbeddingsResponses[keyof UsageEmbeddingsResponses];

export type UsageImagesData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Return only usage for these API keys.
     */
    api_key_ids?: Array<string>;
    /**
     * Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
     */
    bucket_width?: '1m' | '1h' | '1d';
    /**
     * End time (Unix seconds) of the query time range, exclusive.
     */
    end_time?: number;
    /**
     * Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model`, `size`, `source` or any combination of them.
     */
    group_by?: Array<
      'project_id' | 'user_id' | 'api_key_id' | 'model' | 'size' | 'source'
    >;
    /**
     * Specifies the number of buckets to return.
     * - `bucket_width=1d`: default: 7, max: 31
     * - `bucket_width=1h`: default: 24, max: 168
     * - `bucket_width=1m`: default: 60, max: 1440
     *
     */
    limit?: number;
    /**
     * Return only usage for these models.
     */
    models?: Array<string>;
    /**
     * A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
     */
    page?: string;
    /**
     * Return only usage for these projects.
     */
    project_ids?: Array<string>;
    /**
     * Return only usages for these image sizes. Possible values are `256x256`, `512x512`, `1024x1024`, `1792x1792`, `1024x1792` or any combination of them.
     */
    sizes?: Array<
      '256x256' | '512x512' | '1024x1024' | '1792x1792' | '1024x1792'
    >;
    /**
     * Return only usages for these sources. Possible values are `image.generation`, `image.edit`, `image.variation` or any combination of them.
     */
    sources?: Array<'image.generation' | 'image.edit' | 'image.variation'>;
    /**
     * Start time (Unix seconds) of the query time range, inclusive.
     */
    start_time: number;
    /**
     * Return only usage for these users.
     */
    user_ids?: Array<string>;
  };
  url: '/organization/usage/images';
};

export type UsageImagesResponses = {
  /**
   * Usage data retrieved successfully.
   */
  200: UsageResponse;
};

export type UsageImagesResponse =
  UsageImagesResponses[keyof UsageImagesResponses];

export type UsageModerationsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Return only usage for these API keys.
     */
    api_key_ids?: Array<string>;
    /**
     * Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
     */
    bucket_width?: '1m' | '1h' | '1d';
    /**
     * End time (Unix seconds) of the query time range, exclusive.
     */
    end_time?: number;
    /**
     * Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.
     */
    group_by?: Array<'project_id' | 'user_id' | 'api_key_id' | 'model'>;
    /**
     * Specifies the number of buckets to return.
     * - `bucket_width=1d`: default: 7, max: 31
     * - `bucket_width=1h`: default: 24, max: 168
     * - `bucket_width=1m`: default: 60, max: 1440
     *
     */
    limit?: number;
    /**
     * Return only usage for these models.
     */
    models?: Array<string>;
    /**
     * A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
     */
    page?: string;
    /**
     * Return only usage for these projects.
     */
    project_ids?: Array<string>;
    /**
     * Start time (Unix seconds) of the query time range, inclusive.
     */
    start_time: number;
    /**
     * Return only usage for these users.
     */
    user_ids?: Array<string>;
  };
  url: '/organization/usage/moderations';
};

export type UsageModerationsResponses = {
  /**
   * Usage data retrieved successfully.
   */
  200: UsageResponse;
};

export type UsageModerationsResponse =
  UsageModerationsResponses[keyof UsageModerationsResponses];

export type UsageVectorStoresData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
     */
    bucket_width?: '1m' | '1h' | '1d';
    /**
     * End time (Unix seconds) of the query time range, exclusive.
     */
    end_time?: number;
    /**
     * Group the usage data by the specified fields. Support fields include `project_id`.
     */
    group_by?: Array<'project_id'>;
    /**
     * Specifies the number of buckets to return.
     * - `bucket_width=1d`: default: 7, max: 31
     * - `bucket_width=1h`: default: 24, max: 168
     * - `bucket_width=1m`: default: 60, max: 1440
     *
     */
    limit?: number;
    /**
     * A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
     */
    page?: string;
    /**
     * Return only usage for these projects.
     */
    project_ids?: Array<string>;
    /**
     * Start time (Unix seconds) of the query time range, inclusive.
     */
    start_time: number;
  };
  url: '/organization/usage/vector_stores';
};

export type UsageVectorStoresResponses = {
  /**
   * Usage data retrieved successfully.
   */
  200: UsageResponse;
};

export type UsageVectorStoresResponse =
  UsageVectorStoresResponses[keyof UsageVectorStoresResponses];

export type ListUsersData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
     *
     */
    after?: string;
    /**
     * Filter by the email address of users.
     */
    emails?: Array<string>;
    /**
     * A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
     *
     */
    limit?: number;
  };
  url: '/organization/users';
};

export type ListUsersResponses = {
  /**
   * Users listed successfully.
   */
  200: UserListResponse;
};

export type ListUsersResponse = ListUsersResponses[keyof ListUsersResponses];

export type DeleteUserData = {
  body?: never;
  path: {
    /**
     * The ID of the user.
     */
    user_id: string;
  };
  query?: never;
  url: '/organization/users/{user_id}';
};

export type DeleteUserResponses = {
  /**
   * User deleted successfully.
   */
  200: UserDeleteResponse;
};

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses];

export type RetrieveUserData = {
  body?: never;
  path: {
    /**
     * The ID of the user.
     */
    user_id: string;
  };
  query?: never;
  url: '/organization/users/{user_id}';
};

export type RetrieveUserResponses = {
  /**
   * User retrieved successfully.
   */
  200: User;
};

export type RetrieveUserResponse =
  RetrieveUserResponses[keyof RetrieveUserResponses];

export type ModifyUserData = {
  /**
   * The new user role to modify. This must be one of `owner` or `member`.
   */
  body: UserRoleUpdateRequest;
  path: {
    /**
     * The ID of the user.
     */
    user_id: string;
  };
  query?: never;
  url: '/organization/users/{user_id}';
};

export type ModifyUserResponses = {
  /**
   * User role updated successfully.
   */
  200: User;
};

export type ModifyUserResponse = ModifyUserResponses[keyof ModifyUserResponses];

export type CreateRealtimeSessionData = {
  /**
   * Create an ephemeral API key with the given session configuration.
   */
  body: RealtimeSessionCreateRequest;
  path?: never;
  query?: never;
  url: '/realtime/sessions';
};

export type CreateRealtimeSessionResponses = {
  /**
   * Session created successfully.
   */
  200: RealtimeSessionCreateResponse;
};

export type CreateRealtimeSessionResponse =
  CreateRealtimeSessionResponses[keyof CreateRealtimeSessionResponses];

export type CreateRealtimeTranscriptionSessionData = {
  /**
   * Create an ephemeral API key with the given session configuration.
   */
  body: RealtimeTranscriptionSessionCreateRequest;
  path?: never;
  query?: never;
  url: '/realtime/transcription_sessions';
};

export type CreateRealtimeTranscriptionSessionResponses = {
  /**
   * Session created successfully.
   */
  200: RealtimeTranscriptionSessionCreateResponse;
};

export type CreateRealtimeTranscriptionSessionResponse =
  CreateRealtimeTranscriptionSessionResponses[keyof CreateRealtimeTranscriptionSessionResponses];

export type CreateResponseData = {
  body: CreateResponse;
  path?: never;
  query?: never;
  url: '/responses';
};

export type CreateResponseResponses = {
  /**
   * OK
   */
  200: Response;
};

export type CreateResponseResponse =
  CreateResponseResponses[keyof CreateResponseResponses];

export type DeleteResponseData = {
  body?: never;
  path: {
    /**
     * The ID of the response to delete.
     */
    response_id: string;
  };
  query?: never;
  url: '/responses/{response_id}';
};

export type DeleteResponseErrors = {
  /**
   * Not Found
   */
  404: _Error;
};

export type DeleteResponseError =
  DeleteResponseErrors[keyof DeleteResponseErrors];

export type DeleteResponseResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetResponseData = {
  body?: never;
  path: {
    /**
     * The ID of the response to retrieve.
     */
    response_id: string;
  };
  query?: {
    /**
     * Additional fields to include in the response. See the `include`
     * parameter for Response creation above for more information.
     *
     */
    include?: Array<Includable>;
    /**
     * When true, stream obfuscation will be enabled. Stream obfuscation adds
     * random characters to an `obfuscation` field on streaming delta events
     * to normalize payload sizes as a mitigation to certain side-channel
     * attacks. These obfuscation fields are included by default, but add a
     * small amount of overhead to the data stream. You can set
     * `include_obfuscation` to false to optimize for bandwidth if you trust
     * the network links between your application and the OpenAI API.
     *
     */
    include_obfuscation?: boolean;
    /**
     * The sequence number of the event after which to start streaming.
     *
     */
    starting_after?: number;
    /**
     * If set to true, the model response data will be streamed to the client
     * as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).
     * See the [Streaming section below](https://platform.openai.com/docs/api-reference/responses-streaming)
     * for more information.
     *
     */
    stream?: boolean;
  };
  url: '/responses/{response_id}';
};

export type GetResponseResponses = {
  /**
   * OK
   */
  200: Response;
};

export type GetResponseResponse =
  GetResponseResponses[keyof GetResponseResponses];

export type CancelResponseData = {
  body?: never;
  path: {
    /**
     * The ID of the response to cancel.
     */
    response_id: string;
  };
  query?: never;
  url: '/responses/{response_id}/cancel';
};

export type CancelResponseErrors = {
  /**
   * Not Found
   */
  404: _Error;
};

export type CancelResponseError =
  CancelResponseErrors[keyof CancelResponseErrors];

export type CancelResponseResponses = {
  /**
   * OK
   */
  200: Response;
};

export type CancelResponseResponse =
  CancelResponseResponses[keyof CancelResponseResponses];

export type ListInputItemsData = {
  body?: never;
  path: {
    /**
     * The ID of the response to retrieve input items for.
     */
    response_id: string;
  };
  query?: {
    /**
     * An item ID to list items after, used in pagination.
     *
     */
    after?: string;
    /**
     * An item ID to list items before, used in pagination.
     *
     */
    before?: string;
    /**
     * Additional fields to include in the response. See the `include`
     * parameter for Response creation above for more information.
     *
     */
    include?: Array<Includable>;
    /**
     * A limit on the number of objects to be returned. Limit can range between
     * 1 and 100, and the default is 20.
     *
     */
    limit?: number;
    /**
     * The order to return the input items in. Default is `desc`.
     * - `asc`: Return the input items in ascending order.
     * - `desc`: Return the input items in descending order.
     *
     */
    order?: 'asc' | 'desc';
  };
  url: '/responses/{response_id}/input_items';
};

export type ListInputItemsResponses = {
  /**
   * OK
   */
  200: ResponseItemList;
};

export type ListInputItemsResponse =
  ListInputItemsResponses[keyof ListInputItemsResponses];

export type CreateThreadData = {
  body?: CreateThreadRequest;
  path?: never;
  query?: never;
  url: '/threads';
};

export type CreateThreadResponses = {
  /**
   * OK
   */
  200: ThreadObject;
};

export type CreateThreadResponse =
  CreateThreadResponses[keyof CreateThreadResponses];

export type CreateThreadAndRunData = {
  body: CreateThreadAndRunRequest;
  path?: never;
  query?: never;
  url: '/threads/runs';
};

export type CreateThreadAndRunResponses = {
  /**
   * OK
   */
  200: RunObject;
};

export type CreateThreadAndRunResponse =
  CreateThreadAndRunResponses[keyof CreateThreadAndRunResponses];

export type DeleteThreadData = {
  body?: never;
  path: {
    /**
     * The ID of the thread to delete.
     */
    thread_id: string;
  };
  query?: never;
  url: '/threads/{thread_id}';
};

export type DeleteThreadResponses = {
  /**
   * OK
   */
  200: DeleteThreadResponse;
};

export type DeleteThreadResponse2 =
  DeleteThreadResponses[keyof DeleteThreadResponses];

export type GetThreadData = {
  body?: never;
  path: {
    /**
     * The ID of the thread to retrieve.
     */
    thread_id: string;
  };
  query?: never;
  url: '/threads/{thread_id}';
};

export type GetThreadResponses = {
  /**
   * OK
   */
  200: ThreadObject;
};

export type GetThreadResponse = GetThreadResponses[keyof GetThreadResponses];

export type ModifyThreadData = {
  body: ModifyThreadRequest;
  path: {
    /**
     * The ID of the thread to modify. Only the `metadata` can be modified.
     */
    thread_id: string;
  };
  query?: never;
  url: '/threads/{thread_id}';
};

export type ModifyThreadResponses = {
  /**
   * OK
   */
  200: ThreadObject;
};

export type ModifyThreadResponse =
  ModifyThreadResponses[keyof ModifyThreadResponses];

export type ListMessagesData = {
  body?: never;
  path: {
    /**
     * The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) the messages belong to.
     */
    thread_id: string;
  };
  query?: {
    /**
     * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
     *
     */
    after?: string;
    /**
     * A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
     *
     */
    before?: string;
    /**
     * A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
     *
     */
    limit?: number;
    /**
     * Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
     *
     */
    order?: 'asc' | 'desc';
    /**
     * Filter messages by the run ID that generated them.
     *
     */
    run_id?: string;
  };
  url: '/threads/{thread_id}/messages';
};

export type ListMessagesResponses = {
  /**
   * OK
   */
  200: ListMessagesResponse;
};

export type ListMessagesResponse2 =
  ListMessagesResponses[keyof ListMessagesResponses];

export type CreateMessageData = {
  body: CreateMessageRequest;
  path: {
    /**
     * The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) to create a message for.
     */
    thread_id: string;
  };
  query?: never;
  url: '/threads/{thread_id}/messages';
};

export type CreateMessageResponses = {
  /**
   * OK
   */
  200: MessageObject;
};

export type CreateMessageResponse =
  CreateMessageResponses[keyof CreateMessageResponses];

export type DeleteMessageData = {
  body?: never;
  path: {
    /**
     * The ID of the message to delete.
     */
    message_id: string;
    /**
     * The ID of the thread to which this message belongs.
     */
    thread_id: string;
  };
  query?: never;
  url: '/threads/{thread_id}/messages/{message_id}';
};

export type DeleteMessageResponses = {
  /**
   * OK
   */
  200: DeleteMessageResponse;
};

export type DeleteMessageResponse2 =
  DeleteMessageResponses[keyof DeleteMessageResponses];

export type GetMessageData = {
  body?: never;
  path: {
    /**
     * The ID of the message to retrieve.
     */
    message_id: string;
    /**
     * The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) to which this message belongs.
     */
    thread_id: string;
  };
  query?: never;
  url: '/threads/{thread_id}/messages/{message_id}';
};

export type GetMessageResponses = {
  /**
   * OK
   */
  200: MessageObject;
};

export type GetMessageResponse = GetMessageResponses[keyof GetMessageResponses];

export type ModifyMessageData = {
  body: ModifyMessageRequest;
  path: {
    /**
     * The ID of the message to modify.
     */
    message_id: string;
    /**
     * The ID of the thread to which this message belongs.
     */
    thread_id: string;
  };
  query?: never;
  url: '/threads/{thread_id}/messages/{message_id}';
};

export type ModifyMessageResponses = {
  /**
   * OK
   */
  200: MessageObject;
};

export type ModifyMessageResponse =
  ModifyMessageResponses[keyof ModifyMessageResponses];

export type ListRunsData = {
  body?: never;
  path: {
    /**
     * The ID of the thread the run belongs to.
     */
    thread_id: string;
  };
  query?: {
    /**
     * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
     *
     */
    after?: string;
    /**
     * A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
     *
     */
    before?: string;
    /**
     * A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
     *
     */
    limit?: number;
    /**
     * Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
     *
     */
    order?: 'asc' | 'desc';
  };
  url: '/threads/{thread_id}/runs';
};

export type ListRunsResponses = {
  /**
   * OK
   */
  200: ListRunsResponse;
};

export type ListRunsResponse2 = ListRunsResponses[keyof ListRunsResponses];

export type CreateRunData = {
  body: CreateRunRequest;
  path: {
    /**
     * The ID of the thread to run.
     */
    thread_id: string;
  };
  query?: {
    /**
     * A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
     *
     * See the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.
     *
     */
    'include[]'?: Array<'step_details.tool_calls[*].file_search.results[*].content'>;
  };
  url: '/threads/{thread_id}/runs';
};

export type CreateRunResponses = {
  /**
   * OK
   */
  200: RunObject;
};

export type CreateRunResponse = CreateRunResponses[keyof CreateRunResponses];

export type GetRunData = {
  body?: never;
  path: {
    /**
     * The ID of the run to retrieve.
     */
    run_id: string;
    /**
     * The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) that was run.
     */
    thread_id: string;
  };
  query?: never;
  url: '/threads/{thread_id}/runs/{run_id}';
};

export type GetRunResponses = {
  /**
   * OK
   */
  200: RunObject;
};

export type GetRunResponse = GetRunResponses[keyof GetRunResponses];

export type ModifyRunData = {
  body: ModifyRunRequest;
  path: {
    /**
     * The ID of the run to modify.
     */
    run_id: string;
    /**
     * The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) that was run.
     */
    thread_id: string;
  };
  query?: never;
  url: '/threads/{thread_id}/runs/{run_id}';
};

export type ModifyRunResponses = {
  /**
   * OK
   */
  200: RunObject;
};

export type ModifyRunResponse = ModifyRunResponses[keyof ModifyRunResponses];

export type CancelRunData = {
  body?: never;
  path: {
    /**
     * The ID of the run to cancel.
     */
    run_id: string;
    /**
     * The ID of the thread to which this run belongs.
     */
    thread_id: string;
  };
  query?: never;
  url: '/threads/{thread_id}/runs/{run_id}/cancel';
};

export type CancelRunResponses = {
  /**
   * OK
   */
  200: RunObject;
};

export type CancelRunResponse = CancelRunResponses[keyof CancelRunResponses];

export type ListRunStepsData = {
  body?: never;
  path: {
    /**
     * The ID of the run the run steps belong to.
     */
    run_id: string;
    /**
     * The ID of the thread the run and run steps belong to.
     */
    thread_id: string;
  };
  query?: {
    /**
     * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
     *
     */
    after?: string;
    /**
     * A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
     *
     */
    before?: string;
    /**
     * A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
     *
     * See the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.
     *
     */
    'include[]'?: Array<'step_details.tool_calls[*].file_search.results[*].content'>;
    /**
     * A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
     *
     */
    limit?: number;
    /**
     * Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
     *
     */
    order?: 'asc' | 'desc';
  };
  url: '/threads/{thread_id}/runs/{run_id}/steps';
};

export type ListRunStepsResponses = {
  /**
   * OK
   */
  200: ListRunStepsResponse;
};

export type ListRunStepsResponse2 =
  ListRunStepsResponses[keyof ListRunStepsResponses];

export type GetRunStepData = {
  body?: never;
  path: {
    /**
     * The ID of the run to which the run step belongs.
     */
    run_id: string;
    /**
     * The ID of the run step to retrieve.
     */
    step_id: string;
    /**
     * The ID of the thread to which the run and run step belongs.
     */
    thread_id: string;
  };
  query?: {
    /**
     * A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
     *
     * See the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.
     *
     */
    'include[]'?: Array<'step_details.tool_calls[*].file_search.results[*].content'>;
  };
  url: '/threads/{thread_id}/runs/{run_id}/steps/{step_id}';
};

export type GetRunStepResponses = {
  /**
   * OK
   */
  200: RunStepObject;
};

export type GetRunStepResponse = GetRunStepResponses[keyof GetRunStepResponses];

export type SubmitToolOuputsToRunData = {
  body: SubmitToolOutputsRunRequest;
  path: {
    /**
     * The ID of the run that requires the tool output submission.
     */
    run_id: string;
    /**
     * The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) to which this run belongs.
     */
    thread_id: string;
  };
  query?: never;
  url: '/threads/{thread_id}/runs/{run_id}/submit_tool_outputs';
};

export type SubmitToolOuputsToRunResponses = {
  /**
   * OK
   */
  200: RunObject;
};

export type SubmitToolOuputsToRunResponse =
  SubmitToolOuputsToRunResponses[keyof SubmitToolOuputsToRunResponses];

export type CreateUploadData = {
  body: CreateUploadRequest;
  path?: never;
  query?: never;
  url: '/uploads';
};

export type CreateUploadResponses = {
  /**
   * OK
   */
  200: Upload;
};

export type CreateUploadResponse =
  CreateUploadResponses[keyof CreateUploadResponses];

export type CancelUploadData = {
  body?: never;
  path: {
    /**
     * The ID of the Upload.
     *
     */
    upload_id: string;
  };
  query?: never;
  url: '/uploads/{upload_id}/cancel';
};

export type CancelUploadResponses = {
  /**
   * OK
   */
  200: Upload;
};

export type CancelUploadResponse =
  CancelUploadResponses[keyof CancelUploadResponses];

export type CompleteUploadData = {
  body: CompleteUploadRequest;
  path: {
    /**
     * The ID of the Upload.
     *
     */
    upload_id: string;
  };
  query?: never;
  url: '/uploads/{upload_id}/complete';
};

export type CompleteUploadResponses = {
  /**
   * OK
   */
  200: Upload;
};

export type CompleteUploadResponse =
  CompleteUploadResponses[keyof CompleteUploadResponses];

export type AddUploadPartData = {
  body: AddUploadPartRequest;
  path: {
    /**
     * The ID of the Upload.
     *
     */
    upload_id: string;
  };
  query?: never;
  url: '/uploads/{upload_id}/parts';
};

export type AddUploadPartResponses = {
  /**
   * OK
   */
  200: UploadPart;
};

export type AddUploadPartResponse =
  AddUploadPartResponses[keyof AddUploadPartResponses];

export type ListVectorStoresData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
     *
     */
    after?: string;
    /**
     * A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
     *
     */
    before?: string;
    /**
     * A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
     *
     */
    limit?: number;
    /**
     * Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
     *
     */
    order?: 'asc' | 'desc';
  };
  url: '/vector_stores';
};

export type ListVectorStoresResponses = {
  /**
   * OK
   */
  200: ListVectorStoresResponse;
};

export type ListVectorStoresResponse2 =
  ListVectorStoresResponses[keyof ListVectorStoresResponses];

export type CreateVectorStoreData = {
  body: CreateVectorStoreRequest;
  path?: never;
  query?: never;
  url: '/vector_stores';
};

export type CreateVectorStoreResponses = {
  /**
   * OK
   */
  200: VectorStoreObject;
};

export type CreateVectorStoreResponse =
  CreateVectorStoreResponses[keyof CreateVectorStoreResponses];

export type DeleteVectorStoreData = {
  body?: never;
  path: {
    /**
     * The ID of the vector store to delete.
     */
    vector_store_id: string;
  };
  query?: never;
  url: '/vector_stores/{vector_store_id}';
};

export type DeleteVectorStoreResponses = {
  /**
   * OK
   */
  200: DeleteVectorStoreResponse;
};

export type DeleteVectorStoreResponse2 =
  DeleteVectorStoreResponses[keyof DeleteVectorStoreResponses];

export type GetVectorStoreData = {
  body?: never;
  path: {
    /**
     * The ID of the vector store to retrieve.
     */
    vector_store_id: string;
  };
  query?: never;
  url: '/vector_stores/{vector_store_id}';
};

export type GetVectorStoreResponses = {
  /**
   * OK
   */
  200: VectorStoreObject;
};

export type GetVectorStoreResponse =
  GetVectorStoreResponses[keyof GetVectorStoreResponses];

export type ModifyVectorStoreData = {
  body: UpdateVectorStoreRequest;
  path: {
    /**
     * The ID of the vector store to modify.
     */
    vector_store_id: string;
  };
  query?: never;
  url: '/vector_stores/{vector_store_id}';
};

export type ModifyVectorStoreResponses = {
  /**
   * OK
   */
  200: VectorStoreObject;
};

export type ModifyVectorStoreResponse =
  ModifyVectorStoreResponses[keyof ModifyVectorStoreResponses];

export type CreateVectorStoreFileBatchData = {
  body: CreateVectorStoreFileBatchRequest;
  path: {
    /**
     * The ID of the vector store for which to create a File Batch.
     *
     */
    vector_store_id: string;
  };
  query?: never;
  url: '/vector_stores/{vector_store_id}/file_batches';
};

export type CreateVectorStoreFileBatchResponses = {
  /**
   * OK
   */
  200: VectorStoreFileBatchObject;
};

export type CreateVectorStoreFileBatchResponse =
  CreateVectorStoreFileBatchResponses[keyof CreateVectorStoreFileBatchResponses];

export type GetVectorStoreFileBatchData = {
  body?: never;
  path: {
    /**
     * The ID of the file batch being retrieved.
     */
    batch_id: string;
    /**
     * The ID of the vector store that the file batch belongs to.
     */
    vector_store_id: string;
  };
  query?: never;
  url: '/vector_stores/{vector_store_id}/file_batches/{batch_id}';
};

export type GetVectorStoreFileBatchResponses = {
  /**
   * OK
   */
  200: VectorStoreFileBatchObject;
};

export type GetVectorStoreFileBatchResponse =
  GetVectorStoreFileBatchResponses[keyof GetVectorStoreFileBatchResponses];

export type CancelVectorStoreFileBatchData = {
  body?: never;
  path: {
    /**
     * The ID of the file batch to cancel.
     */
    batch_id: string;
    /**
     * The ID of the vector store that the file batch belongs to.
     */
    vector_store_id: string;
  };
  query?: never;
  url: '/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel';
};

export type CancelVectorStoreFileBatchResponses = {
  /**
   * OK
   */
  200: VectorStoreFileBatchObject;
};

export type CancelVectorStoreFileBatchResponse =
  CancelVectorStoreFileBatchResponses[keyof CancelVectorStoreFileBatchResponses];

export type ListFilesInVectorStoreBatchData = {
  body?: never;
  path: {
    /**
     * The ID of the file batch that the files belong to.
     */
    batch_id: string;
    /**
     * The ID of the vector store that the files belong to.
     */
    vector_store_id: string;
  };
  query?: {
    /**
     * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
     *
     */
    after?: string;
    /**
     * A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
     *
     */
    before?: string;
    /**
     * Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.
     */
    filter?: 'in_progress' | 'completed' | 'failed' | 'cancelled';
    /**
     * A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
     *
     */
    limit?: number;
    /**
     * Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
     *
     */
    order?: 'asc' | 'desc';
  };
  url: '/vector_stores/{vector_store_id}/file_batches/{batch_id}/files';
};

export type ListFilesInVectorStoreBatchResponses = {
  /**
   * OK
   */
  200: ListVectorStoreFilesResponse;
};

export type ListFilesInVectorStoreBatchResponse =
  ListFilesInVectorStoreBatchResponses[keyof ListFilesInVectorStoreBatchResponses];

export type ListVectorStoreFilesData = {
  body?: never;
  path: {
    /**
     * The ID of the vector store that the files belong to.
     */
    vector_store_id: string;
  };
  query?: {
    /**
     * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
     *
     */
    after?: string;
    /**
     * A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
     *
     */
    before?: string;
    /**
     * Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.
     */
    filter?: 'in_progress' | 'completed' | 'failed' | 'cancelled';
    /**
     * A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
     *
     */
    limit?: number;
    /**
     * Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
     *
     */
    order?: 'asc' | 'desc';
  };
  url: '/vector_stores/{vector_store_id}/files';
};

export type ListVectorStoreFilesResponses = {
  /**
   * OK
   */
  200: ListVectorStoreFilesResponse;
};

export type ListVectorStoreFilesResponse2 =
  ListVectorStoreFilesResponses[keyof ListVectorStoreFilesResponses];

export type CreateVectorStoreFileData = {
  body: CreateVectorStoreFileRequest;
  path: {
    /**
     * The ID of the vector store for which to create a File.
     *
     */
    vector_store_id: string;
  };
  query?: never;
  url: '/vector_stores/{vector_store_id}/files';
};

export type CreateVectorStoreFileResponses = {
  /**
   * OK
   */
  200: VectorStoreFileObject;
};

export type CreateVectorStoreFileResponse =
  CreateVectorStoreFileResponses[keyof CreateVectorStoreFileResponses];

export type DeleteVectorStoreFileData = {
  body?: never;
  path: {
    /**
     * The ID of the file to delete.
     */
    file_id: string;
    /**
     * The ID of the vector store that the file belongs to.
     */
    vector_store_id: string;
  };
  query?: never;
  url: '/vector_stores/{vector_store_id}/files/{file_id}';
};

export type DeleteVectorStoreFileResponses = {
  /**
   * OK
   */
  200: DeleteVectorStoreFileResponse;
};

export type DeleteVectorStoreFileResponse2 =
  DeleteVectorStoreFileResponses[keyof DeleteVectorStoreFileResponses];

export type GetVectorStoreFileData = {
  body?: never;
  path: {
    /**
     * The ID of the file being retrieved.
     */
    file_id: string;
    /**
     * The ID of the vector store that the file belongs to.
     */
    vector_store_id: string;
  };
  query?: never;
  url: '/vector_stores/{vector_store_id}/files/{file_id}';
};

export type GetVectorStoreFileResponses = {
  /**
   * OK
   */
  200: VectorStoreFileObject;
};

export type GetVectorStoreFileResponse =
  GetVectorStoreFileResponses[keyof GetVectorStoreFileResponses];

export type UpdateVectorStoreFileAttributesData = {
  body: UpdateVectorStoreFileAttributesRequest;
  path: {
    /**
     * The ID of the file to update attributes.
     */
    file_id: string;
    /**
     * The ID of the vector store the file belongs to.
     */
    vector_store_id: string;
  };
  query?: never;
  url: '/vector_stores/{vector_store_id}/files/{file_id}';
};

export type UpdateVectorStoreFileAttributesResponses = {
  /**
   * OK
   */
  200: VectorStoreFileObject;
};

export type UpdateVectorStoreFileAttributesResponse =
  UpdateVectorStoreFileAttributesResponses[keyof UpdateVectorStoreFileAttributesResponses];

export type RetrieveVectorStoreFileContentData = {
  body?: never;
  path: {
    /**
     * The ID of the file within the vector store.
     */
    file_id: string;
    /**
     * The ID of the vector store.
     */
    vector_store_id: string;
  };
  query?: never;
  url: '/vector_stores/{vector_store_id}/files/{file_id}/content';
};

export type RetrieveVectorStoreFileContentResponses = {
  /**
   * OK
   */
  200: VectorStoreFileContentResponse;
};

export type RetrieveVectorStoreFileContentResponse =
  RetrieveVectorStoreFileContentResponses[keyof RetrieveVectorStoreFileContentResponses];

export type SearchVectorStoreData = {
  body: VectorStoreSearchRequest;
  path: {
    /**
     * The ID of the vector store to search.
     */
    vector_store_id: string;
  };
  query?: never;
  url: '/vector_stores/{vector_store_id}/search';
};

export type SearchVectorStoreResponses = {
  /**
   * OK
   */
  200: VectorStoreSearchResultsPage;
};

export type SearchVectorStoreResponse =
  SearchVectorStoreResponses[keyof SearchVectorStoreResponses];

/**
 * The event payload sent by the API.
 */
export type PostBatchCancelledWebhookPayload = WebhookBatchCancelled;

export type PostBatchCancelledWebhookRequest = {
  body: PostBatchCancelledWebhookPayload;
  key: 'batch_cancelled';
  path?: never;
  query?: never;
};

/**
 * The event payload sent by the API.
 */
export type PostBatchCompletedWebhookPayload = WebhookBatchCompleted;

export type PostBatchCompletedWebhookRequest = {
  body: PostBatchCompletedWebhookPayload;
  key: 'batch_completed';
  path?: never;
  query?: never;
};

/**
 * The event payload sent by the API.
 */
export type PostBatchExpiredWebhookPayload = WebhookBatchExpired;

export type PostBatchExpiredWebhookRequest = {
  body: PostBatchExpiredWebhookPayload;
  key: 'batch_expired';
  path?: never;
  query?: never;
};

/**
 * The event payload sent by the API.
 */
export type PostBatchFailedWebhookPayload = WebhookBatchFailed;

export type PostBatchFailedWebhookRequest = {
  body: PostBatchFailedWebhookPayload;
  key: 'batch_failed';
  path?: never;
  query?: never;
};

/**
 * The event payload sent by the API.
 */
export type PostEvalRunCanceledWebhookPayload = WebhookEvalRunCanceled;

export type PostEvalRunCanceledWebhookRequest = {
  body: PostEvalRunCanceledWebhookPayload;
  key: 'eval_run_canceled';
  path?: never;
  query?: never;
};

/**
 * The event payload sent by the API.
 */
export type PostEvalRunFailedWebhookPayload = WebhookEvalRunFailed;

export type PostEvalRunFailedWebhookRequest = {
  body: PostEvalRunFailedWebhookPayload;
  key: 'eval_run_failed';
  path?: never;
  query?: never;
};

/**
 * The event payload sent by the API.
 */
export type PostEvalRunSucceededWebhookPayload = WebhookEvalRunSucceeded;

export type PostEvalRunSucceededWebhookRequest = {
  body: PostEvalRunSucceededWebhookPayload;
  key: 'eval_run_succeeded';
  path?: never;
  query?: never;
};

/**
 * The event payload sent by the API.
 */
export type PostFineTuningJobCancelledWebhookPayload =
  WebhookFineTuningJobCancelled;

export type PostFineTuningJobCancelledWebhookRequest = {
  body: PostFineTuningJobCancelledWebhookPayload;
  key: 'fine_tuning_job_cancelled';
  path?: never;
  query?: never;
};

/**
 * The event payload sent by the API.
 */
export type PostFineTuningJobFailedWebhookPayload = WebhookFineTuningJobFailed;

export type PostFineTuningJobFailedWebhookRequest = {
  body: PostFineTuningJobFailedWebhookPayload;
  key: 'fine_tuning_job_failed';
  path?: never;
  query?: never;
};

/**
 * The event payload sent by the API.
 */
export type PostFineTuningJobSucceededWebhookPayload =
  WebhookFineTuningJobSucceeded;

export type PostFineTuningJobSucceededWebhookRequest = {
  body: PostFineTuningJobSucceededWebhookPayload;
  key: 'fine_tuning_job_succeeded';
  path?: never;
  query?: never;
};

/**
 * The event payload sent by the API.
 */
export type PostResponseCancelledWebhookPayload = WebhookResponseCancelled;

export type PostResponseCancelledWebhookRequest = {
  body: PostResponseCancelledWebhookPayload;
  key: 'response_cancelled';
  path?: never;
  query?: never;
};

/**
 * The event payload sent by the API.
 */
export type PostResponseCompletedWebhookPayload = WebhookResponseCompleted;

export type PostResponseCompletedWebhookRequest = {
  body: PostResponseCompletedWebhookPayload;
  key: 'response_completed';
  path?: never;
  query?: never;
};

/**
 * The event payload sent by the API.
 */
export type PostResponseFailedWebhookPayload = WebhookResponseFailed;

export type PostResponseFailedWebhookRequest = {
  body: PostResponseFailedWebhookPayload;
  key: 'response_failed';
  path?: never;
  query?: never;
};

/**
 * The event payload sent by the API.
 */
export type PostResponseIncompleteWebhookPayload = WebhookResponseIncomplete;

export type PostResponseIncompleteWebhookRequest = {
  body: PostResponseIncompleteWebhookPayload;
  key: 'response_incomplete';
  path?: never;
  query?: never;
};
