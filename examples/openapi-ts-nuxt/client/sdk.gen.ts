// This file is auto-generated by @hey-api/openapi-ts

import type {
  Client,
  Composable,
  Options as ClientOptions,
  TDataShape,
} from '@hey-api/client-nuxt';

import { client as _heyApiClient } from './client.gen';
import {
  addPetResponseTransformer,
  createUserResponseTransformer,
  findPetsByStatusResponseTransformer,
  findPetsByTagsResponseTransformer,
  getOrderByIdResponseTransformer,
  getPetByIdResponseTransformer,
  getUserByNameResponseTransformer,
  placeOrderResponseTransformer,
  updatePetResponseTransformer,
} from './transformers.gen';
import type {
  AddPetData,
  AddPetResponse,
  CreateUserData,
  CreateUserResponse,
  CreateUsersWithListInputData,
  CreateUsersWithListInputResponse,
  DeleteOrderData,
  DeletePetData,
  DeleteUserData,
  FindPetsByStatusData,
  FindPetsByStatusResponse,
  FindPetsByTagsData,
  FindPetsByTagsResponse,
  GetInventoryData,
  GetInventoryResponse,
  GetOrderByIdData,
  GetOrderByIdResponse,
  GetPetByIdData,
  GetPetByIdResponse,
  GetUserByNameData,
  GetUserByNameResponse,
  LoginUserData,
  LoginUserResponse,
  LogoutUserData,
  PlaceOrderData,
  PlaceOrderResponse,
  UpdatePetData,
  UpdatePetResponse,
  UpdatePetWithFormData,
  UpdateUserData,
  UploadFileData,
  UploadFileResponse,
} from './types.gen';
import {
  zAddPetResponse,
  zCreateUserResponse,
  zCreateUsersWithListInputResponse,
  zFindPetsByStatusResponse,
  zFindPetsByTagsResponse,
  zGetInventoryResponse,
  zGetOrderByIdResponse,
  zGetPetByIdResponse,
  zGetUserByNameResponse,
  zLoginUserResponse,
  zPlaceOrderResponse,
  zUpdatePetResponse,
  zUploadFileResponse,
} from './zod.gen';

export type Options<
  TComposable extends Composable,
  TData extends TDataShape = TDataShape,
  ResT = unknown,
  DefaultT = undefined,
> = ClientOptions<TComposable, TData, ResT, DefaultT> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Add a new pet to the store
 * Add a new pet to the store
 */
export const addPet = <
  TComposable extends Composable,
  DefaultT extends AddPetResponse = AddPetResponse,
>(
  options: Options<TComposable, AddPetData, AddPetResponse, DefaultT>,
) =>
  (options.client ?? _heyApiClient).post<
    TComposable,
    AddPetResponse | DefaultT,
    unknown,
    DefaultT
  >({
    responseTransformer: addPetResponseTransformer,
    responseValidator: async (data) => await zAddPetResponse.parseAsync(data),
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/pet',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });

/**
 * Update an existing pet
 * Update an existing pet by Id
 */
export const updatePet = <
  TComposable extends Composable,
  DefaultT extends UpdatePetResponse = UpdatePetResponse,
>(
  options: Options<TComposable, UpdatePetData, UpdatePetResponse, DefaultT>,
) =>
  (options.client ?? _heyApiClient).put<
    TComposable,
    UpdatePetResponse | DefaultT,
    unknown,
    DefaultT
  >({
    responseTransformer: updatePetResponseTransformer,
    responseValidator: async (data) =>
      await zUpdatePetResponse.parseAsync(data),
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/pet',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });

/**
 * Finds Pets by status
 * Multiple status values can be provided with comma separated strings
 */
export const findPetsByStatus = <
  TComposable extends Composable,
  DefaultT extends FindPetsByStatusResponse = FindPetsByStatusResponse,
>(
  options: Options<
    TComposable,
    FindPetsByStatusData,
    FindPetsByStatusResponse,
    DefaultT
  >,
) =>
  (options.client ?? _heyApiClient).get<
    TComposable,
    FindPetsByStatusResponse | DefaultT,
    unknown,
    DefaultT
  >({
    responseTransformer: findPetsByStatusResponseTransformer,
    responseValidator: async (data) =>
      await zFindPetsByStatusResponse.parseAsync(data),
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/pet/findByStatus',
    ...options,
  });

/**
 * Finds Pets by tags
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 */
export const findPetsByTags = <
  TComposable extends Composable,
  DefaultT extends FindPetsByTagsResponse = FindPetsByTagsResponse,
>(
  options: Options<
    TComposable,
    FindPetsByTagsData,
    FindPetsByTagsResponse,
    DefaultT
  >,
) =>
  (options.client ?? _heyApiClient).get<
    TComposable,
    FindPetsByTagsResponse | DefaultT,
    unknown,
    DefaultT
  >({
    responseTransformer: findPetsByTagsResponseTransformer,
    responseValidator: async (data) =>
      await zFindPetsByTagsResponse.parseAsync(data),
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/pet/findByTags',
    ...options,
  });

/**
 * Deletes a pet
 */
export const deletePet = <TComposable extends Composable, DefaultT = undefined>(
  options: Options<TComposable, DeletePetData, unknown, DefaultT>,
) =>
  (options.client ?? _heyApiClient).delete<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/pet/{petId}',
    ...options,
  });

/**
 * Find pet by ID
 * Returns a single pet
 */
export const getPetById = <
  TComposable extends Composable,
  DefaultT extends GetPetByIdResponse = GetPetByIdResponse,
>(
  options: Options<TComposable, GetPetByIdData, GetPetByIdResponse, DefaultT>,
) =>
  (options.client ?? _heyApiClient).get<
    TComposable,
    GetPetByIdResponse | DefaultT,
    unknown,
    DefaultT
  >({
    responseTransformer: getPetByIdResponseTransformer,
    responseValidator: async (data) =>
      await zGetPetByIdResponse.parseAsync(data),
    security: [
      {
        name: 'api_key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/pet/{petId}',
    ...options,
  });

/**
 * Updates a pet in the store with form data
 */
export const updatePetWithForm = <
  TComposable extends Composable,
  DefaultT = undefined,
>(
  options: Options<TComposable, UpdatePetWithFormData, unknown, DefaultT>,
) =>
  (options.client ?? _heyApiClient).post<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/pet/{petId}',
    ...options,
  });

/**
 * uploads an image
 */
export const uploadFile = <
  TComposable extends Composable,
  DefaultT extends UploadFileResponse = UploadFileResponse,
>(
  options: Options<TComposable, UploadFileData, UploadFileResponse, DefaultT>,
) =>
  (options.client ?? _heyApiClient).post<
    TComposable,
    UploadFileResponse | DefaultT,
    unknown,
    DefaultT
  >({
    responseValidator: async (data) =>
      await zUploadFileResponse.parseAsync(data),
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/pet/{petId}/uploadImage',
    ...options,
    headers: {
      'Content-Type': 'application/octet-stream',
      ...options?.headers,
    },
  });

/**
 * Returns pet inventories by status
 * Returns a map of status codes to quantities
 */
export const getInventory = <
  TComposable extends Composable,
  DefaultT extends GetInventoryResponse = GetInventoryResponse,
>(
  options: Options<
    TComposable,
    GetInventoryData,
    GetInventoryResponse,
    DefaultT
  >,
) =>
  (options.client ?? _heyApiClient).get<
    TComposable,
    GetInventoryResponse | DefaultT,
    unknown,
    DefaultT
  >({
    responseValidator: async (data) =>
      await zGetInventoryResponse.parseAsync(data),
    security: [
      {
        name: 'api_key',
        type: 'apiKey',
      },
    ],
    url: '/store/inventory',
    ...options,
  });

/**
 * Place an order for a pet
 * Place a new order in the store
 */
export const placeOrder = <
  TComposable extends Composable,
  DefaultT extends PlaceOrderResponse = PlaceOrderResponse,
>(
  options: Options<TComposable, PlaceOrderData, PlaceOrderResponse, DefaultT>,
) =>
  (options.client ?? _heyApiClient).post<
    TComposable,
    PlaceOrderResponse | DefaultT,
    unknown,
    DefaultT
  >({
    responseTransformer: placeOrderResponseTransformer,
    responseValidator: async (data) =>
      await zPlaceOrderResponse.parseAsync(data),
    url: '/store/order',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });

/**
 * Delete purchase order by ID
 * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
 */
export const deleteOrder = <
  TComposable extends Composable,
  DefaultT = undefined,
>(
  options: Options<TComposable, DeleteOrderData, unknown, DefaultT>,
) =>
  (options.client ?? _heyApiClient).delete<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/store/order/{orderId}',
    ...options,
  });

/**
 * Find purchase order by ID
 * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
 */
export const getOrderById = <
  TComposable extends Composable,
  DefaultT extends GetOrderByIdResponse = GetOrderByIdResponse,
>(
  options: Options<
    TComposable,
    GetOrderByIdData,
    GetOrderByIdResponse,
    DefaultT
  >,
) =>
  (options.client ?? _heyApiClient).get<
    TComposable,
    GetOrderByIdResponse | DefaultT,
    unknown,
    DefaultT
  >({
    responseTransformer: getOrderByIdResponseTransformer,
    responseValidator: async (data) =>
      await zGetOrderByIdResponse.parseAsync(data),
    url: '/store/order/{orderId}',
    ...options,
  });

/**
 * Create user
 * This can only be done by the logged in user.
 */
export const createUser = <
  TComposable extends Composable,
  DefaultT extends CreateUserResponse = CreateUserResponse,
>(
  options: Options<TComposable, CreateUserData, CreateUserResponse, DefaultT>,
) =>
  (options.client ?? _heyApiClient).post<
    TComposable,
    CreateUserResponse | DefaultT,
    unknown,
    DefaultT
  >({
    responseTransformer: createUserResponseTransformer,
    responseValidator: async (data) =>
      await zCreateUserResponse.parseAsync(data),
    url: '/user',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });

/**
 * Creates list of users with given input array
 * Creates list of users with given input array
 */
export const createUsersWithListInput = <
  TComposable extends Composable,
  DefaultT extends
    CreateUsersWithListInputResponse = CreateUsersWithListInputResponse,
>(
  options: Options<
    TComposable,
    CreateUsersWithListInputData,
    CreateUsersWithListInputResponse,
    DefaultT
  >,
) =>
  (options.client ?? _heyApiClient).post<
    TComposable,
    CreateUsersWithListInputResponse | DefaultT,
    unknown,
    DefaultT
  >({
    responseValidator: async (data) =>
      await zCreateUsersWithListInputResponse.parseAsync(data),
    url: '/user/createWithList',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });

/**
 * Logs user into the system
 */
export const loginUser = <
  TComposable extends Composable,
  DefaultT extends LoginUserResponse = LoginUserResponse,
>(
  options: Options<TComposable, LoginUserData, LoginUserResponse, DefaultT>,
) =>
  (options.client ?? _heyApiClient).get<
    TComposable,
    LoginUserResponse | DefaultT,
    unknown,
    DefaultT
  >({
    responseValidator: async (data) =>
      await zLoginUserResponse.parseAsync(data),
    url: '/user/login',
    ...options,
  });

/**
 * Logs out current logged in user session
 */
export const logoutUser = <
  TComposable extends Composable,
  DefaultT = undefined,
>(
  options: Options<TComposable, LogoutUserData, unknown, DefaultT>,
) =>
  (options.client ?? _heyApiClient).get<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/user/logout',
    ...options,
  });

/**
 * Delete user
 * This can only be done by the logged in user.
 */
export const deleteUser = <
  TComposable extends Composable,
  DefaultT = undefined,
>(
  options: Options<TComposable, DeleteUserData, unknown, DefaultT>,
) =>
  (options.client ?? _heyApiClient).delete<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/user/{username}',
    ...options,
  });

/**
 * Get user by user name
 */
export const getUserByName = <
  TComposable extends Composable,
  DefaultT extends GetUserByNameResponse = GetUserByNameResponse,
>(
  options: Options<
    TComposable,
    GetUserByNameData,
    GetUserByNameResponse,
    DefaultT
  >,
) =>
  (options.client ?? _heyApiClient).get<
    TComposable,
    GetUserByNameResponse | DefaultT,
    unknown,
    DefaultT
  >({
    responseTransformer: getUserByNameResponseTransformer,
    responseValidator: async (data) =>
      await zGetUserByNameResponse.parseAsync(data),
    url: '/user/{username}',
    ...options,
  });

/**
 * Update user
 * This can only be done by the logged in user.
 */
export const updateUser = <
  TComposable extends Composable,
  DefaultT = undefined,
>(
  options: Options<TComposable, UpdateUserData, unknown, DefaultT>,
) =>
  (options.client ?? _heyApiClient).put<
    TComposable,
    unknown | DefaultT,
    unknown,
    DefaultT
  >({
    url: '/user/{username}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
