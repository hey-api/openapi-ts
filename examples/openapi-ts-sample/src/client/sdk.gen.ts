// This file is auto-generated by @hey-api/openapi-ts

import type {
  Client,
  Options as Options2,
  RequestResult,
  TDataShape,
} from './client';
import { client } from './client.gen';
import type {
  AddPetData,
  AddPetErrors,
  AddPetResponses,
  CreateUserData,
  CreateUserErrors,
  CreateUserResponses,
  CreateUsersWithListInputData,
  CreateUsersWithListInputErrors,
  CreateUsersWithListInputResponses,
  DeleteOrderData,
  DeleteOrderErrors,
  DeleteOrderResponses,
  DeletePetData,
  DeletePetErrors,
  DeletePetResponses,
  DeleteUserData,
  DeleteUserErrors,
  DeleteUserResponses,
  FindPetsByStatusData,
  FindPetsByStatusErrors,
  FindPetsByStatusResponses,
  FindPetsByTagsData,
  FindPetsByTagsErrors,
  FindPetsByTagsResponses,
  GetInventoryData,
  GetInventoryErrors,
  GetInventoryResponses,
  GetOrderByIdData,
  GetOrderByIdErrors,
  GetOrderByIdResponses,
  GetPetByIdData,
  GetPetByIdErrors,
  GetPetByIdResponses,
  GetUserByNameData,
  GetUserByNameErrors,
  GetUserByNameResponses,
  LoginUserData,
  LoginUserErrors,
  LoginUserResponses,
  LogoutUserData,
  LogoutUserErrors,
  LogoutUserResponses,
  PlaceOrderData,
  PlaceOrderErrors,
  PlaceOrderResponses,
  UpdatePetData,
  UpdatePetErrors,
  UpdatePetResponses,
  UpdatePetWithFormData,
  UpdatePetWithFormErrors,
  UpdatePetWithFormResponses,
  UpdateUserData,
  UpdateUserErrors,
  UpdateUserResponses,
  UploadFileData,
  UploadFileErrors,
  UploadFileResponses,
} from './types.gen';
import {
  zAddPetData,
  zAddPetResponse,
  zCreateUserData,
  zCreateUserResponse,
  zCreateUsersWithListInputData,
  zCreateUsersWithListInputResponse,
  zDeleteOrderData,
  zDeletePetData,
  zDeleteUserData,
  zFindPetsByStatusData,
  zFindPetsByStatusResponse,
  zFindPetsByTagsData,
  zFindPetsByTagsResponse,
  zGetInventoryData,
  zGetInventoryResponse,
  zGetOrderByIdData,
  zGetOrderByIdResponse,
  zGetPetByIdData,
  zGetPetByIdResponse,
  zGetUserByNameData,
  zGetUserByNameResponse,
  zLoginUserData,
  zLoginUserResponse,
  zLogoutUserData,
  zPlaceOrderData,
  zPlaceOrderResponse,
  zUpdatePetData,
  zUpdatePetResponse,
  zUpdatePetWithFormData,
  zUpdatePetWithFormResponse,
  zUpdateUserData,
  zUploadFileData,
  zUploadFileResponse,
} from './zod.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = Options2<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Add a new pet to the store.
 *
 * Add a new pet to the store.
 */
export const addPet = <ThrowOnError extends boolean = false>(
  options: Options<AddPetData, ThrowOnError>,
): RequestResult<AddPetResponses, AddPetErrors, ThrowOnError> =>
  (options.client ?? client).post<AddPetResponses, AddPetErrors, ThrowOnError>({
    requestValidator: async (data) => await zAddPetData.parseAsync(data),
    responseValidator: async (data) => await zAddPetResponse.parseAsync(data),
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/pet',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });

/**
 * Update an existing pet.
 *
 * Update an existing pet by Id.
 */
export const updatePet = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePetData, ThrowOnError>,
): RequestResult<UpdatePetResponses, UpdatePetErrors, ThrowOnError> =>
  (options.client ?? client).put<
    UpdatePetResponses,
    UpdatePetErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => await zUpdatePetData.parseAsync(data),
    responseValidator: async (data) =>
      await zUpdatePetResponse.parseAsync(data),
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/pet',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });

/**
 * Finds Pets by status.
 *
 * Multiple status values can be provided with comma separated strings.
 */
export const findPetsByStatus = <ThrowOnError extends boolean = false>(
  options: Options<FindPetsByStatusData, ThrowOnError>,
): RequestResult<
  FindPetsByStatusResponses,
  FindPetsByStatusErrors,
  ThrowOnError
> =>
  (options.client ?? client).get<
    FindPetsByStatusResponses,
    FindPetsByStatusErrors,
    ThrowOnError
  >({
    requestValidator: async (data) =>
      await zFindPetsByStatusData.parseAsync(data),
    responseValidator: async (data) =>
      await zFindPetsByStatusResponse.parseAsync(data),
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/pet/findByStatus',
    ...options,
  });

/**
 * Finds Pets by tags.
 *
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 */
export const findPetsByTags = <ThrowOnError extends boolean = false>(
  options: Options<FindPetsByTagsData, ThrowOnError>,
): RequestResult<FindPetsByTagsResponses, FindPetsByTagsErrors, ThrowOnError> =>
  (options.client ?? client).get<
    FindPetsByTagsResponses,
    FindPetsByTagsErrors,
    ThrowOnError
  >({
    requestValidator: async (data) =>
      await zFindPetsByTagsData.parseAsync(data),
    responseValidator: async (data) =>
      await zFindPetsByTagsResponse.parseAsync(data),
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/pet/findByTags',
    ...options,
  });

/**
 * Deletes a pet.
 *
 * Delete a pet.
 */
export const deletePet = <ThrowOnError extends boolean = false>(
  options: Options<DeletePetData, ThrowOnError>,
): RequestResult<DeletePetResponses, DeletePetErrors, ThrowOnError> =>
  (options.client ?? client).delete<
    DeletePetResponses,
    DeletePetErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => await zDeletePetData.parseAsync(data),
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/pet/{petId}',
    ...options,
  });

/**
 * Find pet by ID.
 *
 * Returns a single pet.
 */
export const getPetById = <ThrowOnError extends boolean = false>(
  options: Options<GetPetByIdData, ThrowOnError>,
): RequestResult<GetPetByIdResponses, GetPetByIdErrors, ThrowOnError> =>
  (options.client ?? client).get<
    GetPetByIdResponses,
    GetPetByIdErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => await zGetPetByIdData.parseAsync(data),
    responseValidator: async (data) =>
      await zGetPetByIdResponse.parseAsync(data),
    security: [
      {
        name: 'api_key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/pet/{petId}',
    ...options,
  });

/**
 * Updates a pet in the store with form data.
 *
 * Updates a pet resource based on the form data.
 */
export const updatePetWithForm = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePetWithFormData, ThrowOnError>,
): RequestResult<
  UpdatePetWithFormResponses,
  UpdatePetWithFormErrors,
  ThrowOnError
> =>
  (options.client ?? client).post<
    UpdatePetWithFormResponses,
    UpdatePetWithFormErrors,
    ThrowOnError
  >({
    requestValidator: async (data) =>
      await zUpdatePetWithFormData.parseAsync(data),
    responseValidator: async (data) =>
      await zUpdatePetWithFormResponse.parseAsync(data),
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/pet/{petId}',
    ...options,
  });

/**
 * Uploads an image.
 *
 * Upload image of the pet.
 */
export const uploadFile = <ThrowOnError extends boolean = false>(
  options: Options<UploadFileData, ThrowOnError>,
): RequestResult<UploadFileResponses, UploadFileErrors, ThrowOnError> =>
  (options.client ?? client).post<
    UploadFileResponses,
    UploadFileErrors,
    ThrowOnError
  >({
    bodySerializer: null,
    requestValidator: async (data) => await zUploadFileData.parseAsync(data),
    responseValidator: async (data) =>
      await zUploadFileResponse.parseAsync(data),
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/pet/{petId}/uploadImage',
    ...options,
    headers: {
      'Content-Type': 'application/octet-stream',
      ...options.headers,
    },
  });

/**
 * Returns pet inventories by status.
 *
 * Returns a map of status codes to quantities.
 */
export const getInventory = <ThrowOnError extends boolean = false>(
  options?: Options<GetInventoryData, ThrowOnError>,
): RequestResult<GetInventoryResponses, GetInventoryErrors, ThrowOnError> =>
  (options?.client ?? client).get<
    GetInventoryResponses,
    GetInventoryErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => await zGetInventoryData.parseAsync(data),
    responseValidator: async (data) =>
      await zGetInventoryResponse.parseAsync(data),
    security: [
      {
        name: 'api_key',
        type: 'apiKey',
      },
    ],
    url: '/store/inventory',
    ...options,
  });

/**
 * Place an order for a pet.
 *
 * Place a new order in the store.
 */
export const placeOrder = <ThrowOnError extends boolean = false>(
  options?: Options<PlaceOrderData, ThrowOnError>,
): RequestResult<PlaceOrderResponses, PlaceOrderErrors, ThrowOnError> =>
  (options?.client ?? client).post<
    PlaceOrderResponses,
    PlaceOrderErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => await zPlaceOrderData.parseAsync(data),
    responseValidator: async (data) =>
      await zPlaceOrderResponse.parseAsync(data),
    url: '/store/order',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });

/**
 * Delete purchase order by identifier.
 *
 * For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.
 */
export const deleteOrder = <ThrowOnError extends boolean = false>(
  options: Options<DeleteOrderData, ThrowOnError>,
): RequestResult<DeleteOrderResponses, DeleteOrderErrors, ThrowOnError> =>
  (options.client ?? client).delete<
    DeleteOrderResponses,
    DeleteOrderErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => await zDeleteOrderData.parseAsync(data),
    url: '/store/order/{orderId}',
    ...options,
  });

/**
 * Find purchase order by ID.
 *
 * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
 */
export const getOrderById = <ThrowOnError extends boolean = false>(
  options: Options<GetOrderByIdData, ThrowOnError>,
): RequestResult<GetOrderByIdResponses, GetOrderByIdErrors, ThrowOnError> =>
  (options.client ?? client).get<
    GetOrderByIdResponses,
    GetOrderByIdErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => await zGetOrderByIdData.parseAsync(data),
    responseValidator: async (data) =>
      await zGetOrderByIdResponse.parseAsync(data),
    url: '/store/order/{orderId}',
    ...options,
  });

/**
 * Create user.
 *
 * This can only be done by the logged in user.
 */
export const createUser = <ThrowOnError extends boolean = false>(
  options?: Options<CreateUserData, ThrowOnError>,
): RequestResult<CreateUserResponses, CreateUserErrors, ThrowOnError> =>
  (options?.client ?? client).post<
    CreateUserResponses,
    CreateUserErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => await zCreateUserData.parseAsync(data),
    responseValidator: async (data) =>
      await zCreateUserResponse.parseAsync(data),
    url: '/user',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });

/**
 * Creates list of users with given input array.
 *
 * Creates list of users with given input array.
 */
export const createUsersWithListInput = <ThrowOnError extends boolean = false>(
  options?: Options<CreateUsersWithListInputData, ThrowOnError>,
): RequestResult<
  CreateUsersWithListInputResponses,
  CreateUsersWithListInputErrors,
  ThrowOnError
> =>
  (options?.client ?? client).post<
    CreateUsersWithListInputResponses,
    CreateUsersWithListInputErrors,
    ThrowOnError
  >({
    requestValidator: async (data) =>
      await zCreateUsersWithListInputData.parseAsync(data),
    responseValidator: async (data) =>
      await zCreateUsersWithListInputResponse.parseAsync(data),
    url: '/user/createWithList',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });

/**
 * Logs user into the system.
 *
 * Log into the system.
 */
export const loginUser = <ThrowOnError extends boolean = false>(
  options?: Options<LoginUserData, ThrowOnError>,
): RequestResult<LoginUserResponses, LoginUserErrors, ThrowOnError> =>
  (options?.client ?? client).get<
    LoginUserResponses,
    LoginUserErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => await zLoginUserData.parseAsync(data),
    responseValidator: async (data) =>
      await zLoginUserResponse.parseAsync(data),
    url: '/user/login',
    ...options,
  });

/**
 * Logs out current logged in user session.
 *
 * Log user out of the system.
 */
export const logoutUser = <ThrowOnError extends boolean = false>(
  options?: Options<LogoutUserData, ThrowOnError>,
): RequestResult<LogoutUserResponses, LogoutUserErrors, ThrowOnError> =>
  (options?.client ?? client).get<
    LogoutUserResponses,
    LogoutUserErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => await zLogoutUserData.parseAsync(data),
    url: '/user/logout',
    ...options,
  });

/**
 * Delete user resource.
 *
 * This can only be done by the logged in user.
 */
export const deleteUser = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserData, ThrowOnError>,
): RequestResult<DeleteUserResponses, DeleteUserErrors, ThrowOnError> =>
  (options.client ?? client).delete<
    DeleteUserResponses,
    DeleteUserErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => await zDeleteUserData.parseAsync(data),
    url: '/user/{username}',
    ...options,
  });

/**
 * Get user by user name.
 *
 * Get user detail based on username.
 */
export const getUserByName = <ThrowOnError extends boolean = false>(
  options: Options<GetUserByNameData, ThrowOnError>,
): RequestResult<GetUserByNameResponses, GetUserByNameErrors, ThrowOnError> =>
  (options.client ?? client).get<
    GetUserByNameResponses,
    GetUserByNameErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => await zGetUserByNameData.parseAsync(data),
    responseValidator: async (data) =>
      await zGetUserByNameResponse.parseAsync(data),
    url: '/user/{username}',
    ...options,
  });

/**
 * Update user resource.
 *
 * This can only be done by the logged in user.
 */
export const updateUser = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserData, ThrowOnError>,
): RequestResult<UpdateUserResponses, UpdateUserErrors, ThrowOnError> =>
  (options.client ?? client).put<
    UpdateUserResponses,
    UpdateUserErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => await zUpdateUserData.parseAsync(data),
    url: '/user/{username}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
