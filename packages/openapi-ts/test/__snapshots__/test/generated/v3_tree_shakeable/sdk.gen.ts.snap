// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { PatchApiNoTagResponse, ImportData, ImportResponse, FooWowResponse, ApiVVersionODataControllerCountResponse, GetApiSimpleOperationData, GetApiSimpleOperationResponse, DeleteFooData3, CallWithDescriptionsData, DeprecatedCallData, CallWithParametersData, CallWithWeirdParameterNamesData, GetCallWithOptionalParamData, PostCallWithOptionalParamData, PostCallWithOptionalParamResponse, PostApiRequestBodyData, PostApiFormDataData, CallWithDefaultParametersData, CallWithDefaultOptionalParametersData, CallToTestOrderOfParamsData, CallWithNoContentResponseResponse, CallWithResponseAndNoContentResponseResponse, DummyAResponse, DummyBResponse, CallWithResponseResponse, CallWithDuplicateResponsesResponse, CallWithResponsesResponse, CollectionFormatData, TypesData, TypesResponse, UploadFileData, UploadFileResponse, FileResponseData, FileResponseResponse, ComplexTypesData, ComplexTypesResponse, MultipartRequestData, MultipartResponseResponse, ComplexParamsData, ComplexParamsResponse, CallWithResultFromHeaderResponse, TestErrorCodeData, TestErrorCodeResponse, NonAsciiæøåÆøÅöôêÊ字符串Data, NonAsciiæøåÆøÅöôêÊ字符串Response, PutWithFormUrlEncodedData } from './types.gen';

/**
 * @throws ApiError
 */
export const export_ = (): CancelablePromise<void> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/no+tag'
    });
};

/**
 * @returns unknown OK
 * @throws ApiError
 */
export const patchApiNoTag = (): CancelablePromise<PatchApiNoTagResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v{api-version}/no+tag'
    });
};

/**
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Model_From_Zendesk Success
 * @returns ModelWithReadOnlyAndWriteOnly Default success response
 * @throws ApiError
 */
export const import_ = (data: ImportData): CancelablePromise<ImportResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/no+tag',
        body: data.requestBody,
        mediaType: 'application/json'
    });
};

/**
 * @returns unknown OK
 * @throws ApiError
 */
export const fooWow = (): CancelablePromise<FooWowResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/api/v{api-version}/no+tag'
    });
};

/**
 * @returns Model_From_Zendesk Success
 * @throws ApiError
 */
export const apiVVersionODataControllerCount = (): CancelablePromise<ApiVVersionODataControllerCountResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/simple/$count'
    });
};

/**
 * @param data The data for the request.
 * @param data.fooParam foo in method
 * @returns number Response is a simple number
 * @throws ApiError
 */
export const getApiSimpleOperation = (data: GetApiSimpleOperationData): CancelablePromise<GetApiSimpleOperationResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/simple:operation',
        path: {
            foo_param: data.fooParam
        },
        errors: {
            default: 'Default error response'
        }
    });
};

/**
 * @throws ApiError
 */
export const getCallWithoutParametersAndResponse = (): CancelablePromise<void> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/simple'
    });
};

/**
 * @throws ApiError
 */
export const putCallWithoutParametersAndResponse = (): CancelablePromise<void> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/api/v{api-version}/simple'
    });
};

/**
 * @throws ApiError
 */
export const postCallWithoutParametersAndResponse = (): CancelablePromise<void> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/simple'
    });
};

/**
 * @throws ApiError
 */
export const deleteCallWithoutParametersAndResponse = (): CancelablePromise<void> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v{api-version}/simple'
    });
};

/**
 * @throws ApiError
 */
export const optionsCallWithoutParametersAndResponse = (): CancelablePromise<void> => {
    return __request(OpenAPI, {
        method: 'OPTIONS',
        url: '/api/v{api-version}/simple'
    });
};

/**
 * @throws ApiError
 */
export const headCallWithoutParametersAndResponse = (): CancelablePromise<void> => {
    return __request(OpenAPI, {
        method: 'HEAD',
        url: '/api/v{api-version}/simple'
    });
};

/**
 * @throws ApiError
 */
export const patchCallWithoutParametersAndResponse = (): CancelablePromise<void> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v{api-version}/simple'
    });
};

/**
 * @param data The data for the request.
 * @param data.fooParam foo in method
 * @param data.barParam bar in method
 * @param data.xFooBar Parameter with illegal characters
 * @throws ApiError
 */
export const deleteFoo = (data: DeleteFooData3): CancelablePromise<void> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v{api-version}/foo/{foo_param}/bar/{BarParam}',
        path: {
            foo_param: data.fooParam,
            BarParam: data.barParam
        },
        headers: {
            'x-Foo-Bar': data.xFooBar
        }
    });
};

/**
 * @param data The data for the request.
 * @param data.parameterWithBreaks Testing multiline comments in string: First line
 * Second line
 *
 * Fourth line
 * @param data.parameterWithBackticks Testing backticks in string: `backticks` and ```multiple backticks``` should work
 * @param data.parameterWithSlashes Testing slashes in string: \backwards\\\ and /forwards/// should work
 * @param data.parameterWithExpressionPlaceholders Testing expression placeholders in string: ${expression} should work
 * @param data.parameterWithQuotes Testing quotes in string: 'single quote''' and "double quotes""" should work
 * @param data.parameterWithReservedCharacters Testing reserved characters in string: * inline * and ** inline ** should work
 * @throws ApiError
 */
export const callWithDescriptions = (data: CallWithDescriptionsData = {}): CancelablePromise<void> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/descriptions/',
        query: {
            parameterWithBreaks: data.parameterWithBreaks,
            parameterWithBackticks: data.parameterWithBackticks,
            parameterWithSlashes: data.parameterWithSlashes,
            parameterWithExpressionPlaceholders: data.parameterWithExpressionPlaceholders,
            parameterWithQuotes: data.parameterWithQuotes,
            parameterWithReservedCharacters: data.parameterWithReservedCharacters
        }
    });
};

/**
 * @deprecated
 * @param data The data for the request.
 * @param data.parameter This parameter is deprecated
 * @throws ApiError
 */
export const deprecatedCall = (data: DeprecatedCallData): CancelablePromise<void> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/parameters/deprecated',
        headers: {
            parameter: data.parameter
        }
    });
};

/**
 * @param data The data for the request.
 * @param data.parameterHeader This is the parameter that goes into the header
 * @param data.fooAllOfEnum
 * @param data.cursor This is the parameter that goes into the query params
 * @param data.parameterCookie This is the parameter that goes into the cookie
 * @param data.parameterPath This is the parameter that goes into the path
 * @param data.requestBody This is the parameter that goes into the body
 * @param data.fooRefEnum
 * @throws ApiError
 */
export const callWithParameters = (data: CallWithParametersData): CancelablePromise<void> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/parameters/{parameterPath}',
        path: {
            parameterPath: data.parameterPath
        },
        cookies: {
            parameterCookie: data.parameterCookie
        },
        headers: {
            parameterHeader: data.parameterHeader
        },
        query: {
            foo_ref_enum: data.fooRefEnum,
            foo_all_of_enum: data.fooAllOfEnum,
            cursor: data.cursor
        },
        body: data.requestBody,
        mediaType: 'application/json'
    });
};

/**
 * @param data The data for the request.
 * @param data.parameterHeader This is the parameter that goes into the request header
 * @param data.parameterQuery This is the parameter that goes into the request query params
 * @param data.parameterCookie This is the parameter that goes into the cookie
 * @param data.requestBody This is the parameter that goes into the body
 * @param data.parameterPath1 This is the parameter that goes into the path
 * @param data.parameterPath2 This is the parameter that goes into the path
 * @param data.parameterPath3 This is the parameter that goes into the path
 * @param data._default This is the parameter with a reserved keyword
 * @throws ApiError
 */
export const callWithWeirdParameterNames = (data: CallWithWeirdParameterNamesData): CancelablePromise<void> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
        path: {
            'parameter.path.1': data.parameterPath1,
            'parameter-path-2': data.parameterPath2,
            'PARAMETER-PATH-3': data.parameterPath3
        },
        cookies: {
            'PARAMETER-COOKIE': data.parameterCookie
        },
        headers: {
            'parameter.header': data.parameterHeader
        },
        query: {
            default: data._default,
            'parameter-query': data.parameterQuery
        },
        body: data.requestBody,
        mediaType: 'application/json'
    });
};

/**
 * @param data The data for the request.
 * @param data.requestBody This is a required parameter
 * @param data.page This is an optional parameter
 * @throws ApiError
 */
export const getCallWithOptionalParam = (data: GetCallWithOptionalParamData): CancelablePromise<void> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/parameters/',
        query: {
            page: data.page
        },
        body: data.requestBody,
        mediaType: 'application/json'
    });
};

/**
 * @param data The data for the request.
 * @param data.parameter This is a required parameter
 * @param data.requestBody This is an optional parameter
 * @returns number Response is a simple number
 * @returns void Success
 * @throws ApiError
 */
export const postCallWithOptionalParam = (data: PostCallWithOptionalParamData): CancelablePromise<PostCallWithOptionalParamResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/parameters/',
        query: {
            parameter: data.parameter
        },
        body: data.requestBody,
        mediaType: 'application/json'
    });
};

/**
 * @param data The data for the request.
 * @param data.parameter This is a reusable parameter
 * @param data.foo A reusable request body
 * @throws ApiError
 */
export const postApiRequestBody = (data: PostApiRequestBodyData = {}): CancelablePromise<void> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/requestBody/',
        query: {
            parameter: data.parameter
        },
        body: data.foo,
        mediaType: 'application/json'
    });
};

/**
 * @param data The data for the request.
 * @param data.parameter This is a reusable parameter
 * @param data.formData A reusable request body
 * @throws ApiError
 */
export const postApiFormData = (data: PostApiFormDataData = {}): CancelablePromise<void> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/formData/',
        query: {
            parameter: data.parameter
        },
        formData: data.formData,
        mediaType: 'multipart/form-data'
    });
};

/**
 * @param data The data for the request.
 * @param data.parameterString This is a simple string with default value
 * @param data.parameterNumber This is a simple number with default value
 * @param data.parameterBoolean This is a simple boolean with default value
 * @param data.parameterEnum This is a simple enum with default value
 * @param data.parameterModel This is a simple model with default value
 * @throws ApiError
 */
export const callWithDefaultParameters = (data: CallWithDefaultParametersData = {}): CancelablePromise<void> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/defaults',
        query: {
            parameterString: data.parameterString,
            parameterNumber: data.parameterNumber,
            parameterBoolean: data.parameterBoolean,
            parameterEnum: data.parameterEnum,
            parameterModel: data.parameterModel
        }
    });
};

/**
 * @param data The data for the request.
 * @param data.parameterString This is a simple string that is optional with default value
 * @param data.parameterNumber This is a simple number that is optional with default value
 * @param data.parameterBoolean This is a simple boolean that is optional with default value
 * @param data.parameterEnum This is a simple enum that is optional with default value
 * @param data.parameterModel This is a simple model that is optional with default value
 * @throws ApiError
 */
export const callWithDefaultOptionalParameters = (data: CallWithDefaultOptionalParametersData = {}): CancelablePromise<void> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/defaults',
        query: {
            parameterString: data.parameterString,
            parameterNumber: data.parameterNumber,
            parameterBoolean: data.parameterBoolean,
            parameterEnum: data.parameterEnum,
            parameterModel: data.parameterModel
        }
    });
};

/**
 * @param data The data for the request.
 * @param data.parameterStringWithNoDefault This is a string with no default
 * @param data.parameterOptionalStringWithDefault This is a optional string with default
 * @param data.parameterOptionalStringWithEmptyDefault This is a optional string with empty default
 * @param data.parameterOptionalStringWithNoDefault This is a optional string with no default
 * @param data.parameterStringWithDefault This is a string with default
 * @param data.parameterStringWithEmptyDefault This is a string with empty default
 * @param data.parameterStringNullableWithNoDefault This is a string that can be null with no default
 * @param data.parameterStringNullableWithDefault This is a string that can be null with default
 * @throws ApiError
 */
export const callToTestOrderOfParams = (data: CallToTestOrderOfParamsData): CancelablePromise<void> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/api/v{api-version}/defaults',
        query: {
            parameterOptionalStringWithDefault: data.parameterOptionalStringWithDefault,
            parameterOptionalStringWithEmptyDefault: data.parameterOptionalStringWithEmptyDefault,
            parameterOptionalStringWithNoDefault: data.parameterOptionalStringWithNoDefault,
            parameterStringWithDefault: data.parameterStringWithDefault,
            parameterStringWithEmptyDefault: data.parameterStringWithEmptyDefault,
            parameterStringWithNoDefault: data.parameterStringWithNoDefault,
            parameterStringNullableWithNoDefault: data.parameterStringNullableWithNoDefault,
            parameterStringNullableWithDefault: data.parameterStringNullableWithDefault
        }
    });
};

/**
 * @throws ApiError
 */
export const duplicateName = (): CancelablePromise<void> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/duplicate'
    });
};

/**
 * @throws ApiError
 */
export const duplicateName1 = (): CancelablePromise<void> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/duplicate'
    });
};

/**
 * @throws ApiError
 */
export const duplicateName2 = (): CancelablePromise<void> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/api/v{api-version}/duplicate'
    });
};

/**
 * @throws ApiError
 */
export const duplicateName3 = (): CancelablePromise<void> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v{api-version}/duplicate'
    });
};

/**
 * @returns void Success
 * @throws ApiError
 */
export const callWithNoContentResponse = (): CancelablePromise<CallWithNoContentResponseResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/no-content'
    });
};

/**
 * @returns number Response is a simple number
 * @returns void Success
 * @throws ApiError
 */
export const callWithResponseAndNoContentResponse = (): CancelablePromise<CallWithResponseAndNoContentResponseResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/multiple-tags/response-and-no-content'
    });
};

/**
 * @returns _400
 * @throws ApiError
 */
export const dummyA = (): CancelablePromise<DummyAResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/multiple-tags/a'
    });
};

/**
 * @returns void Success
 * @throws ApiError
 */
export const dummyB = (): CancelablePromise<DummyBResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/multiple-tags/b'
    });
};

/**
 * @returns import
 * @throws ApiError
 */
export const callWithResponse = (): CancelablePromise<CallWithResponseResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/response'
    });
};

/**
 * @returns unknown Message for 200 response
 * @returns ModelWithString Message for 201 response
 * @returns ModelWithString Message for 202 response
 * @throws ApiError
 */
export const callWithDuplicateResponses = (): CancelablePromise<CallWithDuplicateResponsesResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/response',
        errors: {
            500: 'Message for 500 error',
            501: 'Message for 501 error',
            502: 'Message for 502 error',
            '4XX': 'Message for 4XX errors',
            default: 'Default error response'
        }
    });
};

/**
 * @returns unknown Message for 200 response
 * @returns ModelThatExtends Message for 201 response
 * @returns ModelThatExtendsExtends Message for 202 response
 * @throws ApiError
 */
export const callWithResponses = (): CancelablePromise<CallWithResponsesResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/api/v{api-version}/response',
        errors: {
            500: 'Message for 500 error',
            501: 'Message for 501 error',
            502: 'Message for 502 error',
            default: 'Message for default response'
        }
    });
};

/**
 * @param data The data for the request.
 * @param data.parameterArrayCsv This is an array parameter that is sent as csv format (comma-separated values)
 * @param data.parameterArraySsv This is an array parameter that is sent as ssv format (space-separated values)
 * @param data.parameterArrayTsv This is an array parameter that is sent as tsv format (tab-separated values)
 * @param data.parameterArrayPipes This is an array parameter that is sent as pipes format (pipe-separated values)
 * @param data.parameterArrayMulti This is an array parameter that is sent as multi format (multiple parameter instances)
 * @throws ApiError
 */
export const collectionFormat = (data: CollectionFormatData): CancelablePromise<void> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/collectionFormat',
        query: {
            parameterArrayCSV: data.parameterArrayCsv,
            parameterArraySSV: data.parameterArraySsv,
            parameterArrayTSV: data.parameterArrayTsv,
            parameterArrayPipes: data.parameterArrayPipes,
            parameterArrayMulti: data.parameterArrayMulti
        }
    });
};

/**
 * @param data The data for the request.
 * @param data.parameterArray This is an array parameter
 * @param data.parameterDictionary This is a dictionary parameter
 * @param data.parameterEnum This is an enum parameter
 * @param data.parameterNumber This is a number parameter
 * @param data.parameterString This is a string parameter
 * @param data.parameterBoolean This is a boolean parameter
 * @param data.parameterObject This is an object parameter
 * @param data.id This is a number parameter
 * @returns number Response is a simple number
 * @returns string Response is a simple string
 * @returns boolean Response is a simple boolean
 * @returns unknown Response is a simple object
 * @throws ApiError
 */
export const types = (data: TypesData): CancelablePromise<TypesResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/types',
        path: {
            id: data.id
        },
        query: {
            parameterNumber: data.parameterNumber,
            parameterString: data.parameterString,
            parameterBoolean: data.parameterBoolean,
            parameterObject: data.parameterObject,
            parameterArray: data.parameterArray,
            parameterDictionary: data.parameterDictionary,
            parameterEnum: data.parameterEnum
        }
    });
};

/**
 * @param data The data for the request.
 * @param data.formData
 * @returns boolean
 * @throws ApiError
 */
export const uploadFile = (data: UploadFileData): CancelablePromise<UploadFileResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/upload',
        formData: data.formData,
        mediaType: 'application/x-www-form-urlencoded'
    });
};

/**
 * @param data The data for the request.
 * @param data.id
 * @returns binary Success
 * @throws ApiError
 */
export const fileResponse = (data: FileResponseData): CancelablePromise<FileResponseResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/file/{id}',
        path: {
            id: data.id
        }
    });
};

/**
 * @param data The data for the request.
 * @param data.parameterObject Parameter containing object
 * @param data.parameterReference Parameter containing reference
 * @returns ModelWithString Successful response
 * @throws ApiError
 */
export const complexTypes = (data: ComplexTypesData): CancelablePromise<ComplexTypesResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/complex',
        query: {
            parameterObject: data.parameterObject,
            parameterReference: data.parameterReference
        },
        errors: {
            400: '400 `server` error',
            500: '500 server error'
        }
    });
};

/**
 * @param data The data for the request.
 * @param data.formData
 * @throws ApiError
 */
export const multipartRequest = (data: MultipartRequestData = {}): CancelablePromise<void> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/multipart',
        formData: data.formData,
        mediaType: 'multipart/form-data'
    });
};

/**
 * @returns unknown OK
 * @throws ApiError
 */
export const multipartResponse = (): CancelablePromise<MultipartResponseResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/multipart'
    });
};

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns ModelWithString Success
 * @throws ApiError
 */
export const complexParams = (data: ComplexParamsData): CancelablePromise<ComplexParamsResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/api/v{api-version}/complex/{id}',
        path: {
            id: data.id
        },
        body: data.requestBody,
        mediaType: 'application/json-patch+json'
    });
};

/**
 * @returns string Successful response
 * @throws ApiError
 */
export const callWithResultFromHeader = (): CancelablePromise<CallWithResultFromHeaderResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/header',
        responseHeader: 'operation-location',
        errors: {
            400: '400 server error',
            500: '500 server error'
        }
    });
};

/**
 * @param data The data for the request.
 * @param data.status Status code to return
 * @returns unknown Custom message: Successful response
 * @throws ApiError
 */
export const testErrorCode = (data: TestErrorCodeData): CancelablePromise<TestErrorCodeResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/error',
        query: {
            status: data.status
        },
        errors: {
            500: 'Custom message: Internal Server Error',
            501: 'Custom message: Not Implemented',
            502: 'Custom message: Bad Gateway',
            503: 'Custom message: Service Unavailable'
        }
    });
};

/**
 * @param data The data for the request.
 * @param data.nonAsciiParamæøåÆøÅöôêÊ Dummy input param
 * @returns NonAsciiStringæøåÆØÅöôêÊ字符串 Successful response
 * @throws ApiError
 */
export const nonAsciiæøåÆøÅöôêÊ字符串 = (data: NonAsciiæøåÆøÅöôêÊ字符串Data): CancelablePromise<NonAsciiæøåÆøÅöôêÊ字符串Response> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
        query: {
            'nonAsciiParamæøåÆØÅöôêÊ': data.nonAsciiParamæøåÆøÅöôêÊ
        }
    });
};

/**
 * Login User
 * @param data The data for the request.
 * @param data.formData
 * @throws ApiError
 */
export const putWithFormUrlEncoded = (data: PutWithFormUrlEncodedData): CancelablePromise<void> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
        formData: data.formData,
        mediaType: 'application/x-www-form-urlencoded'
    });
};