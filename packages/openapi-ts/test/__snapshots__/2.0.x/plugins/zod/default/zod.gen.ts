// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zCommentWithBreaks = z.number().int();

export const zCommentWithBackticks = z.number().int();

export const zCommentWithBackticksAndQuotes = z.number().int();

export const zCommentWithSlashes = z.number().int();

export const zCommentWithExpressionPlaceholders = z.number().int();

export const zCommentWithQuotes = z.number().int();

export const zCommentWithReservedCharacters = z.number().int();

export const zSimpleInteger = z.number().int();

export const zSimpleBoolean = z.boolean();

export const zSimpleString = z.string();

export const zNonAsciiStringæøåÆøÅöôêÊ字符串 = z.string();

export const zSimpleFile = z.string();

export const zSimpleReference = z.object({
    prop: z.string().optional()
});

export const zSimpleStringWithPattern = z.string().max(64).regex(/^[a-zA-Z0-9_]*$/);

export const zEnumWithStrings = z.enum([
    'Success',
    'Warning',
    'Error',
    "'Single Quote'",
    '"Double Quotes"',
    'Non-ascii: øæåôöØÆÅÔÖ字符串'
]);

export const zEnumWithNumbers = z.unknown();

export const zEnumFromDescription = z.number();

export const zEnumWithExtensions = z.unknown();

export const zArrayWithNumbers = z.array(z.number().int());

export const zArrayWithBooleans = z.array(z.boolean());

export const zArrayWithStrings = z.array(z.string());

export const zArrayWithReferences = z.array(z.object({
    prop: z.string().optional()
}));

export const zArrayWithArray = z.array(z.array(z.object({
    prop: z.string().optional()
})));

export const zArrayWithProperties = z.array(z.object({
    foo: z.string().optional(),
    bar: z.string().optional()
}));

export const zDictionaryWithString = z.object({});

export const zDictionaryWithReference = z.object({});

export const zDictionaryWithArray = z.object({});

export const zDictionaryWithDictionary = z.object({});

export const zDictionaryWithProperties = z.object({});

export const zDate = z.string();

export const zModelWithInteger = z.object({
    prop: z.number().int().optional()
});

export const zModelWithBoolean = z.object({
    prop: z.boolean().optional()
});

export const zModelWithString = z.object({
    prop: z.string().optional()
});

export const zModelWithStringError = z.object({
    prop: z.string().optional()
});

export const zModelWithNullableString = z.object({
    nullableProp: z.union([
        z.string(),
        z.null()
    ]).optional(),
    nullableRequiredProp: z.union([
        z.string(),
        z.null()
    ])
});

export const zModelWithEnum = z.object({
    test: z.enum([
        'Success',
        'Warning',
        'Error',
        'ØÆÅ字符串'
    ]).optional(),
    statusCode: z.enum([
        '100',
        '200 FOO',
        '300 FOO_BAR',
        '400 foo-bar',
        '500 foo.bar',
        '600 foo&bar'
    ]).optional(),
    bool: z.unknown().optional()
});

export const zModelWithEnumFromDescription = z.object({
    test: z.number().int().optional()
});

export const zModelWithNestedEnums = z.object({
    dictionaryWithEnum: z.object({}).optional(),
    dictionaryWithEnumFromDescription: z.object({}).optional(),
    arrayWithEnum: z.array(z.enum([
        'Success',
        'Warning',
        'Error'
    ])).optional(),
    arrayWithDescription: z.array(z.number().int()).optional()
});

export const zModelWithReference = z.object({
    prop: z.object({
        required: z.string(),
        requiredAndReadOnly: z.string().readonly(),
        string: z.string().optional(),
        number: z.number().optional(),
        boolean: z.boolean().optional(),
        reference: zModelWithString.optional(),
        'property with space': z.string().optional(),
        default: z.string().optional(),
        try: z.string().optional(),
        '@namespace.string': z.string().readonly().optional(),
        '@namespace.integer': z.number().int().readonly().optional()
    }).optional()
});

export const zModelWithArray = z.object({
    prop: z.array(zModelWithString).optional(),
    propWithFile: z.array(z.string()).optional(),
    propWithNumber: z.array(z.number()).optional()
});

export const zModelWithDictionary = z.object({
    prop: z.object({}).optional()
});

export const zModelWithCircularReference: z.ZodTypeAny = z.object({
    prop: z.lazy(() => {
        return zModelWithCircularReference;
    }).optional()
});

export const zModelWithProperties = z.object({
    required: z.string(),
    requiredAndReadOnly: z.string().readonly(),
    string: z.string().optional(),
    number: z.number().optional(),
    boolean: z.boolean().optional(),
    reference: zModelWithString.optional(),
    'property with space': z.string().optional(),
    default: z.string().optional(),
    try: z.string().optional(),
    '@namespace.string': z.string().readonly().optional(),
    '@namespace.integer': z.number().int().readonly().optional()
});

export const zModelWithNestedProperties = z.object({
    first: z.object({
        second: z.object({
            third: z.string().readonly()
        }).readonly()
    }).readonly()
});

export const zModelWithDuplicateProperties = z.object({
    prop: zModelWithString.optional()
});

export const zModelWithOrderedProperties = z.object({
    zebra: z.string().optional(),
    apple: z.string().optional(),
    hawaii: z.string().optional()
});

export const zModelWithDuplicateImports = z.object({
    propA: zModelWithString.optional(),
    propB: zModelWithString.optional(),
    propC: zModelWithString.optional()
});

export const zModelThatExtends = zModelWithString.merge(z.object({
    propExtendsA: z.string().optional(),
    propExtendsB: zModelWithString.optional()
}));

export const zModelThatExtendsExtends = zModelWithString.merge(zModelThatExtends).merge(z.object({
    propExtendsC: z.string().optional(),
    propExtendsD: zModelWithString.optional()
}));

export const zDefault = z.object({
    name: z.string().optional()
});

export const zModelWithPattern = z.object({
    key: z.string().max(64).regex(/^[a-zA-Z0-9_]*$/),
    name: z.string().max(255),
    enabled: z.boolean().readonly().optional(),
    modified: z.string().datetime().readonly().optional(),
    id: z.string().regex(/^\d{2}-\d{3}-\d{4}$/).optional(),
    text: z.string().regex(/^\w+$/).optional(),
    patternWithSingleQuotes: z.string().regex(/^[a-zA-Z0-9']*$/).optional(),
    patternWithNewline: z.string().regex(/aaa\nbbb/).optional(),
    patternWithBacktick: z.string().regex(/aaa`bbb/).optional()
});

export const zParameterActivityParams = z.object({
    description: z.string().optional(),
    graduate_id: z.number().int().optional(),
    organization_id: z.number().int().optional(),
    parent_activity: z.number().int().optional(),
    post_id: z.number().int().optional()
});

export const zResponsePostActivityResponse = z.object({
    description: z.string().optional(),
    graduate_id: z.number().int().optional(),
    organization_id: z.number().int().optional(),
    parent_activity_id: z.number().int().optional(),
    post_id: z.number().int().optional()
});

export const zFailureFailure = z.object({
    error: z.string().optional(),
    message: z.string().optional(),
    reference_code: z.string().optional()
});

export const zCallWithResponseAndNoContentResponseResponse = z.union([
    z.number(),
    z.unknown()
]);

export const zCallWithResponseResponse = zModelWithString;

export const zCallWithDuplicateResponsesResponse = zModelWithString;

export const zCallWithResponsesResponse = z.union([
    z.object({
        '@namespace.string': z.string().readonly().optional(),
        '@namespace.integer': z.number().int().readonly().optional(),
        value: z.array(zModelWithString).readonly().optional()
    }),
    zModelThatExtends,
    zModelThatExtendsExtends
]);

export const zTypesResponse = z.union([
    z.number(),
    z.string(),
    z.boolean(),
    z.object({})
]);

export const zComplexTypesResponse = z.array(zModelWithString);

export const zNonAsciiæøåÆøÅöôêÊ字符串Response = zNonAsciiStringæøåÆøÅöôêÊ字符串;

export const zPostApiVbyApiVersionBodyResponse = zResponsePostActivityResponse;