// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const z400 = z.string();

export const zCamelCaseCommentWithBreaks = z.number().int();

export const zCommentWithBreaks = z.number().int();

export const zCommentWithBackticks = z.number().int();

export const zCommentWithBackticksAndQuotes = z.number().int();

export const zCommentWithSlashes = z.number().int();

export const zCommentWithExpressionPlaceholders = z.number().int();

export const zCommentWithQuotes = z.number().int();

export const zCommentWithReservedCharacters = z.number().int();

export const zSimpleInteger = z.number().int();

export const zSimpleBoolean = z.boolean();

export const zSimpleString = z.string();

export const zNonAsciiStringæøåÆøÅöôêÊ字符串 = z.string();

export const zSimpleFile = z.string();

export const zSimpleReference = z.object({
    prop: z.string().optional()
});

export const zSimpleStringWithPattern = z.union([
    z.string().max(64).regex(/^[a-zA-Z0-9_]*$/),
    z.null()
]);

export const zEnumWithStrings = z.enum([
    'Success',
    'Warning',
    'Error',
    "'Single Quote'",
    '"Double Quotes"',
    'Non-ascii: øæåôöØÆÅÔÖ字符串'
]);

export const zEnumWithReplacedCharacters = z.enum([
    "'Single Quote'",
    '"Double Quotes"',
    'øæåôöØÆÅÔÖ字符串',
    ''
]);

export const zEnumWithNumbers = z.unknown();

export const zEnumFromDescription = z.number();

export const zEnumWithExtensions = z.unknown();

export const zEnumWithXEnumNames = z.unknown();

export const zArrayWithNumbers = z.array(z.number().int());

export const zArrayWithBooleans = z.array(z.boolean());

export const zArrayWithStrings = z.array(z.string()).default(['test']);

export const zArrayWithReferences = z.array(z.object({
    prop: z.string().optional()
}));

export const zArrayWithArray = z.array(z.array(z.object({
    prop: z.string().optional()
})));

export const zArrayWithProperties = z.array(z.object({
    '16x16': zCamelCaseCommentWithBreaks.optional(),
    bar: z.string().optional()
}));

export const zArrayWithAnyOfProperties = z.array(z.unknown());

export const zAnyOfAnyAndNull = z.object({
    data: z.unknown().optional()
});

export const zAnyOfArrays = z.object({
    results: z.array(z.unknown()).optional()
});

export const zDictionaryWithString = z.object({});

export const zDictionaryWithPropertiesAndAdditionalProperties = z.object({
    foo: z.number().optional(),
    bar: z.boolean().optional()
});

export const zDictionaryWithReference = z.object({});

export const zDictionaryWithArray = z.object({});

export const zDictionaryWithDictionary = z.object({});

export const zDictionaryWithProperties = z.object({});

export const zModelWithInteger = z.object({
    prop: z.number().int().optional()
});

export const zModelWithBoolean = z.object({
    prop: z.boolean().optional()
});

export const zModelWithString = z.object({
    prop: z.string().optional()
});

export const zModelWithStringError = z.object({
    prop: z.string().optional()
});

export const zModelFromZendesk = z.string();

export const zModelWithNullableString = z.object({
    nullableProp1: z.union([
        z.string(),
        z.null()
    ]).optional(),
    nullableRequiredProp1: z.union([
        z.string(),
        z.null()
    ]),
    nullableProp2: z.union([
        z.string(),
        z.null()
    ]).optional(),
    nullableRequiredProp2: z.union([
        z.string(),
        z.null()
    ]),
    'foo_bar-enum': z.enum([
        'Success',
        'Warning',
        'Error',
        'ØÆÅ字符串'
    ]).optional()
});

export const zModelWithEnum = z.object({
    'foo_bar-enum': z.enum([
        'Success',
        'Warning',
        'Error',
        'ØÆÅ字符串'
    ]).optional(),
    statusCode: z.enum([
        '100',
        '200 FOO',
        '300 FOO_BAR',
        '400 foo-bar',
        '500 foo.bar',
        '600 foo&bar'
    ]).optional(),
    bool: z.unknown().optional()
});

export const zModelWithEnumWithHyphen = z.object({
    'foo-bar-baz-qux': z.enum([
        '3.0'
    ]).optional()
});

export const zModelWithEnumFromDescription = z.object({
    test: z.number().int().optional()
});

export const zModelWithNestedEnums = z.object({
    dictionaryWithEnum: z.object({}).optional(),
    dictionaryWithEnumFromDescription: z.object({}).optional(),
    arrayWithEnum: z.array(z.enum([
        'Success',
        'Warning',
        'Error'
    ])).optional(),
    arrayWithDescription: z.array(z.number().int()).optional(),
    'foo_bar-enum': z.enum([
        'Success',
        'Warning',
        'Error',
        'ØÆÅ字符串'
    ]).optional()
});

export const zModelWithReference = z.object({
    prop: z.object({
        required: z.string(),
        requiredAndReadOnly: z.string().readonly(),
        requiredAndNullable: z.union([
            z.string(),
            z.null()
        ]),
        string: z.string().optional(),
        number: z.number().optional(),
        boolean: z.boolean().optional(),
        reference: zModelWithString.optional(),
        'property with space': z.string().optional(),
        default: z.string().optional(),
        try: z.string().optional(),
        '@namespace.string': z.string().readonly().optional(),
        '@namespace.integer': z.number().int().readonly().optional()
    }).optional()
});

export const zModelWithArrayReadOnlyAndWriteOnly = z.object({
    prop: z.array(z.object({
        foo: z.string(),
        bar: z.string().readonly(),
        baz: z.string()
    })).optional(),
    propWithFile: z.array(z.string()).optional(),
    propWithNumber: z.array(z.number()).optional()
});

export const zModelWithArray = z.object({
    prop: z.array(zModelWithString).optional(),
    propWithFile: z.array(z.string()).optional(),
    propWithNumber: z.array(z.number()).optional()
});

export const zModelWithDictionary = z.object({
    prop: z.object({}).optional()
});

export const zDeprecatedModel = z.object({
    prop: z.string().optional()
});

export const zModelWithCircularReference: z.ZodTypeAny = z.object({
    prop: z.lazy(() => {
        return zModelWithCircularReference;
    }).optional()
});

export const zCompositionWithOneOf = z.object({
    propA: z.union([
        zModelWithString,
        zModelWithEnum,
        zModelWithArray,
        zModelWithDictionary
    ]).optional()
});

export const zCompositionWithOneOfAnonymous = z.object({
    propA: z.union([
        z.object({
            propA: z.string().optional()
        }),
        z.string(),
        z.number().int()
    ]).optional()
});

export const zModelCircle = z.object({
    kind: z.string(),
    radius: z.number().optional()
});

export const zModelSquare = z.object({
    kind: z.string(),
    sideLength: z.number().optional()
});

export const zCompositionWithOneOfDiscriminator = z.union([
    z.object({
        kind: z.literal('circle').optional()
    }).merge(zModelCircle),
    z.object({
        kind: z.literal('square').optional()
    }).merge(zModelSquare)
]);

export const zCompositionWithAnyOf = z.object({
    propA: z.union([
        zModelWithString,
        zModelWithEnum,
        zModelWithArray,
        zModelWithDictionary
    ]).optional()
});

export const zCompositionWithAnyOfAnonymous = z.object({
    propA: z.union([
        z.object({
            propA: z.string().optional()
        }),
        z.string(),
        z.number().int()
    ]).optional()
});

export const zCompositionWithNestedAnyAndTypeNull = z.object({
    propA: z.union([
        z.array(z.union([
            zModelWithDictionary,
            z.null()
        ])),
        z.array(z.union([
            zModelWithArray,
            z.null()
        ]))
    ]).optional()
});

export const z3eNum1Период = z.enum([
    'Bird',
    'Dog'
]);

export const zConstValue = z.enum([
    'ConstValue'
]);

export const zCompositionWithNestedAnyOfAndNull = z.object({
    propA: z.union([
        z.array(z.unknown()),
        z.null()
    ]).optional()
});

export const zCompositionWithOneOfAndNullable = z.object({
    propA: z.union([
        z.object({
            boolean: z.boolean().optional()
        }),
        zModelWithEnum,
        zModelWithArray,
        zModelWithDictionary,
        z.null()
    ]).optional()
});

export const zCompositionWithOneOfAndSimpleDictionary = z.object({
    propA: z.union([
        z.boolean(),
        z.object({})
    ]).optional()
});

export const zCompositionWithOneOfAndSimpleArrayDictionary = z.object({
    propA: z.union([
        z.boolean(),
        z.object({})
    ]).optional()
});

export const zCompositionWithOneOfAndComplexArrayDictionary = z.object({
    propA: z.union([
        z.boolean(),
        z.object({})
    ]).optional()
});

export const zCompositionWithAllOfAndNullable = z.object({
    propA: z.union([
        z.object({
            boolean: z.boolean().optional()
        }).merge(zModelWithEnum).merge(zModelWithArray).merge(zModelWithDictionary),
        z.null()
    ]).optional()
});

export const zCompositionWithAnyOfAndNullable = z.object({
    propA: z.union([
        z.object({
            boolean: z.boolean().optional()
        }),
        zModelWithEnum,
        zModelWithArray,
        zModelWithDictionary,
        z.null()
    ]).optional()
});

export const zCompositionBaseModel = z.object({
    firstName: z.string().optional(),
    lastname: z.string().optional()
});

export const zCompositionExtendedModel = zCompositionBaseModel.merge(z.object({
    age: z.number(),
    firstName: z.string(),
    lastname: z.string()
}));

export const zModelWithProperties = z.object({
    required: z.string(),
    requiredAndReadOnly: z.string().readonly(),
    requiredAndNullable: z.union([
        z.string(),
        z.null()
    ]),
    string: z.string().optional(),
    number: z.number().optional(),
    boolean: z.boolean().optional(),
    reference: zModelWithString.optional(),
    'property with space': z.string().optional(),
    default: z.string().optional(),
    try: z.string().optional(),
    '@namespace.string': z.string().readonly().optional(),
    '@namespace.integer': z.number().int().readonly().optional()
});

export const zModelWithNestedProperties = z.object({
    first: z.union([
        z.object({
            second: z.union([
                z.object({
                    third: z.union([
                        z.string().readonly(),
                        z.null()
                    ]).readonly()
                }).readonly(),
                z.null()
            ]).readonly()
        }).readonly(),
        z.null()
    ]).readonly()
});

export const zModelWithDuplicateProperties = z.object({
    prop: zModelWithString.optional()
});

export const zModelWithOrderedProperties = z.object({
    zebra: z.string().optional(),
    apple: z.string().optional(),
    hawaii: z.string().optional()
});

export const zModelWithDuplicateImports = z.object({
    propA: zModelWithString.optional(),
    propB: zModelWithString.optional(),
    propC: zModelWithString.optional()
});

export const zModelThatExtends = zModelWithString.merge(z.object({
    propExtendsA: z.string().optional(),
    propExtendsB: zModelWithString.optional()
}));

export const zModelThatExtendsExtends = zModelWithString.merge(zModelThatExtends).merge(z.object({
    propExtendsC: z.string().optional(),
    propExtendsD: zModelWithString.optional()
}));

export const zModelWithPattern = z.object({
    key: z.string().max(64).regex(/^[a-zA-Z0-9_]*$/),
    name: z.string().max(255),
    enabled: z.boolean().readonly().optional(),
    modified: z.string().datetime().readonly().optional(),
    id: z.string().regex(/^\d{2}-\d{3}-\d{4}$/).optional(),
    text: z.string().regex(/^\w+$/).optional(),
    patternWithSingleQuotes: z.string().regex(/^[a-zA-Z0-9']*$/).optional(),
    patternWithNewline: z.string().regex(/aaa\nbbb/).optional(),
    patternWithBacktick: z.string().regex(/aaa`bbb/).optional()
});

export const zFile = z.object({
    id: z.string().min(1).readonly().optional(),
    updated_at: z.string().datetime().readonly().optional(),
    created_at: z.string().datetime().readonly().optional(),
    mime: z.string().min(1).max(24),
    file: z.string().url().readonly().optional()
});

export const zDefault = z.object({
    name: z.string().optional()
});

export const zPageable = z.object({
    page: z.number().int().gte(0).optional().default(0),
    size: z.number().int().gte(1).optional(),
    sort: z.array(z.string()).optional()
});

export const zFreeFormObjectWithoutAdditionalProperties = z.object({});

export const zFreeFormObjectWithAdditionalPropertiesEqTrue = z.object({});

export const zFreeFormObjectWithAdditionalPropertiesEqEmptyObject = z.object({});

export const zModelWithConst = z.object({
    String: z.enum([
        'String'
    ]).optional(),
    number: z.unknown().optional(),
    null: z.unknown().optional(),
    withType: z.enum([
        'Some string'
    ]).optional()
});

export const zModelWithAdditionalPropertiesEqTrue = z.object({
    prop: z.string().optional()
});

export const zNestedAnyOfArraysNullable = z.object({
    nullableArray: z.union([
        z.array(z.unknown()),
        z.null()
    ]).optional()
});

export const zCompositionWithOneOfAndProperties = z.intersection(z.union([
    z.object({
        foo: z.unknown()
    }),
    z.object({
        bar: zNonAsciiStringæøåÆøÅöôêÊ字符串
    })
]), z.object({
    baz: z.union([
        z.number().int().gte(0),
        z.null()
    ]),
    qux: z.number().int().gte(0)
}));

export const zNullableObject = z.union([
    z.object({
        foo: z.string().optional()
    }),
    z.null()
]).default(null);

export const zCharactersInDescription = z.string();

export const zModelWithNullableObject = z.object({
    data: zNullableObject.optional()
});

export const zModelWithOneOfEnum = z.union([
    z.object({
        foo: z.enum([
            'Bar'
        ])
    }),
    z.object({
        foo: z.enum([
            'Baz'
        ])
    }),
    z.object({
        foo: z.enum([
            'Qux'
        ])
    }),
    z.object({
        content: z.string().datetime(),
        foo: z.enum([
            'Quux'
        ])
    }),
    z.object({
        content: z.unknown(),
        foo: z.enum([
            'Corge'
        ])
    })
]);

export const zModelWithNestedArrayEnumsDataFoo = z.enum([
    'foo',
    'bar'
]);

export const zModelWithNestedArrayEnumsDataBar = z.enum([
    'baz',
    'qux'
]);

export const zModelWithNestedArrayEnumsData = z.object({
    foo: z.array(zModelWithNestedArrayEnumsDataFoo).optional(),
    bar: z.array(zModelWithNestedArrayEnumsDataBar).optional()
});

export const zModelWithNestedArrayEnums = z.object({
    array_strings: z.array(z.string()).optional(),
    data: zModelWithNestedArrayEnumsData.optional()
});

export const zModelWithNestedCompositionEnums = z.object({
    foo: zModelWithNestedArrayEnumsDataFoo.optional()
});

export const zModelWithReadOnlyAndWriteOnly = z.object({
    foo: z.string(),
    bar: z.string().readonly(),
    baz: z.string()
});

export const zModelWithConstantSizeArray = z.unknown();

export const zModelWithAnyOfConstantSizeArray = z.unknown();

export const zModelWithPrefixItemsConstantSizeArray = z.array(z.unknown());

export const zModelWithAnyOfConstantSizeArrayNullable = z.unknown();

export const zModelWithAnyOfConstantSizeArrayWithNSizeAndOptions = z.unknown();

export const zModelWithAnyOfConstantSizeArrayAndIntersect = z.unknown();

export const zModelWithNumericEnumUnion = z.object({
    value: z.unknown().optional()
});

export const zModelWithBackticksInDescription = z.object({
    template: z.string().optional()
});

export const zModelWithOneOfAndProperties = z.intersection(z.union([
    z.unknown(),
    zNonAsciiStringæøåÆøÅöôêÊ字符串
]), z.object({
    baz: z.union([
        z.number().int().gte(0),
        z.null()
    ]),
    qux: z.number().int().gte(0)
}));

export const zParameterSimpleParameterUnused = z.string();

export const zPostServiceWithEmptyTagResponse = z.string();

export const zPostServiceWithEmptyTagResponse2 = z.string();

export const zDeleteFooData = z.string();

export const zDeleteFooData2 = z.string();

export const zImport = z.string();

export const zSchemaWithFormRestrictedKeys = z.object({
    description: z.string().optional(),
    'x-enum-descriptions': z.string().optional(),
    'x-enum-varnames': z.string().optional(),
    'x-enumNames': z.string().optional(),
    title: z.string().optional(),
    object: z.object({
        description: z.string().optional(),
        'x-enum-descriptions': z.string().optional(),
        'x-enum-varnames': z.string().optional(),
        'x-enumNames': z.string().optional(),
        title: z.string().optional()
    }).optional(),
    array: z.array(z.object({
        description: z.string().optional(),
        'x-enum-descriptions': z.string().optional(),
        'x-enum-varnames': z.string().optional(),
        'x-enumNames': z.string().optional(),
        title: z.string().optional()
    })).optional()
});

export const zIoK8sApimachineryPkgApisMetaV1DeleteOptions = z.object({
    preconditions: z.object({
        resourceVersion: z.string().optional(),
        uid: z.string().optional()
    }).optional()
});

export const zIoK8sApimachineryPkgApisMetaV1Preconditions = z.object({
    resourceVersion: z.string().optional(),
    uid: z.string().optional()
});

export const zAdditionalPropertiesUnknownIssue = z.object({});

export const zAdditionalPropertiesUnknownIssue2 = z.object({});

export const zAdditionalPropertiesUnknownIssue3 = z.intersection(z.string(), z.object({
    entries: z.object({})
}));

export const zAdditionalPropertiesIntegerIssue = z.object({
    value: z.number().int()
});

export const zOneOfAllOfIssue = z.union([
    z.intersection(z.union([
        zConstValue,
        z.object({
            item: z.boolean().optional(),
            error: z.union([
                z.string(),
                z.null()
            ]).optional(),
            hasError: z.boolean().readonly().optional(),
            data: z.object({}).optional()
        })
    ]), z3eNum1Период),
    z.object({
        item: z.union([
            z.string(),
            z.null()
        ]).optional(),
        error: z.union([
            z.string(),
            z.null()
        ]).optional(),
        hasError: z.boolean().readonly().optional()
    })
]);

export const zGenericSchemaDuplicateIssue1SystemBoolean = z.object({
    item: z.boolean().optional(),
    error: z.union([
        z.string(),
        z.null()
    ]).optional(),
    hasError: z.boolean().readonly().optional(),
    data: z.object({}).optional()
});

export const zGenericSchemaDuplicateIssue1SystemString = z.object({
    item: z.union([
        z.string(),
        z.null()
    ]).optional(),
    error: z.union([
        z.string(),
        z.null()
    ]).optional(),
    hasError: z.boolean().readonly().optional()
});

export const zImportResponse = z.union([
    zModelFromZendesk,
    zModelWithReadOnlyAndWriteOnly
]);

export const zApiVVersionODataControllerCountResponse = zModelFromZendesk;

export const zGetApiVbyApiVersionSimpleOperationResponse = z.number();

export const zPostCallWithOptionalParamResponse = z.union([
    z.number(),
    z.void()
]);

export const zCallWithNoContentResponseResponse = z.void();

export const zCallWithResponseAndNoContentResponseResponse = z.union([
    z.number(),
    z.void()
]);

export const zDummyAResponse = z400;

export const zDummyBResponse = z.void();

export const zCallWithResponseResponse = zImport;

export const zCallWithDuplicateResponsesResponse = z.union([
    zModelWithBoolean.merge(zModelWithInteger),
    zModelWithString
]);

export const zCallWithResponsesResponse = z.union([
    z.object({
        '@namespace.string': z.string().readonly().optional(),
        '@namespace.integer': z.number().int().readonly().optional(),
        value: z.array(zModelWithString).readonly().optional()
    }),
    zModelThatExtends,
    zModelThatExtendsExtends
]);

export const zTypesResponse = z.union([
    z.number(),
    z.string(),
    z.boolean(),
    z.object({})
]);

export const zUploadFileResponse = z.boolean();

export const zFileResponseResponse = z.string();

export const zComplexTypesResponse = z.array(zModelWithString);

export const zMultipartResponseResponse = z.object({
    file: z.string().optional(),
    metadata: z.object({
        foo: z.string().optional(),
        bar: z.string().optional()
    }).optional()
});

export const zComplexParamsResponse = zModelWithString;

export const zNonAsciiæøåÆøÅöôêÊ字符串Response = z.array(zNonAsciiStringæøåÆøÅöôêÊ字符串);