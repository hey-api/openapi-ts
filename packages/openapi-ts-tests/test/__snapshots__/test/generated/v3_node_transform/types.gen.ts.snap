// This file is auto-generated by @hey-api/openapi-ts

/**
 * This is a model that contains a some dates
 */
export type ModelWithDates = {
    id: number;
    name: string;
    readonly enabled: boolean;
    readonly modified: Date;
    readonly expires?: Date;
};

/**
 * This is a model that contains a some dates and arrays
 */
export type ParentModelWithDates = {
    id: number;
    readonly modified?: Date;
    items?: Array<ModelWithDates>;
    item?: ModelWithDates;
    'nullable-date'?: Array<(Date | null)>;
    simpleItems?: Array<SimpleModel>;
    simpleItem?: SimpleModel;
    dates?: Array<(Date)>;
    strings?: Array<(string)>;
};

/**
 * This is a model that contains a some dates
 */
export type SimpleModel = {
    id: number;
    name: string;
    readonly enabled: boolean;
};

export type ParentModelWithDatesResponse = (ParentModelWithDates | unknown);

export type ModelWithDatesResponse = (ModelWithDates);

export type ModelWithDatesArrayResponse = (Array<ModelWithDates>);

export type ArrayOfDatesResponse = (Array<(Date)>);

export type DateResponse = (Date);

export type MultipleResponsesResponse = (Array<ModelWithDates> | Array<SimpleModel>);

export type ParentModelWithDatesResponseTransformer = (data: any) => Promise<ParentModelWithDatesResponse>;

export type ParentModelWithDatesModelResponseTransformer = (data: any) => ParentModelWithDates;

export type ModelWithDatesModelResponseTransformer = (data: any) => ModelWithDates;

export const ModelWithDatesModelResponseTransformer: ModelWithDatesModelResponseTransformer = data => {
    if (data?.modified) {
        data.modified = new Date(data.modified);
    }
    if (data?.expires) {
        data.expires = new Date(data.expires);
    }
    return data;
};

export const ParentModelWithDatesModelResponseTransformer: ParentModelWithDatesModelResponseTransformer = data => {
    if (data?.modified) {
        data.modified = new Date(data.modified);
    }
    if (Array.isArray(data?.items)) {
        data.items.forEach(ModelWithDatesModelResponseTransformer);
    }
    if (data?.item) {
        ModelWithDatesModelResponseTransformer(data.item);
    }
    if (Array.isArray(data?.['nullable-date'])) {
        data['nullable-date'] = data['nullable-date'].map(item => item ? new Date(item) : item);
    }
    if (Array.isArray(data?.dates)) {
        data.dates = data.dates.map(item => item ? new Date(item) : item);
    }
    return data;
};

export const ParentModelWithDatesResponseTransformer: ParentModelWithDatesResponseTransformer = async (data) => {
    if (data) {
        ParentModelWithDatesModelResponseTransformer(data);
    }
    return data;
};

export type ModelWithDatesResponseTransformer = (data: any) => Promise<ModelWithDatesResponse>;

export const ModelWithDatesResponseTransformer: ModelWithDatesResponseTransformer = async (data) => {
    ModelWithDatesModelResponseTransformer(data);
    return data;
};

export type ModelWithDatesArrayResponseTransformer = (data: any) => Promise<ModelWithDatesArrayResponse>;

export const ModelWithDatesArrayResponseTransformer: ModelWithDatesArrayResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(ModelWithDatesModelResponseTransformer);
    }
    return data;
};