// This file is auto-generated by @hey-api/openapi-ts

/**
 * Model with number-only name
 */
export type _400 = string;

/**
 * Testing multiline comments in string: First line
 * Second line
 *
 * Fourth line
 */
export type CamelCaseCommentWithBreaks = number;

/**
 * Testing multiline comments in string: First line
 * Second line
 *
 * Fourth line
 */
export type CommentWithBreaks = number;

/**
 * Testing backticks in string: `backticks` and ```multiple backticks``` should work
 */
export type CommentWithBackticks = number;

/**
 * Testing backticks and quotes in string: `backticks`, 'quotes', "double quotes" and ```multiple backticks``` should work
 */
export type CommentWithBackticksAndQuotes = number;

/**
 * Testing slashes in string: \backwards\\\ and /forwards/// should work
 */
export type CommentWithSlashes = number;

/**
 * Testing expression placeholders in string: ${expression} should work
 */
export type CommentWithExpressionPlaceholders = number;

/**
 * Testing quotes in string: 'single quote''' and "double quotes""" should work
 */
export type CommentWithQuotes = number;

/**
 * Testing reserved characters in string: * inline * and ** inline ** should work
 */
export type CommentWithReservedCharacters = number;

/**
 * This is a simple number
 */
export type SimpleInteger = number;

/**
 * This is a simple boolean
 */
export type SimpleBoolean = boolean;

/**
 * This is a simple string
 */
export type SimpleString = string;

/**
 * A string with non-ascii (unicode) characters valid in typescript identifiers (æøåÆØÅöÔèÈ字符串)
 */
export type NonAsciiStringæøåÆøÅöôêÊ字符串 = string;

/**
 * This is a simple file
 */
export type SimpleFile = unknown;

/**
 * This is a simple reference
 */
export type SimpleReference = ModelWithString;

/**
 * This is a simple string
 */
export type SimpleStringWithPattern = string;

/**
 * This is a simple enum with strings
 */
export type EnumWithStrings = 'Success' | 'Warning' | 'Error' | "'Single Quote'" | '"Double Quotes"' | 'Non-ascii: øæåôöØÆÅÔÖ字符串';

export type EnumWithReplacedCharacters = "'Single Quote'" | '"Double Quotes"' | 'øæåôöØÆÅÔÖ字符串' | 3.1 | '';

/**
 * This is a simple enum with numbers
 */
export type EnumWithNumbers = 1 | 2 | 3 | 1.1 | 1.2 | 1.3 | 100 | 200 | 300 | -100 | -200 | -300 | -1.1 | -1.2 | -1.3;

/**
 * Success=1,Warning=2,Error=3
 */
export type EnumFromDescription = number;

/**
 * This is a simple enum with numbers
 */
export type EnumWithExtensions = 200 | 400 | 500;

export type EnumWithXEnumNames = 0 | 1 | 2;

/**
 * This is a simple array with numbers
 */
export type ArrayWithNumbers = Array<number>;

/**
 * This is a simple array with booleans
 */
export type ArrayWithBooleans = Array<boolean>;

/**
 * This is a simple array with strings
 */
export type ArrayWithStrings = Array<string>;

/**
 * This is a simple array with references
 */
export type ArrayWithReferences = Array<ModelWithString>;

/**
 * This is a simple array containing an array
 */
export type ArrayWithArray = Array<Array<ModelWithString>>;

/**
 * This is a simple array with properties
 */
export type ArrayWithProperties = Array<{
    '16x16'?: CamelCaseCommentWithBreaks;
    bar?: string;
}>;

/**
 * This is a simple array with any of properties
 */
export type ArrayWithAnyOfProperties = Array<{
    foo?: string;
} | {
    bar?: string;
}>;

export type AnyOfAnyAndNull = {
    data?: unknown | null;
};

/**
 * This is a simple array with any of properties
 */
export type AnyOfArrays = {
    results?: Array<{
        foo?: string;
    } | {
        bar?: string;
    }>;
};

/**
 * This is a string dictionary
 */
export type DictionaryWithString = {
    [key: string]: string;
};

export type DictionaryWithPropertiesAndAdditionalProperties = {
    foo?: number;
    bar?: boolean;
    [key: string]: string | number | boolean | undefined;
};

/**
 * This is a string reference
 */
export type DictionaryWithReference = {
    [key: string]: ModelWithString;
};

/**
 * This is a complex dictionary
 */
export type DictionaryWithArray = {
    [key: string]: Array<ModelWithString>;
};

/**
 * This is a string dictionary
 */
export type DictionaryWithDictionary = {
    [key: string]: {
        [key: string]: string;
    };
};

/**
 * This is a complex dictionary
 */
export type DictionaryWithProperties = {
    [key: string]: {
        foo?: string;
        bar?: string;
    };
};

/**
 * This is a model with one number property
 */
export type ModelWithInteger = {
    /**
     * This is a simple number property
     */
    prop?: number;
};

/**
 * This is a model with one boolean property
 */
export type ModelWithBoolean = {
    /**
     * This is a simple boolean property
     */
    prop?: boolean;
};

/**
 * This is a model with one string property
 */
export type ModelWithString = {
    /**
     * This is a simple string property
     */
    prop?: string;
};

/**
 * This is a model with one string property
 */
export type ModelWithStringError = {
    /**
     * This is a simple string property
     */
    prop?: string;
};

/**
 * `Comment` or `VoiceComment`. The JSON object for adding voice comments to tickets is different. See [Adding voice comments to tickets](/documentation/ticketing/managing-tickets/adding-voice-comments-to-tickets)
 */
export type ModelFromZendesk = string;

/**
 * This is a model with one string property
 */
export type ModelWithNullableString = {
    /**
     * This is a simple string property
     */
    nullableProp1?: string;
    /**
     * This is a simple string property
     */
    nullableRequiredProp1: string;
    /**
     * This is a simple string property
     */
    nullableProp2?: string | null;
    /**
     * This is a simple string property
     */
    nullableRequiredProp2: string | null;
    /**
     * This is a simple enum with strings
     */
    'foo_bar-enum'?: 'Success' | 'Warning' | 'Error' | 'ØÆÅ字符串';
};

/**
 * This is a model with one enum
 */
export type ModelWithEnum = {
    /**
     * This is a simple enum with strings
     */
    'foo_bar-enum'?: 'Success' | 'Warning' | 'Error' | 'ØÆÅ字符串';
    /**
     * These are the HTTP error code enums
     */
    statusCode?: '100' | '200 FOO' | '300 FOO_BAR' | '400 foo-bar' | '500 foo.bar' | '600 foo&bar';
    /**
     * Simple boolean enum
     */
    bool?: true;
};

/**
 * This is a model with one enum with escaped name
 */
export type ModelWithEnumWithHyphen = {
    'foo-bar-baz-qux'?: '3.0';
};

/**
 * This is a model with one enum
 */
export type ModelWithEnumFromDescription = {
    /**
     * Success=1,Warning=2,Error=3
     */
    test?: number;
};

/**
 * This is a model with nested enums
 */
export type ModelWithNestedEnums = {
    dictionaryWithEnum?: {
        [key: string]: 'Success' | 'Warning' | 'Error';
    };
    dictionaryWithEnumFromDescription?: {
        [key: string]: number;
    };
    arrayWithEnum?: Array<'Success' | 'Warning' | 'Error'>;
    arrayWithDescription?: Array<number>;
    /**
     * This is a simple enum with strings
     */
    'foo_bar-enum'?: 'Success' | 'Warning' | 'Error' | 'ØÆÅ字符串';
};

/**
 * This is a model with one property containing a reference
 */
export type ModelWithReference = {
    prop?: ModelWithProperties;
};

/**
 * This is a model with one property containing an array
 */
export type ModelWithArrayReadOnlyAndWriteOnly = {
    prop?: Array<ModelWithReadOnlyAndWriteOnly>;
    propWithFile?: Array<unknown>;
    propWithNumber?: Array<number>;
};

/**
 * This is a model with one property containing an array
 */
export type ModelWithArray = {
    prop?: Array<ModelWithString>;
    propWithFile?: Array<unknown>;
    propWithNumber?: Array<number>;
};

/**
 * This is a model with one property containing a dictionary
 */
export type ModelWithDictionary = {
    prop?: {
        [key: string]: string;
    };
};

/**
 * This is a deprecated model with a deprecated property
 * @deprecated
 */
export type DeprecatedModel = {
    /**
     * This is a deprecated property
     * @deprecated
     */
    prop?: string;
};

/**
 * This is a model with one property containing a circular reference
 */
export type ModelWithCircularReference = {
    prop?: ModelWithCircularReference;
};

/**
 * This is a model with one property with a 'one of' relationship
 */
export type CompositionWithOneOf = {
    propA?: ModelWithString | ModelWithEnum | ModelWithArray | ModelWithDictionary;
};

/**
 * This is a model with one property with a 'one of' relationship where the options are not $ref
 */
export type CompositionWithOneOfAnonymous = {
    propA?: {
        propA?: string;
    } | string | number;
};

/**
 * Circle
 */
export type ModelCircle = {
    kind: string;
    radius?: number;
};

/**
 * Square
 */
export type ModelSquare = {
    kind: string;
    sideLength?: number;
};

/**
 * This is a model with one property with a 'one of' relationship where the options are not $ref
 */
export type CompositionWithOneOfDiscriminator = ({
    kind?: 'circle';
} & ModelCircle) | ({
    kind?: 'square';
} & ModelSquare);

/**
 * This is a model with one property with a 'any of' relationship
 */
export type CompositionWithAnyOf = {
    propA?: ModelWithString | ModelWithEnum | ModelWithArray | ModelWithDictionary;
};

/**
 * This is a model with one property with a 'any of' relationship where the options are not $ref
 */
export type CompositionWithAnyOfAnonymous = {
    propA?: {
        propA?: string;
    } | string | number;
};

/**
 * This is a model with nested 'any of' property with a type null
 */
export type CompositionWithNestedAnyAndTypeNull = {
    propA?: Array<ModelWithDictionary | null> | Array<ModelWithArray | null>;
};

export type _3eNum1Период = 'Bird' | 'Dog';

export type ConstValue = 'ConstValue';

/**
 * This is a model with one property with a 'any of' relationship where the options are not $ref
 */
export type CompositionWithNestedAnyOfAndNull = {
    propA?: Array<_3eNum1Период | ConstValue> | null;
};

/**
 * This is a model with one property with a 'one of' relationship
 */
export type CompositionWithOneOfAndNullable = {
    propA?: {
        boolean?: boolean;
    } | ModelWithEnum | ModelWithArray | ModelWithDictionary;
};

/**
 * This is a model that contains a simple dictionary within composition
 */
export type CompositionWithOneOfAndSimpleDictionary = {
    propA?: boolean | {
        [key: string]: number;
    };
};

/**
 * This is a model that contains a dictionary of simple arrays within composition
 */
export type CompositionWithOneOfAndSimpleArrayDictionary = {
    propA?: boolean | {
        [key: string]: Array<boolean>;
    };
};

/**
 * This is a model that contains a dictionary of complex arrays (composited) within composition
 */
export type CompositionWithOneOfAndComplexArrayDictionary = {
    propA?: boolean | {
        [key: string]: Array<number | string>;
    };
};

/**
 * This is a model with one property with a 'all of' relationship
 */
export type CompositionWithAllOfAndNullable = {
    propA?: {
        boolean?: boolean;
    } & ModelWithEnum & ModelWithArray & ModelWithDictionary;
};

/**
 * This is a model with one property with a 'any of' relationship
 */
export type CompositionWithAnyOfAndNullable = {
    propA?: {
        boolean?: boolean;
    } | ModelWithEnum | ModelWithArray | ModelWithDictionary;
};

/**
 * This is a base model with two simple optional properties
 */
export type CompositionBaseModel = {
    firstName?: string;
    lastname?: string;
};

/**
 * This is a model that extends the base model
 */
export type CompositionExtendedModel = CompositionBaseModel & {
    age: number;
    firstName: string;
    lastname: string;
};

/**
 * This is a model with one nested property
 */
export type ModelWithProperties = {
    required: string;
    readonly requiredAndReadOnly: string;
    requiredAndNullable: string;
    string?: string;
    number?: number;
    boolean?: boolean;
    reference?: ModelWithString;
    'property with space'?: string;
    default?: string;
    try?: string;
    readonly '@namespace.string'?: string;
    readonly '@namespace.integer'?: number;
};

/**
 * This is a model with one nested property
 */
export type ModelWithNestedProperties = {
    readonly first: {
        readonly second: {
            readonly third: string;
        };
    };
};

/**
 * This is a model with duplicated properties
 */
export type ModelWithDuplicateProperties = {
    prop?: ModelWithString;
};

/**
 * This is a model with ordered properties
 */
export type ModelWithOrderedProperties = {
    zebra?: string;
    apple?: string;
    hawaii?: string;
};

/**
 * This is a model with duplicated imports
 */
export type ModelWithDuplicateImports = {
    propA?: ModelWithString;
    propB?: ModelWithString;
    propC?: ModelWithString;
};

/**
 * This is a model that extends another model
 */
export type ModelThatExtends = ModelWithString & {
    propExtendsA?: string;
    propExtendsB?: ModelWithString;
};

/**
 * This is a model that extends another model
 */
export type ModelThatExtendsExtends = ModelWithString & ModelThatExtends & {
    propExtendsC?: string;
    propExtendsD?: ModelWithString;
};

/**
 * This is a model that contains a some patterns
 */
export type ModelWithPattern = {
    key: string;
    name: string;
    readonly enabled?: boolean;
    readonly modified?: string;
    id?: string;
    text?: string;
    patternWithSingleQuotes?: string;
    patternWithNewline?: string;
    patternWithBacktick?: string;
};

export type File = {
    readonly id?: string;
    readonly updated_at?: string;
    readonly created_at?: string;
    mime: string;
    readonly file?: string;
};

export type Default = {
    name?: string;
};

export type Pageable = {
    page?: number;
    size?: number;
    sort?: Array<string>;
};

/**
 * This is a free-form object without additionalProperties.
 */
export type FreeFormObjectWithoutAdditionalProperties = {
    [key: string]: unknown;
};

/**
 * This is a free-form object with additionalProperties: true.
 */
export type FreeFormObjectWithAdditionalPropertiesEqTrue = {
    [key: string]: unknown;
};

/**
 * This is a free-form object with additionalProperties: {}.
 */
export type FreeFormObjectWithAdditionalPropertiesEqEmptyObject = {};

export type ModelWithConst = {
    String?: 'String';
    number?: 0;
    null?: null;
    withType?: 'Some string';
};

/**
 * This is a model with one property and additionalProperties: true
 */
export type ModelWithAdditionalPropertiesEqTrue = {
    /**
     * This is a simple string property
     */
    prop?: string;
    [key: string]: unknown | string | undefined;
};

export type NestedAnyOfArraysNullable = {
    nullableArray?: Array<string | boolean> | null;
};

export type CompositionWithOneOfAndProperties = ({
    foo: SimpleParameter;
} | {
    bar: NonAsciiStringæøåÆøÅöôêÊ字符串;
}) & {
    baz: number;
    qux: number;
};

/**
 * An object that can be null
 */
export type NullableObject = {
    foo?: string;
} | null;

/**
 * Some % character
 */
export type CharactersInDescription = string;

export type ModelWithNullableObject = {
    data?: NullableObject;
};

export type ModelWithOneOfEnum = {
    foo: 'Bar';
} | {
    foo: 'Baz';
} | {
    foo: 'Qux';
} | {
    content: string;
    foo: 'Quux';
} | {
    content: [
        unknown,
        unknown
    ];
    foo: 'Corge';
};

export type ModelWithNestedArrayEnumsDataFoo = 'foo' | 'bar';

export type ModelWithNestedArrayEnumsDataBar = 'baz' | 'qux';

export type ModelWithNestedArrayEnumsData = {
    foo?: Array<ModelWithNestedArrayEnumsDataFoo>;
    bar?: Array<ModelWithNestedArrayEnumsDataBar>;
};

export type ModelWithNestedArrayEnums = {
    array_strings?: Array<string>;
    data?: ModelWithNestedArrayEnumsData;
};

export type ModelWithNestedCompositionEnums = {
    foo?: ModelWithNestedArrayEnumsDataFoo;
};

export type ModelWithReadOnlyAndWriteOnly = {
    foo: string;
    readonly bar: string;
    baz: string;
};

export type ModelWithConstantSizeArray = [
    number,
    number
];

export type ModelWithAnyOfConstantSizeArray = [
    number | string,
    number | string,
    number | string
];

export type ModelWithPrefixItemsConstantSizeArray = [
    ModelWithInteger,
    number | string,
    string
];

export type ModelWithAnyOfConstantSizeArrayNullable = [
    number | string,
    number | string,
    number | string
];

export type ModelWithAnyOfConstantSizeArrayWithNSizeAndOptions = [
    number | Import,
    number | Import
];

export type ModelWithAnyOfConstantSizeArrayAndIntersect = [
    number & string,
    number & string
];

export type ModelWithNumericEnumUnion = {
    /**
     * Период
     */
    value?: -10 | -1 | 0 | 1 | 3 | 6 | 12;
};

/**
 * Some description with `back ticks`
 */
export type ModelWithBackticksInDescription = {
    /**
     * The template `that` should be used for parsing and importing the contents of the CSV file.
     *
     * <br/><p>There is one placeholder currently supported:<ul>     <li><b>${x}</b> - refers to the n-th column in the CSV file, e.g. ${1}, ${2}, ...)</li></ul><p>Example of a correct JSON template:</p>
     * <pre>
     * [
     * {
     * "resourceType": "Asset",
     * "identifier": {
     * "name": "${1}",
     * "domain": {
     * "name": "${2}",
     * "community": {
     * "name": "Some Community"
     * }
     * }
     * },
     * "attributes" : {
     * "00000000-0000-0000-0000-000000003115" : [ {
     * "value" : "${3}"
     * } ],
     * "00000000-0000-0000-0000-000000000222" : [ {
     * "value" : "${4}"
     * } ]
     * }
     * }
     * ]
     * </pre>
     */
    template?: string;
};

export type ModelWithOneOfAndProperties = (SimpleParameter | NonAsciiStringæøåÆøÅöôêÊ字符串) & {
    baz: number;
    qux: number;
};

/**
 * Model used to test deduplication strategy (unused)
 */
export type ParameterSimpleParameterUnused = string;

/**
 * Model used to test deduplication strategy
 */
export type PostServiceWithEmptyTagResponse = string;

/**
 * Model used to test deduplication strategy
 */
export type PostServiceWithEmptyTagResponse2 = string;

/**
 * Model used to test deduplication strategy
 */
export type DeleteFooData = string;

/**
 * Model used to test deduplication strategy
 */
export type DeleteFooData2 = string;

/**
 * Model with restricted keyword name
 */
export type Import = string;

export type SchemaWithFormRestrictedKeys = {
    description?: string;
    'x-enum-descriptions'?: string;
    'x-enum-varnames'?: string;
    'x-enumNames'?: string;
    title?: string;
    object?: {
        description?: string;
        'x-enum-descriptions'?: string;
        'x-enum-varnames'?: string;
        'x-enumNames'?: string;
        title?: string;
    };
    array?: Array<unknown>;
};

/**
 * This schema was giving PascalCase transformations a hard time
 */
export type IoK8sApimachineryPkgApisMetaV1DeleteOptions = {
    /**
     * Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
     */
    preconditions?: IoK8sApimachineryPkgApisMetaV1Preconditions;
};

/**
 * This schema was giving PascalCase transformations a hard time
 */
export type IoK8sApimachineryPkgApisMetaV1Preconditions = {
    /**
     * Specifies the target ResourceVersion
     */
    resourceVersion?: string;
    /**
     * Specifies the target UID.
     */
    uid?: string;
};

export type AdditionalPropertiesUnknownIssue = {
    [key: string]: string | number;
};

export type AdditionalPropertiesUnknownIssue2 = {
    [key: string]: string | number;
};

export type AdditionalPropertiesUnknownIssue3 = string & {
    entries: unknown;
};

export type AdditionalPropertiesIntegerIssue = {
    value: number;
    [key: string]: number;
};

export type OneOfAllOfIssue = ((ConstValue | GenericSchemaDuplicateIssue1SystemBoolean) & _3eNum1Период) | GenericSchemaDuplicateIssue1SystemString;

export type GenericSchemaDuplicateIssue1SystemBoolean = {
    item?: boolean;
    error?: string;
    readonly hasError?: boolean;
    data?: {
        [key: string]: never;
    };
};

export type GenericSchemaDuplicateIssue1SystemString = {
    item?: string;
    error?: string;
    readonly hasError?: boolean;
};

/**
 * This is a reusable parameter
 */
export type SimpleParameter = string;

/**
 * Parameter with illegal characters
 */
export type XFooBar = ModelWithString;

/**
 * A reusable request body
 */
export type SimpleRequestBody = ModelWithString;

/**
 * A reusable request body
 */
export type SimpleFormData = ModelWithString;

export type ExportData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v{api-version}/no+tag';
};

export type PatchApiVbyApiVersionNoTagData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v{api-version}/no+tag';
};

export type PatchApiVbyApiVersionNoTagResponses = {
    /**
     * OK
     */
    default: unknown;
};

export type ImportData = {
    body: ModelWithReadOnlyAndWriteOnly | ModelWithArrayReadOnlyAndWriteOnly;
    path?: never;
    query?: never;
    url: '/api/v{api-version}/no+tag';
};

export type ImportResponses = {
    /**
     * Success
     */
    200: ModelFromZendesk;
    /**
     * Default success response
     */
    default: ModelWithReadOnlyAndWriteOnly;
};

export type ImportResponse = ImportResponses[keyof ImportResponses];

export type FooWowData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v{api-version}/no+tag';
};

export type FooWowResponses = {
    /**
     * OK
     */
    default: unknown;
};

export type ApiVVersionODataControllerCountData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v{api-version}/simple/$count';
};

export type ApiVVersionODataControllerCountResponses = {
    /**
     * Success
     */
    200: ModelFromZendesk;
};

export type ApiVVersionODataControllerCountResponse = ApiVVersionODataControllerCountResponses[keyof ApiVVersionODataControllerCountResponses];

export type GetApiVbyApiVersionSimpleOperationData = {
    body?: never;
    path: {
        /**
         * foo in method
         */
        foo_param: string;
    };
    query?: never;
    url: '/api/v{api-version}/simple:operation';
};

export type GetApiVbyApiVersionSimpleOperationErrors = {
    /**
     * Default error response
     */
    default: ModelWithBoolean;
};

export type GetApiVbyApiVersionSimpleOperationError = GetApiVbyApiVersionSimpleOperationErrors[keyof GetApiVbyApiVersionSimpleOperationErrors];

export type GetApiVbyApiVersionSimpleOperationResponses = {
    /**
     * Response is a simple number
     */
    200: number;
};

export type GetApiVbyApiVersionSimpleOperationResponse = GetApiVbyApiVersionSimpleOperationResponses[keyof GetApiVbyApiVersionSimpleOperationResponses];

export type DeleteCallWithoutParametersAndResponseData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v{api-version}/simple';
};

export type GetCallWithoutParametersAndResponseData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v{api-version}/simple';
};

export type HeadCallWithoutParametersAndResponseData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v{api-version}/simple';
};

export type OptionsCallWithoutParametersAndResponseData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v{api-version}/simple';
};

export type PatchCallWithoutParametersAndResponseData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v{api-version}/simple';
};

export type PostCallWithoutParametersAndResponseData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v{api-version}/simple';
};

export type PutCallWithoutParametersAndResponseData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v{api-version}/simple';
};

export type DeleteFooData3 = {
    body?: never;
    headers: {
        /**
         * Parameter with illegal characters
         */
        'x-Foo-Bar': ModelWithString;
    };
    path: {
        /**
         * foo in method
         */
        foo_param: string;
        /**
         * bar in method
         */
        BarParam: string;
    };
    query?: never;
    url: '/api/v{api-version}/foo/{foo_param}/bar/{BarParam}';
};

export type CallWithDescriptionsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Testing multiline comments in string: First line
         * Second line
         *
         * Fourth line
         */
        parameterWithBreaks?: unknown;
        /**
         * Testing backticks in string: `backticks` and ```multiple backticks``` should work
         */
        parameterWithBackticks?: unknown;
        /**
         * Testing slashes in string: \backwards\\\ and /forwards/// should work
         */
        parameterWithSlashes?: unknown;
        /**
         * Testing expression placeholders in string: ${expression} should work
         */
        parameterWithExpressionPlaceholders?: unknown;
        /**
         * Testing quotes in string: 'single quote''' and "double quotes""" should work
         */
        parameterWithQuotes?: unknown;
        /**
         * Testing reserved characters in string: * inline * and ** inline ** should work
         */
        parameterWithReservedCharacters?: unknown;
    };
    url: '/api/v{api-version}/descriptions/';
};

export type DeprecatedCallData = {
    body?: never;
    headers: {
        /**
         * This parameter is deprecated
         * @deprecated
         */
        parameter: DeprecatedModel;
    };
    path?: never;
    query?: never;
    url: '/api/v{api-version}/parameters/deprecated';
};

export type CallWithParametersData = {
    /**
     * This is the parameter that goes into the body
     */
    body: {
        [key: string]: unknown;
    };
    headers: {
        /**
         * This is the parameter that goes into the header
         */
        parameterHeader: string;
    };
    path: {
        /**
         * This is the parameter that goes into the path
         */
        parameterPath: string;
        /**
         * api-version should be required in standalone clients
         */
        'api-version': string;
    };
    query: {
        foo_ref_enum?: ModelWithNestedArrayEnumsDataFoo;
        foo_all_of_enum: ModelWithNestedArrayEnumsDataFoo;
        /**
         * This is the parameter that goes into the query params
         */
        cursor: string;
    };
    url: '/api/v{api-version}/parameters/{parameterPath}';
};

export type CallWithWeirdParameterNamesData = {
    /**
     * This is the parameter that goes into the body
     */
    body: ModelWithString;
    headers: {
        /**
         * This is the parameter that goes into the request header
         */
        'parameter.header': string;
    };
    path: {
        /**
         * This is the parameter that goes into the path
         */
        'parameter.path.1'?: string;
        /**
         * This is the parameter that goes into the path
         */
        'parameter-path-2'?: string;
        /**
         * This is the parameter that goes into the path
         */
        'PARAMETER-PATH-3'?: string;
        /**
         * api-version should be required in standalone clients
         */
        'api-version': string;
    };
    query: {
        /**
         * This is the parameter with a reserved keyword
         */
        default?: string;
        /**
         * This is the parameter that goes into the request query params
         */
        'parameter-query': string;
    };
    url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}';
};

export type GetCallWithOptionalParamData = {
    /**
     * This is a required parameter
     */
    body: ModelWithOneOfEnum;
    path?: never;
    query?: {
        /**
         * This is an optional parameter
         */
        page?: number;
    };
    url: '/api/v{api-version}/parameters/';
};

export type PostCallWithOptionalParamData = {
    /**
     * This is an optional parameter
     */
    body?: {
        offset?: number;
    };
    path?: never;
    query: {
        /**
         * This is a required parameter
         */
        parameter: Pageable;
    };
    url: '/api/v{api-version}/parameters/';
};

export type PostCallWithOptionalParamResponses = {
    /**
     * Response is a simple number
     */
    200: number;
    /**
     * Success
     */
    204: void;
};

export type PostCallWithOptionalParamResponse = PostCallWithOptionalParamResponses[keyof PostCallWithOptionalParamResponses];

export type PostApiVbyApiVersionRequestBodyData = {
    /**
     * A reusable request body
     */
    body?: SimpleRequestBody;
    path?: never;
    query?: {
        /**
         * This is a reusable parameter
         */
        parameter?: string;
    };
    url: '/api/v{api-version}/requestBody/';
};

export type PostApiVbyApiVersionFormDataData = {
    /**
     * A reusable request body
     */
    body?: SimpleFormData;
    path?: never;
    query?: {
        /**
         * This is a reusable parameter
         */
        parameter?: string;
    };
    url: '/api/v{api-version}/formData/';
};

export type CallWithDefaultParametersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * This is a simple string with default value
         */
        parameterString?: string;
        /**
         * This is a simple number with default value
         */
        parameterNumber?: number;
        /**
         * This is a simple boolean with default value
         */
        parameterBoolean?: boolean;
        /**
         * This is a simple enum with default value
         */
        parameterEnum?: 'Success' | 'Warning' | 'Error';
        /**
         * This is a simple model with default value
         */
        parameterModel?: ModelWithString;
    };
    url: '/api/v{api-version}/defaults';
};

export type CallWithDefaultOptionalParametersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * This is a simple string that is optional with default value
         */
        parameterString?: string;
        /**
         * This is a simple number that is optional with default value
         */
        parameterNumber?: number;
        /**
         * This is a simple boolean that is optional with default value
         */
        parameterBoolean?: boolean;
        /**
         * This is a simple enum that is optional with default value
         */
        parameterEnum?: 'Success' | 'Warning' | 'Error';
        /**
         * This is a simple model that is optional with default value
         */
        parameterModel?: ModelWithString;
    };
    url: '/api/v{api-version}/defaults';
};

export type CallToTestOrderOfParamsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * This is a optional string with default
         */
        parameterOptionalStringWithDefault?: string;
        /**
         * This is a optional string with empty default
         */
        parameterOptionalStringWithEmptyDefault?: string;
        /**
         * This is a optional string with no default
         */
        parameterOptionalStringWithNoDefault?: string;
        /**
         * This is a string with default
         */
        parameterStringWithDefault: string;
        /**
         * This is a string with empty default
         */
        parameterStringWithEmptyDefault: string;
        /**
         * This is a string with no default
         */
        parameterStringWithNoDefault: string;
        /**
         * This is a string that can be null with no default
         */
        parameterStringNullableWithNoDefault?: string;
        /**
         * This is a string that can be null with default
         */
        parameterStringNullableWithDefault?: string;
    };
    url: '/api/v{api-version}/defaults';
};

export type DuplicateNameData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v{api-version}/duplicate';
};

export type DuplicateNameData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v{api-version}/duplicate';
};

export type DuplicateNameData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v{api-version}/duplicate';
};

export type DuplicateNameData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v{api-version}/duplicate';
};

export type CallWithNoContentResponseData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v{api-version}/no-content';
};

export type CallWithNoContentResponseResponses = {
    /**
     * Success
     */
    204: void;
};

export type CallWithNoContentResponseResponse = CallWithNoContentResponseResponses[keyof CallWithNoContentResponseResponses];

export type CallWithResponseAndNoContentResponseData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v{api-version}/multiple-tags/response-and-no-content';
};

export type CallWithResponseAndNoContentResponseResponses = {
    /**
     * Response is a simple number
     */
    200: number;
    /**
     * Success
     */
    204: void;
};

export type CallWithResponseAndNoContentResponseResponse = CallWithResponseAndNoContentResponseResponses[keyof CallWithResponseAndNoContentResponseResponses];

export type DummyAData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v{api-version}/multiple-tags/a';
};

export type DummyAResponses = {
    200: _400;
};

export type DummyAResponse = DummyAResponses[keyof DummyAResponses];

export type DummyBData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v{api-version}/multiple-tags/b';
};

export type DummyBResponses = {
    /**
     * Success
     */
    204: void;
};

export type DummyBResponse = DummyBResponses[keyof DummyBResponses];

export type CallWithResponseData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v{api-version}/response';
};

export type CallWithResponseResponses = {
    default: Import;
};

export type CallWithResponseResponse = CallWithResponseResponses[keyof CallWithResponseResponses];

export type CallWithDuplicateResponsesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v{api-version}/response';
};

export type CallWithDuplicateResponsesErrors = {
    /**
     * Message for 500 error
     */
    500: ModelWithStringError;
    /**
     * Message for 501 error
     */
    501: ModelWithStringError;
    /**
     * Message for 502 error
     */
    502: ModelWithStringError;
    /**
     * Message for 4XX errors
     */
    '4XX': DictionaryWithArray;
    /**
     * Default error response
     */
    default: ModelWithBoolean;
};

export type CallWithDuplicateResponsesError = CallWithDuplicateResponsesErrors[keyof CallWithDuplicateResponsesErrors];

export type CallWithDuplicateResponsesResponses = {
    /**
     * Message for 200 response
     */
    200: ModelWithBoolean & ModelWithInteger;
    /**
     * Message for 201 response
     */
    201: ModelWithString;
    /**
     * Message for 202 response
     */
    202: ModelWithString;
};

export type CallWithDuplicateResponsesResponse = CallWithDuplicateResponsesResponses[keyof CallWithDuplicateResponsesResponses];

export type CallWithResponsesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v{api-version}/response';
};

export type CallWithResponsesErrors = {
    /**
     * Message for 500 error
     */
    500: ModelWithStringError;
    /**
     * Message for 501 error
     */
    501: ModelWithStringError;
    /**
     * Message for 502 error
     */
    502: ModelWithStringError;
    /**
     * Message for default response
     */
    default: ModelWithStringError;
};

export type CallWithResponsesError = CallWithResponsesErrors[keyof CallWithResponsesErrors];

export type CallWithResponsesResponses = {
    /**
     * Message for 200 response
     */
    200: {
        readonly '@namespace.string'?: string;
        readonly '@namespace.integer'?: number;
        readonly value?: Array<ModelWithString>;
    };
    /**
     * Message for 201 response
     */
    201: ModelThatExtends;
    /**
     * Message for 202 response
     */
    202: ModelThatExtendsExtends;
};

export type CallWithResponsesResponse = CallWithResponsesResponses[keyof CallWithResponsesResponses];

export type CollectionFormatData = {
    body?: never;
    path?: never;
    query: {
        /**
         * This is an array parameter that is sent as csv format (comma-separated values)
         */
        parameterArrayCSV: Array<string>;
        /**
         * This is an array parameter that is sent as ssv format (space-separated values)
         */
        parameterArraySSV: Array<string>;
        /**
         * This is an array parameter that is sent as tsv format (tab-separated values)
         */
        parameterArrayTSV: Array<string>;
        /**
         * This is an array parameter that is sent as pipes format (pipe-separated values)
         */
        parameterArrayPipes: Array<string>;
        /**
         * This is an array parameter that is sent as multi format (multiple parameter instances)
         */
        parameterArrayMulti: Array<string>;
    };
    url: '/api/v{api-version}/collectionFormat';
};

export type TypesData = {
    body?: never;
    path?: {
        /**
         * This is a number parameter
         */
        id?: number;
    };
    query: {
        /**
         * This is a number parameter
         */
        parameterNumber: number;
        /**
         * This is a string parameter
         */
        parameterString: string;
        /**
         * This is a boolean parameter
         */
        parameterBoolean: boolean;
        /**
         * This is an object parameter
         */
        parameterObject: {
            [key: string]: unknown;
        };
        /**
         * This is an array parameter
         */
        parameterArray: Array<string>;
        /**
         * This is a dictionary parameter
         */
        parameterDictionary: {
            [key: string]: unknown;
        };
        /**
         * This is an enum parameter
         */
        parameterEnum: 'Success' | 'Warning' | 'Error';
    };
    url: '/api/v{api-version}/types';
};

export type TypesResponses = {
    /**
     * Response is a simple number
     */
    200: number;
    /**
     * Response is a simple string
     */
    201: string;
    /**
     * Response is a simple boolean
     */
    202: boolean;
    /**
     * Response is a simple object
     */
    203: {
        [key: string]: unknown;
    };
};

export type TypesResponse = TypesResponses[keyof TypesResponses];

export type UploadFileData = {
    body: unknown;
    path: {
        /**
         * api-version should be required in standalone clients
         */
        'api-version': string;
    };
    query?: never;
    url: '/api/v{api-version}/upload';
};

export type UploadFileResponses = {
    200: boolean;
};

export type UploadFileResponse = UploadFileResponses[keyof UploadFileResponses];

export type FileResponseData = {
    body?: never;
    path: {
        id: string;
        /**
         * api-version should be required in standalone clients
         */
        'api-version': string;
    };
    query?: never;
    url: '/api/v{api-version}/file/{id}';
};

export type FileResponseResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type ComplexTypesData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Parameter containing object
         */
        parameterObject: {
            first?: {
                second?: {
                    third?: string;
                };
            };
        };
        /**
         * Parameter containing reference
         */
        parameterReference: ModelWithString;
    };
    url: '/api/v{api-version}/complex';
};

export type ComplexTypesErrors = {
    /**
     * 400 `server` error
     */
    400: unknown;
    /**
     * 500 server error
     */
    500: unknown;
};

export type ComplexTypesResponses = {
    /**
     * Successful response
     */
    200: Array<ModelWithString>;
};

export type ComplexTypesResponse = ComplexTypesResponses[keyof ComplexTypesResponses];

export type MultipartResponseData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v{api-version}/multipart';
};

export type MultipartResponseResponses = {
    /**
     * OK
     */
    200: {
        file?: Blob | File;
        metadata?: {
            foo?: string;
            bar?: string;
        };
    };
};

export type MultipartResponseResponse = MultipartResponseResponses[keyof MultipartResponseResponses];

export type MultipartRequestData = {
    body?: {
        content?: Blob | File;
        data?: ModelWithString;
    };
    path?: never;
    query?: never;
    url: '/api/v{api-version}/multipart';
};

export type ComplexParamsData = {
    body?: {
        readonly key: string;
        name: string;
        enabled?: boolean;
        type: 'Monkey' | 'Horse' | 'Bird';
        listOfModels?: Array<ModelWithString>;
        listOfStrings?: Array<string>;
        parameters: ModelWithString | ModelWithEnum | ModelWithArray | ModelWithDictionary;
        readonly user?: {
            readonly id?: number;
            readonly name?: string;
        };
    };
    path: {
        id: number;
        /**
         * api-version should be required in standalone clients
         */
        'api-version': string;
    };
    query?: never;
    url: '/api/v{api-version}/complex/{id}';
};

export type ComplexParamsResponses = {
    /**
     * Success
     */
    200: ModelWithString;
};

export type ComplexParamsResponse = ComplexParamsResponses[keyof ComplexParamsResponses];

export type CallWithResultFromHeaderData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v{api-version}/header';
};

export type CallWithResultFromHeaderErrors = {
    /**
     * 400 server error
     */
    400: unknown;
    /**
     * 500 server error
     */
    500: unknown;
};

export type CallWithResultFromHeaderResponses = {
    /**
     * Successful response
     */
    200: unknown;
};

export type TestErrorCodeData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Status code to return
         */
        status: number;
    };
    url: '/api/v{api-version}/error';
};

export type TestErrorCodeErrors = {
    /**
     * Custom message: Internal Server Error
     */
    500: unknown;
    /**
     * Custom message: Not Implemented
     */
    501: unknown;
    /**
     * Custom message: Bad Gateway
     */
    502: unknown;
    /**
     * Custom message: Service Unavailable
     */
    503: unknown;
};

export type TestErrorCodeResponses = {
    /**
     * Custom message: Successful response
     */
    200: unknown;
};

export type NonAsciiæøåÆøÅöôêÊ字符串Data = {
    body?: never;
    path?: never;
    query: {
        /**
         * Dummy input param
         */
        nonAsciiParamæøåÆØÅöôêÊ: number;
    };
    url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串';
};

export type NonAsciiæøåÆøÅöôêÊ字符串Responses = {
    /**
     * Successful response
     */
    200: Array<NonAsciiStringæøåÆøÅöôêÊ字符串>;
};

export type NonAsciiæøåÆøÅöôêÊ字符串Response = NonAsciiæøåÆøÅöôêÊ字符串Responses[keyof NonAsciiæøåÆøÅöôêÊ字符串Responses];

export type PutWithFormUrlEncodedData = {
    body: ArrayWithStrings;
    path?: never;
    query?: never;
    url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串';
};

export type ClientOptions = {
    baseUrl: 'http://localhost:3000/base' | (string & {});
};