// This file is auto-generated by @hey-api/openapi-ts

export type _3e_num_1Период = 'Bird' | 'Dog';

export const _3e_num_1Период = {
    BIRD: 'Bird',
    DOG: 'Dog'
} as const;

/**
 * Model with number-only name
 */
export type _400 = string;

export type _default = {
    name?: string;
};

/**
 * Model with restricted keyword name
 */
export type _import = string;

export type AdditionalPropertiesIntegerIssue = {
    value: number;
    [key: string]: (number) | undefined;
};

export type AdditionalPropertiesUnknownIssue = {
    [key: string]: (string | number);
};

export type AdditionalPropertiesUnknownIssue2 = {
    [key: string]: (string | number);
};

export type AdditionalPropertiesUnknownIssue3 = string & {
    entries: {
        [key: string]: AdditionalPropertiesUnknownIssue;
    };
};

export type AnyOfAnyAndNull = {
    data?: (unknown | null);
};

/**
 * This is a simple array with any of properties
 */
export type AnyOfArrays = {
    results?: Array<({
    foo?: string;
} | {
    bar?: string;
})>;
};

/**
 * This is a simple array with any of properties
 */
export type ArrayWithAnyOfProperties = Array<({
    foo?: string;
} | {
    bar?: string;
})>;

/**
 * This is a simple array containing an array
 */
export type ArrayWithArray = Array<Array<ModelWithString>>;

/**
 * This is a simple array with booleans
 */
export type ArrayWithBooleans = Array<(boolean)>;

/**
 * This is a simple array with numbers
 */
export type ArrayWithNumbers = Array<(number)>;

/**
 * This is a simple array with properties
 */
export type ArrayWithProperties = Array<{
    '16x16'?: camelCaseCommentWithBreaks;
    bar?: string;
}>;

/**
 * This is a simple array with references
 */
export type ArrayWithReferences = Array<ModelWithString>;

/**
 * This is a simple array with strings
 */
export type ArrayWithStrings = Array<(string)>;

/**
 * Testing multiline comments in string: First line
 * Second line
 *
 * Fourth line
 */
export type camelCaseCommentWithBreaks = number;

/**
 * Some % character
 */
export type CharactersInDescription = string;

/**
 * Testing backticks in string: `backticks` and ```multiple backticks``` should work
 */
export type CommentWithBackticks = number;

/**
 * Testing backticks and quotes in string: `backticks`, 'quotes', "double quotes" and ```multiple backticks``` should work
 */
export type CommentWithBackticksAndQuotes = number;

/**
 * Testing multiline comments in string: First line
 * Second line
 *
 * Fourth line
 */
export type CommentWithBreaks = number;

/**
 * Testing expression placeholders in string: ${expression} should work
 */
export type CommentWithExpressionPlaceholders = number;

/**
 * Testing quotes in string: 'single quote''' and "double quotes""" should work
 */
export type CommentWithQuotes = number;

/**
 * Testing reserved characters in string: * inline * and ** inline ** should work
 */
export type CommentWithReservedCharacters = number;

/**
 * Testing slashes in string: \backwards\\\ and /forwards/// should work
 */
export type CommentWithSlashes = number;

/**
 * This is a base model with two simple optional properties
 */
export type CompositionBaseModel = {
    firstName?: string;
    lastname?: string;
};

/**
 * This is a model that extends the base model
 */
export type CompositionExtendedModel = CompositionBaseModel & {
    firstName: string;
    lastname: string;
    age: number;
};

/**
 * This is a model with one property with a 'all of' relationship
 */
export type CompositionWithAllOfAndNullable = {
    propA?: (({
    boolean?: boolean;
} & ModelWithEnum & ModelWithArray & ModelWithDictionary) | null);
};

/**
 * This is a model with one property with a 'any of' relationship
 */
export type CompositionWithAnyOf = {
    propA?: (ModelWithString | ModelWithEnum | ModelWithArray | ModelWithDictionary);
};

/**
 * This is a model with one property with a 'any of' relationship
 */
export type CompositionWithAnyOfAndNullable = {
    propA?: (({
    boolean?: boolean;
} | ModelWithEnum | ModelWithArray | ModelWithDictionary) | null);
};

/**
 * This is a model with one property with a 'any of' relationship where the options are not $ref
 */
export type CompositionWithAnyOfAnonymous = {
    propA?: ({
    propA?: string;
} | string | number);
};

/**
 * This is a model with nested 'any of' property with a type null
 */
export type CompositionWithNestedAnyAndTypeNull = {
    propA?: (Array<(ModelWithDictionary | null)> | Array<(ModelWithArray | null)>);
};

/**
 * This is a model with one property with a 'any of' relationship where the options are not $ref
 */
export type CompositionWithNestedAnyOfAndNull = {
    propA?: (Array<(_3e_num_1Период | ConstValue)> | null);
};

/**
 * This is a model with one property with a 'one of' relationship
 */
export type CompositionWithOneOf = {
    propA?: (ModelWithString | ModelWithEnum | ModelWithArray | ModelWithDictionary);
};

/**
 * This is a model that contains a dictionary of complex arrays (composited) within composition
 */
export type CompositionWithOneOfAndComplexArrayDictionary = {
    propA?: (boolean | {
    [key: string]: Array<(number | string)>;
});
};

/**
 * This is a model with one property with a 'one of' relationship
 */
export type CompositionWithOneOfAndNullable = {
    propA?: (({
    boolean?: boolean;
} | ModelWithEnum | ModelWithArray | ModelWithDictionary) | null);
};

export type CompositionWithOneOfAndProperties = ({
    foo: ParameterSimpleParameter;
} | {
    bar: NonAsciiStringæøåÆØÅöôêÊ字符串;
}) & {
    baz: (number) | null;
    qux: number;
};

/**
 * This is a model that contains a dictionary of simple arrays within composition
 */
export type CompositionWithOneOfAndSimpleArrayDictionary = {
    propA?: (boolean | {
    [key: string]: Array<(boolean)>;
});
};

/**
 * This is a model that contains a simple dictionary within composition
 */
export type CompositionWithOneOfAndSimpleDictionary = {
    propA?: (boolean | {
    [key: string]: (number);
});
};

/**
 * This is a model with one property with a 'one of' relationship where the options are not $ref
 */
export type CompositionWithOneOfAnonymous = {
    propA?: ({
    propA?: string;
} | string | number);
};

/**
 * This is a model with one property with a 'one of' relationship where the options are not $ref
 */
export type CompositionWithOneOfDiscriminator = ModelCircle | ModelSquare;

export type ConstValue = "ConstValue";

/**
 * Model used to test deduplication strategy
 */
export type DeleteFooData = string;

/**
 * Model used to test deduplication strategy
 */
export type DeleteFooData2 = string;

/**
 * This is a deprecated model with a deprecated property
 * @deprecated
 */
export type DeprecatedModel = {
    /**
     * This is a deprecated property
     * @deprecated
     */
    prop?: string;
};

/**
 * This is a complex dictionary
 */
export type DictionaryWithArray = {
    [key: string]: Array<ModelWithString>;
};

/**
 * This is a string dictionary
 */
export type DictionaryWithDictionary = {
    [key: string]: {
        [key: string]: (string);
    };
};

/**
 * This is a complex dictionary
 */
export type DictionaryWithProperties = {
    [key: string]: {
        foo?: string;
        bar?: string;
    };
};

export type DictionaryWithPropertiesAndAdditionalProperties = {
    foo?: number;
    bar?: boolean;
    [key: string]: (string | number | boolean) | undefined;
};

/**
 * This is a string reference
 */
export type DictionaryWithReference = {
    [key: string]: ModelWithString;
};

/**
 * This is a string dictionary
 */
export type DictionaryWithString = {
    [key: string]: (string);
};

/**
 * Success=1,Warning=2,Error=3
 */
export type EnumFromDescription = number;

/**
 * This is a simple enum with numbers
 */
export type EnumWithExtensions = 200 | 400 | 500;

/**
 * This is a simple enum with numbers
 */
export const EnumWithExtensions = {
    /**
     * Used when the status of something is successful
     */
    CUSTOM_SUCCESS: 200,
    /**
     * Used when the status of something has a warning
     */
    CUSTOM_WARNING: 400,
    /**
     * Used when the status of something has an error
     */
    CUSTOM_ERROR: 500
} as const;

/**
 * This is a simple enum with numbers
 */
export type EnumWithNumbers = 1 | 2 | 3 | 1.1 | 1.2 | 1.3 | 100 | 200 | 300 | -100 | -200 | -300 | -1.1 | -1.2 | -1.3;

/**
 * This is a simple enum with numbers
 */
export const EnumWithNumbers = {
    '_1': 1,
    '_2': 2,
    '_3': 3,
    '_1.1': 1.1,
    '_1.2': 1.2,
    '_1.3': 1.3,
    '_100': 100,
    '_200': 200,
    '_300': 300,
    '_-100': -100,
    '_-200': -200,
    '_-300': -300,
    '_-1.1': -1.1,
    '_-1.2': -1.2,
    '_-1.3': -1.3
} as const;

export type EnumWithReplacedCharacters = "'Single Quote'" | '"Double Quotes"' | 'øæåôöØÆÅÔÖ字符串' | 3.1 | '';

export const EnumWithReplacedCharacters = {
    _SINGLE_QUOTE_: "'Single Quote'",
    _DOUBLE_QUOTES_: '"Double Quotes"',
    'ØÆÅÔÖ_ØÆÅÔÖ字符串': 'øæåôöØÆÅÔÖ字符串',
    '_3.1': 3.1,
    EMPTY_STRING: ''
} as const;

/**
 * This is a simple enum with strings
 */
export type EnumWithStrings = 'Success' | 'Warning' | 'Error' | "'Single Quote'" | '"Double Quotes"' | 'Non-ascii: øæåôöØÆÅÔÖ字符串';

/**
 * This is a simple enum with strings
 */
export const EnumWithStrings = {
    SUCCESS: 'Success',
    WARNING: 'Warning',
    ERROR: 'Error',
    _SINGLE_QUOTE_: "'Single Quote'",
    _DOUBLE_QUOTES_: '"Double Quotes"',
    'NON_ASCII__ØÆÅÔÖ_ØÆÅÔÖ字符串': 'Non-ascii: øæåôöØÆÅÔÖ字符串'
} as const;

export type EnumWithXEnumNames = 0 | 1 | 2;

export const EnumWithXEnumNames = {
    zero: 0,
    one: 1,
    two: 2
} as const;

export type File = {
    readonly id?: string;
    readonly updated_at?: string;
    readonly created_at?: string;
    mime: string;
    readonly file?: string;
};

/**
 * This is a free-form object with additionalProperties: {}.
 */
export type FreeFormObjectWithAdditionalPropertiesEqEmptyObject = {
    [key: string]: unknown;
};

/**
 * This is a free-form object with additionalProperties: true.
 */
export type FreeFormObjectWithAdditionalPropertiesEqTrue = {
    [key: string]: unknown;
};

/**
 * This is a free-form object without additionalProperties.
 */
export type FreeFormObjectWithoutAdditionalProperties = {
    [key: string]: unknown;
};

export type Generic_Schema_Duplicate_Issue_1_System_Boolean_ = {
    item?: boolean;
    error?: (string) | null;
    readonly hasError?: boolean;
    data?: {
        [key: string]: unknown;
    };
};

export type Generic_Schema_Duplicate_Issue_1_System_String_ = {
    item?: (string) | null;
    error?: (string) | null;
    readonly hasError?: boolean;
};

/**
 * This schema was giving PascalCase transformations a hard time
 */
export type io_k8s_apimachinery_pkg_apis_meta_v1_DeleteOptions = {
    /**
     * Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
     */
    preconditions?: (io_k8s_apimachinery_pkg_apis_meta_v1_Preconditions);
};

/**
 * This schema was giving PascalCase transformations a hard time
 */
export type io_k8s_apimachinery_pkg_apis_meta_v1_Preconditions = {
    /**
     * Specifies the target ResourceVersion
     */
    resourceVersion?: string;
    /**
     * Specifies the target UID.
     */
    uid?: string;
};

/**
 * `Comment` or `VoiceComment`. The JSON object for adding voice comments to tickets is different. See [Adding voice comments to tickets](/documentation/ticketing/managing-tickets/adding-voice-comments-to-tickets)
 */
export type Model_From_Zendesk = string;

/**
 * Circle
 */
export type ModelCircle = {
    kind: 'circle';
    radius?: number;
};

/**
 * Square
 */
export type ModelSquare = {
    kind: 'square';
    sideLength?: number;
};

/**
 * This is a model that extends another model
 */
export type ModelThatExtends = ModelWithString & {
    propExtendsA?: string;
    propExtendsB?: ModelWithString;
};

/**
 * This is a model that extends another model
 */
export type ModelThatExtendsExtends = ModelWithString & ModelThatExtends & {
    propExtendsC?: string;
    propExtendsD?: ModelWithString;
};

/**
 * This is a model with one property and additionalProperties: true
 */
export type ModelWithAdditionalPropertiesEqTrue = {
    /**
     * This is a simple string property
     */
    prop?: string;
    [key: string]: unknown | string;
};

export type ModelWithAnyOfConstantSizeArray = [
    (number | string),
    (number | string),
    (number | string)
];

export type ModelWithAnyOfConstantSizeArrayAndIntersect = [
    (number & string),
    (number & string)
];

export type ModelWithAnyOfConstantSizeArrayNullable = [
    ((number) | null | string),
    ((number) | null | string),
    ((number) | null | string)
];

export type ModelWithAnyOfConstantSizeArrayWithNSizeAndOptions = [
    (number | _import),
    (number | _import)
];

/**
 * This is a model with one property containing an array
 */
export type ModelWithArray = {
    prop?: Array<ModelWithString>;
    propWithFile?: Array<((Blob | File))>;
    propWithNumber?: Array<(number)>;
};

/**
 * This is a model with one property containing an array
 */
export type ModelWithArrayReadOnlyAndWriteOnly = {
    prop?: Array<ModelWithReadOnlyAndWriteOnly>;
    propWithFile?: Array<((Blob | File))>;
    propWithNumber?: Array<(number)>;
};

/**
 * Some description with `back ticks`
 */
export type ModelWithBackticksInDescription = {
    /**
     * The template `that` should be used for parsing and importing the contents of the CSV file.
     *
     * <br/><p>There is one placeholder currently supported:<ul>     <li><b>${x}</b> - refers to the n-th column in the CSV file, e.g. ${1}, ${2}, ...)</li></ul><p>Example of a correct JSON template:</p>
     * <pre>
     * [
     * {
     * "resourceType": "Asset",
     * "identifier": {
     * "name": "${1}",
     * "domain": {
     * "name": "${2}",
     * "community": {
     * "name": "Some Community"
     * }
     * }
     * },
     * "attributes" : {
     * "00000000-0000-0000-0000-000000003115" : [ {
     * "value" : "${3}"
     * } ],
     * "00000000-0000-0000-0000-000000000222" : [ {
     * "value" : "${4}"
     * } ]
     * }
     * }
     * ]
     * </pre>
     */
    template?: string;
};

/**
 * This is a model with one boolean property
 */
export type ModelWithBoolean = {
    /**
     * This is a simple boolean property
     */
    prop?: boolean;
};

/**
 * This is a model with one property containing a circular reference
 */
export type ModelWithCircularReference = {
    prop?: ModelWithCircularReference;
};

export type ModelWithConst = {
    String?: "String";
    number?: 0;
    null?: null;
    withType?: "Some string";
};

export type ModelWithConstantSizeArray = [
    number,
    number
];

/**
 * This is a model with one property containing a dictionary
 */
export type ModelWithDictionary = {
    prop?: {
        [key: string]: (string);
    };
};

/**
 * This is a model with duplicated imports
 */
export type ModelWithDuplicateImports = {
    propA?: ModelWithString;
    propB?: ModelWithString;
    propC?: ModelWithString;
};

/**
 * This is a model with duplicated properties
 */
export type ModelWithDuplicateProperties = {
    prop?: ModelWithString;
};

/**
 * This is a model with one enum
 */
export type ModelWithEnum = {
    /**
     * This is a simple enum with strings
     */
    'foo_bar-enum'?: 'Success' | 'Warning' | 'Error' | 'ØÆÅ字符串';
    /**
     * These are the HTTP error code enums
     */
    statusCode?: '100' | '200 FOO' | '300 FOO_BAR' | '400 foo-bar' | '500 foo.bar' | '600 foo&bar';
    /**
     * Simple boolean enum
     */
    bool?: boolean;
};

/**
 * This is a simple enum with strings
 */
export type foo_bar_enum = 'Success' | 'Warning' | 'Error' | 'ØÆÅ字符串';

/**
 * This is a simple enum with strings
 */
export const foo_bar_enum = {
    SUCCESS: 'Success',
    WARNING: 'Warning',
    ERROR: 'Error',
    'ØÆÅ字符串': 'ØÆÅ字符串'
} as const;

/**
 * These are the HTTP error code enums
 */
export type statusCode = '100' | '200 FOO' | '300 FOO_BAR' | '400 foo-bar' | '500 foo.bar' | '600 foo&bar';

/**
 * These are the HTTP error code enums
 */
export const statusCode = {
    _100: '100',
    _200_FOO: '200 FOO',
    _300_FOO_BAR: '300 FOO_BAR',
    _400_FOO_BAR: '400 foo-bar',
    _500_FOO_BAR: '500 foo.bar',
    _600_FOO_BAR: '600 foo&bar'
} as const;

/**
 * This is a model with one enum
 */
export type ModelWithEnumFromDescription = {
    /**
     * Success=1,Warning=2,Error=3
     */
    test?: number;
};

/**
 * This is a model with one enum with escaped name
 */
export type ModelWithEnumWithHyphen = {
    'foo-bar-baz-qux'?: '3.0';
};

export type foo_bar_baz_qux = '3.0';

export const foo_bar_baz_qux = {
    _3_0: '3.0'
} as const;

/**
 * This is a model with one number property
 */
export type ModelWithInteger = {
    /**
     * This is a simple number property
     */
    prop?: number;
};

export type ModelWithNestedArrayEnums = {
    array_strings?: Array<(string)>;
    data?: (ModelWithNestedArrayEnumsData);
};

export type ModelWithNestedArrayEnumsData = {
    foo?: Array<ModelWithNestedArrayEnumsDataFoo>;
    bar?: Array<ModelWithNestedArrayEnumsDataBar>;
};

export type ModelWithNestedArrayEnumsDataBar = 'baz' | 'qux';

export const ModelWithNestedArrayEnumsDataBar = {
    BAZ: 'baz',
    QUX: 'qux'
} as const;

export type ModelWithNestedArrayEnumsDataFoo = 'foo' | 'bar';

export const ModelWithNestedArrayEnumsDataFoo = {
    FOO: 'foo',
    BAR: 'bar'
} as const;

export type ModelWithNestedCompositionEnums = {
    foo?: (ModelWithNestedArrayEnumsDataFoo);
};

/**
 * This is a model with nested enums
 */
export type ModelWithNestedEnums = {
    dictionaryWithEnum?: {
        [key: string]: ('Success' | 'Warning' | 'Error');
    };
    dictionaryWithEnumFromDescription?: {
        [key: string]: (number);
    };
    arrayWithEnum?: Array<('Success' | 'Warning' | 'Error')>;
    arrayWithDescription?: Array<(number)>;
    /**
     * This is a simple enum with strings
     */
    'foo_bar-enum'?: 'Success' | 'Warning' | 'Error' | 'ØÆÅ字符串';
};

/**
 * This is a model with one nested property
 */
export type ModelWithNestedProperties = {
    readonly first: {
        readonly second: {
            readonly third: (string) | null;
        } | null;
    } | null;
};

export type ModelWithNullableObject = {
    data?: NullableObject;
};

/**
 * This is a model with one string property
 */
export type ModelWithNullableString = {
    /**
     * This is a simple string property
     */
    nullableProp1?: (string) | null;
    /**
     * This is a simple string property
     */
    nullableRequiredProp1: (string) | null;
    /**
     * This is a simple string property
     */
    nullableProp2?: (string) | null;
    /**
     * This is a simple string property
     */
    nullableRequiredProp2: (string) | null;
    /**
     * This is a simple enum with strings
     */
    'foo_bar-enum'?: 'Success' | 'Warning' | 'Error' | 'ØÆÅ字符串';
};

export type ModelWithNumericEnumUnion = {
    /**
     * Период
     */
    value?: -10 | -1 | 0 | 1 | 3 | 6 | 12;
};

/**
 * Период
 */
export type value = -10 | -1 | 0 | 1 | 3 | 6 | 12;

/**
 * Период
 */
export const value = {
    '_-10': -10,
    '_-1': -1,
    '_0': 0,
    '_1': 1,
    '_3': 3,
    '_6': 6,
    '_12': 12
} as const;

export type ModelWithOneOfAndProperties = (ParameterSimpleParameter | NonAsciiStringæøåÆØÅöôêÊ字符串) & {
    baz: (number) | null;
    qux: number;
};

export type ModelWithOneOfEnum = {
    foo: 'Bar';
} | {
    foo: 'Baz';
} | {
    foo: 'Qux';
} | {
    content: string;
    foo: 'Quux';
} | {
    content: [
        (string),
        (string)
    ];
    foo: 'Corge';
};

export type foo = 'Bar';

export const foo = {
    BAR: 'Bar'
} as const;

/**
 * This is a model with ordered properties
 */
export type ModelWithOrderedProperties = {
    zebra?: string;
    apple?: string;
    hawaii?: string;
};

/**
 * This is a model that contains a some patterns
 */
export type ModelWithPattern = {
    key: string;
    name: string;
    readonly enabled?: boolean;
    readonly modified?: string;
    id?: string;
    text?: string;
    patternWithSingleQuotes?: string;
    patternWithNewline?: string;
    patternWithBacktick?: string;
};

export type ModelWithPrefixItemsConstantSizeArray = [
    ModelWithInteger,
    (number | string),
    string
];

/**
 * This is a model with one nested property
 */
export type ModelWithProperties = {
    required: string;
    readonly requiredAndReadOnly: string;
    requiredAndNullable: (string) | null;
    string?: string;
    number?: number;
    boolean?: boolean;
    reference?: ModelWithString;
    'property with space'?: string;
    default?: string;
    try?: string;
    readonly '@namespace.string'?: string;
    readonly '@namespace.integer'?: number;
};

export type ModelWithReadOnlyAndWriteOnly = {
    foo: string;
    readonly bar: string;
    baz: string;
};

/**
 * This is a model with one property containing a reference
 */
export type ModelWithReference = {
    prop?: ModelWithProperties;
};

/**
 * This is a model with one string property
 */
export type ModelWithString = {
    /**
     * This is a simple string property
     */
    prop?: string;
};

/**
 * This is a model with one string property
 */
export type ModelWithStringError = {
    /**
     * This is a simple string property
     */
    prop?: string;
};

export type NestedAnyOfArraysNullable = {
    nullableArray?: (Array<(string | boolean)> | null);
};

/**
 * A string with non-ascii (unicode) characters valid in typescript identifiers (æøåÆØÅöÔèÈ字符串)
 */
export type NonAsciiStringæøåÆØÅöôêÊ字符串 = string;

/**
 * An object that can be null
 */
export type NullableObject = {
    foo?: string;
} | null;

export type OneOfAllOfIssue = ((ConstValue | Generic_Schema_Duplicate_Issue_1_System_Boolean_) & _3e_num_1Период) | Generic_Schema_Duplicate_Issue_1_System_String_;

export type Pageable = {
    page?: number;
    size?: number;
    sort?: Array<(string)>;
};

/**
 * This is a reusable parameter
 */
export type ParameterSimpleParameter = string;

/**
 * Model used to test deduplication strategy (unused)
 */
export type ParameterSimpleParameterUnused = string;

/**
 * Parameter with illegal characters
 */
export type Parameterx_Foo_Bar = ModelWithString;

/**
 * Model used to test deduplication strategy
 */
export type PostServiceWithEmptyTagResponse = string;

/**
 * Model used to test deduplication strategy
 */
export type PostServiceWithEmptyTagResponse2 = string;

export type SchemaWithFormRestrictedKeys = {
    description?: string;
    'x-enum-descriptions'?: string;
    'x-enum-varnames'?: string;
    'x-enumNames'?: string;
    title?: string;
    object?: {
        description?: string;
        'x-enum-descriptions'?: string;
        'x-enum-varnames'?: string;
        'x-enumNames'?: string;
        title?: string;
    };
    array?: Array<({
    description?: string;
    'x-enum-descriptions'?: string;
    'x-enum-varnames'?: string;
    'x-enumNames'?: string;
    title?: string;
})>;
};

/**
 * This is a simple boolean
 */
export type SimpleBoolean = boolean;

/**
 * This is a simple file
 */
export type SimpleFile = (Blob | File);

/**
 * This is a simple number
 */
export type SimpleInteger = number;

/**
 * This is a simple reference
 */
export type SimpleReference = ModelWithString;

/**
 * This is a simple string
 */
export type SimpleString = string;

/**
 * This is a simple string
 */
export type SimpleStringWithPattern = (string) | null;