// This file is auto-generated by @hey-api/openapi-ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import type { Observable } from 'rxjs';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { CollectionFormatData, ComplexTypesData, ComplexTypesResponse, ComplexParamsData, ComplexParamsResponse, PatchApiNoTagResponse, ImportData, ImportResponse, FooWowResponse, GetApiSimpleOperationData, GetApiSimpleOperationResponse, CallWithDefaultParametersData, CallWithDefaultOptionalParametersData, CallToTestOrderOfParamsData, DeprecatedCallData, CallWithDescriptionsData, TestErrorCodeData, TestErrorCodeResponse, FileResponseData, FileResponseResponse, PostApiFormDataData, CallWithResultFromHeaderResponse, MultipartRequestData, MultipartResponseResponse, DummyAResponse, DummyBResponse, CallWithNoContentResponseResponse, CallWithResponseAndNoContentResponseResponse, NonAsciiæøåÆøÅöôêÊ字符串Data, NonAsciiæøåÆøÅöôêÊ字符串Response, PutWithFormUrlEncodedData, DeleteFooData3, CallWithParametersData, CallWithWeirdParameterNamesData, GetCallWithOptionalParamData, PostCallWithOptionalParamData, PostCallWithOptionalParamResponse, PostApiRequestBodyData, CallWithResponseResponse, CallWithDuplicateResponsesResponse, CallWithResponsesResponse, ApiVVersionODataControllerCountResponse, TypesData, TypesResponse, UploadFileData, UploadFileResponse } from './types.gen';

@Injectable({
    providedIn: 'root'
})
export class CollectionFormatService {
    constructor(public readonly http: HttpClient) { }
    
    /**
     * @param data The data for the request.
     * @param data.parameterArrayCsv This is an array parameter that is sent as csv format (comma-separated values)
     * @param data.parameterArraySsv This is an array parameter that is sent as ssv format (space-separated values)
     * @param data.parameterArrayTsv This is an array parameter that is sent as tsv format (tab-separated values)
     * @param data.parameterArrayPipes This is an array parameter that is sent as pipes format (pipe-separated values)
     * @param data.parameterArrayMulti This is an array parameter that is sent as multi format (multiple parameter instances)
     * @throws ApiError
     */
    public collectionFormat(data: CollectionFormatData): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/collectionFormat',
            query: {
                parameterArrayCSV: data.parameterArrayCsv,
                parameterArraySSV: data.parameterArraySsv,
                parameterArrayTSV: data.parameterArrayTsv,
                parameterArrayPipes: data.parameterArrayPipes,
                parameterArrayMulti: data.parameterArrayMulti
            }
        });
    }
    
}

@Injectable({
    providedIn: 'root'
})
export class ComplexService {
    constructor(public readonly http: HttpClient) { }
    
    /**
     * @param data The data for the request.
     * @param data.parameterObject Parameter containing object
     * @param data.parameterReference Parameter containing reference
     * @returns ModelWithString Successful response
     * @throws ApiError
     */
    public complexTypes(data: ComplexTypesData): Observable<ComplexTypesResponse> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/complex',
            query: {
                parameterObject: data.parameterObject,
                parameterReference: data.parameterReference
            },
            errors: {
                400: '400 `server` error',
                500: '500 server error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ModelWithString Success
     * @throws ApiError
     */
    public complexParams(data: ComplexParamsData): Observable<ComplexParamsResponse> {
        return __request(OpenAPI, this.http, {
            method: 'PUT',
            url: '/api/v{api-version}/complex/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json-patch+json'
        });
    }
    
}

@Injectable({
    providedIn: 'root'
})
export class DefaultService {
    constructor(public readonly http: HttpClient) { }
    
    /**
     * @throws ApiError
     */
    public export(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/no+tag'
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public patchApiNoTag(): Observable<PatchApiNoTagResponse> {
        return __request(OpenAPI, this.http, {
            method: 'PATCH',
            url: '/api/v{api-version}/no+tag'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Model_From_Zendesk Success
     * @returns ModelWithReadOnlyAndWriteOnly Default success response
     * @throws ApiError
     */
    public import(data: ImportData): Observable<ImportResponse> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/no+tag',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public fooWow(): Observable<FooWowResponse> {
        return __request(OpenAPI, this.http, {
            method: 'PUT',
            url: '/api/v{api-version}/no+tag'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.fooParam foo in method
     * @returns number Response is a simple number
     * @throws ApiError
     */
    public getApiSimpleOperation(data: GetApiSimpleOperationData): Observable<GetApiSimpleOperationResponse> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/simple:operation',
            path: {
                foo_param: data.fooParam
            },
            errors: {
                default: 'Default error response'
            }
        });
    }
    
}

@Injectable({
    providedIn: 'root'
})
export class DefaultsService {
    constructor(public readonly http: HttpClient) { }
    
    /**
     * @param data The data for the request.
     * @param data.parameterString This is a simple string with default value
     * @param data.parameterNumber This is a simple number with default value
     * @param data.parameterBoolean This is a simple boolean with default value
     * @param data.parameterEnum This is a simple enum with default value
     * @param data.parameterModel This is a simple model with default value
     * @throws ApiError
     */
    public callWithDefaultParameters(data: CallWithDefaultParametersData = {}): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/defaults',
            query: {
                parameterString: data.parameterString,
                parameterNumber: data.parameterNumber,
                parameterBoolean: data.parameterBoolean,
                parameterEnum: data.parameterEnum,
                parameterModel: data.parameterModel
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parameterString This is a simple string that is optional with default value
     * @param data.parameterNumber This is a simple number that is optional with default value
     * @param data.parameterBoolean This is a simple boolean that is optional with default value
     * @param data.parameterEnum This is a simple enum that is optional with default value
     * @param data.parameterModel This is a simple model that is optional with default value
     * @throws ApiError
     */
    public callWithDefaultOptionalParameters(data: CallWithDefaultOptionalParametersData = {}): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/defaults',
            query: {
                parameterString: data.parameterString,
                parameterNumber: data.parameterNumber,
                parameterBoolean: data.parameterBoolean,
                parameterEnum: data.parameterEnum,
                parameterModel: data.parameterModel
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parameterStringWithNoDefault This is a string with no default
     * @param data.parameterOptionalStringWithDefault This is a optional string with default
     * @param data.parameterOptionalStringWithEmptyDefault This is a optional string with empty default
     * @param data.parameterOptionalStringWithNoDefault This is a optional string with no default
     * @param data.parameterStringWithDefault This is a string with default
     * @param data.parameterStringWithEmptyDefault This is a string with empty default
     * @param data.parameterStringNullableWithNoDefault This is a string that can be null with no default
     * @param data.parameterStringNullableWithDefault This is a string that can be null with default
     * @throws ApiError
     */
    public callToTestOrderOfParams(data: CallToTestOrderOfParamsData): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'PUT',
            url: '/api/v{api-version}/defaults',
            query: {
                parameterOptionalStringWithDefault: data.parameterOptionalStringWithDefault,
                parameterOptionalStringWithEmptyDefault: data.parameterOptionalStringWithEmptyDefault,
                parameterOptionalStringWithNoDefault: data.parameterOptionalStringWithNoDefault,
                parameterStringWithDefault: data.parameterStringWithDefault,
                parameterStringWithEmptyDefault: data.parameterStringWithEmptyDefault,
                parameterStringWithNoDefault: data.parameterStringWithNoDefault,
                parameterStringNullableWithNoDefault: data.parameterStringNullableWithNoDefault,
                parameterStringNullableWithDefault: data.parameterStringNullableWithDefault
            }
        });
    }
    
}

@Injectable({
    providedIn: 'root'
})
export class DeprecatedService {
    constructor(public readonly http: HttpClient) { }
    
    /**
     * @deprecated
     * @param data The data for the request.
     * @param data.parameter This parameter is deprecated
     * @throws ApiError
     */
    public deprecatedCall(data: DeprecatedCallData): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/deprecated',
            headers: {
                parameter: data.parameter
            }
        });
    }
    
}

@Injectable({
    providedIn: 'root'
})
export class DescriptionsService {
    constructor(public readonly http: HttpClient) { }
    
    /**
     * @param data The data for the request.
     * @param data.parameterWithBreaks Testing multiline comments in string: First line
     * Second line
     *
     * Fourth line
     * @param data.parameterWithBackticks Testing backticks in string: `backticks` and ```multiple backticks``` should work
     * @param data.parameterWithSlashes Testing slashes in string: \backwards\\\ and /forwards/// should work
     * @param data.parameterWithExpressionPlaceholders Testing expression placeholders in string: ${expression} should work
     * @param data.parameterWithQuotes Testing quotes in string: 'single quote''' and "double quotes""" should work
     * @param data.parameterWithReservedCharacters Testing reserved characters in string: * inline * and ** inline ** should work
     * @throws ApiError
     */
    public callWithDescriptions(data: CallWithDescriptionsData = {}): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/descriptions/',
            query: {
                parameterWithBreaks: data.parameterWithBreaks,
                parameterWithBackticks: data.parameterWithBackticks,
                parameterWithSlashes: data.parameterWithSlashes,
                parameterWithExpressionPlaceholders: data.parameterWithExpressionPlaceholders,
                parameterWithQuotes: data.parameterWithQuotes,
                parameterWithReservedCharacters: data.parameterWithReservedCharacters
            }
        });
    }
    
}

@Injectable({
    providedIn: 'root'
})
export class DuplicateService {
    constructor(public readonly http: HttpClient) { }
    
    /**
     * @throws ApiError
     */
    public duplicateName(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/duplicate'
        });
    }
    
    /**
     * @throws ApiError
     */
    public duplicateName1(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/duplicate'
        });
    }
    
    /**
     * @throws ApiError
     */
    public duplicateName2(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'PUT',
            url: '/api/v{api-version}/duplicate'
        });
    }
    
    /**
     * @throws ApiError
     */
    public duplicateName3(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'DELETE',
            url: '/api/v{api-version}/duplicate'
        });
    }
    
}

@Injectable({
    providedIn: 'root'
})
export class ErrorService {
    constructor(public readonly http: HttpClient) { }
    
    /**
     * @param data The data for the request.
     * @param data.status Status code to return
     * @returns unknown Custom message: Successful response
     * @throws ApiError
     */
    public testErrorCode(data: TestErrorCodeData): Observable<TestErrorCodeResponse> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/error',
            query: {
                status: data.status
            },
            errors: {
                500: 'Custom message: Internal Server Error',
                501: 'Custom message: Not Implemented',
                502: 'Custom message: Bad Gateway',
                503: 'Custom message: Service Unavailable'
            }
        });
    }
    
}

@Injectable({
    providedIn: 'root'
})
export class FileResponseService {
    constructor(public readonly http: HttpClient) { }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns binary Success
     * @throws ApiError
     */
    public fileResponse(data: FileResponseData): Observable<FileResponseResponse> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/file/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

@Injectable({
    providedIn: 'root'
})
export class FormDataService {
    constructor(public readonly http: HttpClient) { }
    
    /**
     * @param data The data for the request.
     * @param data.parameter This is a reusable parameter
     * @param data.formData A reusable request body
     * @throws ApiError
     */
    public postApiFormData(data: PostApiFormDataData = {}): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/formData/',
            query: {
                parameter: data.parameter
            },
            formData: data.formData,
            mediaType: 'multipart/form-data'
        });
    }
    
}

@Injectable({
    providedIn: 'root'
})
export class HeaderService {
    constructor(public readonly http: HttpClient) { }
    
    /**
     * @returns string Successful response
     * @throws ApiError
     */
    public callWithResultFromHeader(): Observable<CallWithResultFromHeaderResponse> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/header',
            responseHeader: 'operation-location',
            errors: {
                400: '400 server error',
                500: '500 server error'
            }
        });
    }
    
}

@Injectable({
    providedIn: 'root'
})
export class MultipartService {
    constructor(public readonly http: HttpClient) { }
    
    /**
     * @param data The data for the request.
     * @param data.formData
     * @throws ApiError
     */
    public multipartRequest(data: MultipartRequestData = {}): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/multipart',
            formData: data.formData,
            mediaType: 'multipart/form-data'
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public multipartResponse(): Observable<MultipartResponseResponse> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/multipart'
        });
    }
    
}

@Injectable({
    providedIn: 'root'
})
export class MultipleTags1Service {
    constructor(public readonly http: HttpClient) { }
    
    /**
     * @returns _400
     * @throws ApiError
     */
    public dummyA(): Observable<DummyAResponse> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a'
        });
    }
    
    /**
     * @returns void Success
     * @throws ApiError
     */
    public dummyB(): Observable<DummyBResponse> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b'
        });
    }
    
}

@Injectable({
    providedIn: 'root'
})
export class MultipleTags2Service {
    constructor(public readonly http: HttpClient) { }
    
    /**
     * @returns _400
     * @throws ApiError
     */
    public dummyA(): Observable<DummyAResponse> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a'
        });
    }
    
    /**
     * @returns void Success
     * @throws ApiError
     */
    public dummyB(): Observable<DummyBResponse> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b'
        });
    }
    
}

@Injectable({
    providedIn: 'root'
})
export class MultipleTags3Service {
    constructor(public readonly http: HttpClient) { }
    
    /**
     * @returns void Success
     * @throws ApiError
     */
    public dummyB(): Observable<DummyBResponse> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b'
        });
    }
    
}

@Injectable({
    providedIn: 'root'
})
export class NoContentService {
    constructor(public readonly http: HttpClient) { }
    
    /**
     * @returns void Success
     * @throws ApiError
     */
    public callWithNoContentResponse(): Observable<CallWithNoContentResponseResponse> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/no-content'
        });
    }
    
    /**
     * @returns number Response is a simple number
     * @returns void Success
     * @throws ApiError
     */
    public callWithResponseAndNoContentResponse(): Observable<CallWithResponseAndNoContentResponseResponse> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/response-and-no-content'
        });
    }
    
}

@Injectable({
    providedIn: 'root'
})
export class NonAsciiÆøåÆøÅöôêÊService {
    constructor(public readonly http: HttpClient) { }
    
    /**
     * @param data The data for the request.
     * @param data.nonAsciiParamæøåÆøÅöôêÊ Dummy input param
     * @returns NonAsciiStringæøåÆØÅöôêÊ字符串 Successful response
     * @throws ApiError
     */
    public nonAsciiæøåÆøÅöôêÊ字符串(data: NonAsciiæøåÆøÅöôêÊ字符串Data): Observable<NonAsciiæøåÆøÅöôêÊ字符串Response> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
            query: {
                'nonAsciiParamæøåÆØÅöôêÊ': data.nonAsciiParamæøåÆøÅöôêÊ
            }
        });
    }
    
    /**
     * Login User
     * @param data The data for the request.
     * @param data.formData
     * @throws ApiError
     */
    public putWithFormUrlEncoded(data: PutWithFormUrlEncodedData): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'PUT',
            url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded'
        });
    }
    
}

@Injectable({
    providedIn: 'root'
})
export class ParametersService {
    constructor(public readonly http: HttpClient) { }
    
    /**
     * @param data The data for the request.
     * @param data.fooParam foo in method
     * @param data.barParam bar in method
     * @param data.xFooBar Parameter with illegal characters
     * @throws ApiError
     */
    public deleteFoo(data: DeleteFooData3): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'DELETE',
            url: '/api/v{api-version}/foo/{foo_param}/bar/{BarParam}',
            path: {
                foo_param: data.fooParam,
                BarParam: data.barParam
            },
            headers: {
                'x-Foo-Bar': data.xFooBar
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parameterHeader This is the parameter that goes into the header
     * @param data.fooAllOfEnum
     * @param data.cursor This is the parameter that goes into the query params
     * @param data.parameterCookie This is the parameter that goes into the cookie
     * @param data.parameterPath This is the parameter that goes into the path
     * @param data.requestBody This is the parameter that goes into the body
     * @param data.fooRefEnum
     * @throws ApiError
     */
    public callWithParameters(data: CallWithParametersData): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameterPath}',
            path: {
                parameterPath: data.parameterPath
            },
            cookies: {
                parameterCookie: data.parameterCookie
            },
            headers: {
                parameterHeader: data.parameterHeader
            },
            query: {
                foo_ref_enum: data.fooRefEnum,
                foo_all_of_enum: data.fooAllOfEnum,
                cursor: data.cursor
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parameterHeader This is the parameter that goes into the request header
     * @param data.parameterQuery This is the parameter that goes into the request query params
     * @param data.parameterCookie This is the parameter that goes into the cookie
     * @param data.requestBody This is the parameter that goes into the body
     * @param data.parameterPath1 This is the parameter that goes into the path
     * @param data.parameterPath2 This is the parameter that goes into the path
     * @param data.parameterPath3 This is the parameter that goes into the path
     * @param data._default This is the parameter with a reserved keyword
     * @throws ApiError
     */
    public callWithWeirdParameterNames(data: CallWithWeirdParameterNamesData): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
            path: {
                'parameter.path.1': data.parameterPath1,
                'parameter-path-2': data.parameterPath2,
                'PARAMETER-PATH-3': data.parameterPath3
            },
            cookies: {
                'PARAMETER-COOKIE': data.parameterCookie
            },
            headers: {
                'parameter.header': data.parameterHeader
            },
            query: {
                default: data._default,
                'parameter-query': data.parameterQuery
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody This is a required parameter
     * @param data.page This is an optional parameter
     * @throws ApiError
     */
    public getCallWithOptionalParam(data: GetCallWithOptionalParamData): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/parameters/',
            query: {
                page: data.page
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parameter This is a required parameter
     * @param data.requestBody This is an optional parameter
     * @returns number Response is a simple number
     * @returns void Success
     * @throws ApiError
     */
    public postCallWithOptionalParam(data: PostCallWithOptionalParamData): Observable<PostCallWithOptionalParamResponse> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/parameters/',
            query: {
                parameter: data.parameter
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

@Injectable({
    providedIn: 'root'
})
export class RequestBodyService {
    constructor(public readonly http: HttpClient) { }
    
    /**
     * @param data The data for the request.
     * @param data.parameter This is a reusable parameter
     * @param data.foo A reusable request body
     * @throws ApiError
     */
    public postApiRequestBody(data: PostApiRequestBodyData = {}): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/requestBody/',
            query: {
                parameter: data.parameter
            },
            body: data.foo,
            mediaType: 'application/json'
        });
    }
    
}

@Injectable({
    providedIn: 'root'
})
export class ResponseService {
    constructor(public readonly http: HttpClient) { }
    
    /**
     * @returns number Response is a simple number
     * @returns void Success
     * @throws ApiError
     */
    public callWithResponseAndNoContentResponse(): Observable<CallWithResponseAndNoContentResponseResponse> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/response-and-no-content'
        });
    }
    
    /**
     * @returns import
     * @throws ApiError
     */
    public callWithResponse(): Observable<CallWithResponseResponse> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/response'
        });
    }
    
    /**
     * @returns unknown Message for 200 response
     * @returns ModelWithString Message for 201 response
     * @returns ModelWithString Message for 202 response
     * @throws ApiError
     */
    public callWithDuplicateResponses(): Observable<CallWithDuplicateResponsesResponse> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/response',
            errors: {
                500: 'Message for 500 error',
                501: 'Message for 501 error',
                502: 'Message for 502 error',
                '4XX': 'Message for 4XX errors',
                default: 'Default error response'
            }
        });
    }
    
    /**
     * @returns unknown Message for 200 response
     * @returns ModelThatExtends Message for 201 response
     * @returns ModelThatExtendsExtends Message for 202 response
     * @throws ApiError
     */
    public callWithResponses(): Observable<CallWithResponsesResponse> {
        return __request(OpenAPI, this.http, {
            method: 'PUT',
            url: '/api/v{api-version}/response',
            errors: {
                500: 'Message for 500 error',
                501: 'Message for 501 error',
                502: 'Message for 502 error',
                default: 'Message for default response'
            }
        });
    }
    
}

@Injectable({
    providedIn: 'root'
})
export class SimpleService {
    constructor(public readonly http: HttpClient) { }
    
    /**
     * @returns Model_From_Zendesk Success
     * @throws ApiError
     */
    public apiVVersionODataControllerCount(): Observable<ApiVVersionODataControllerCountResponse> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/simple/$count'
        });
    }
    
    /**
     * @throws ApiError
     */
    public getCallWithoutParametersAndResponse(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/simple'
        });
    }
    
    /**
     * @throws ApiError
     */
    public putCallWithoutParametersAndResponse(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'PUT',
            url: '/api/v{api-version}/simple'
        });
    }
    
    /**
     * @throws ApiError
     */
    public postCallWithoutParametersAndResponse(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/simple'
        });
    }
    
    /**
     * @throws ApiError
     */
    public deleteCallWithoutParametersAndResponse(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'DELETE',
            url: '/api/v{api-version}/simple'
        });
    }
    
    /**
     * @throws ApiError
     */
    public optionsCallWithoutParametersAndResponse(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'OPTIONS',
            url: '/api/v{api-version}/simple'
        });
    }
    
    /**
     * @throws ApiError
     */
    public headCallWithoutParametersAndResponse(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'HEAD',
            url: '/api/v{api-version}/simple'
        });
    }
    
    /**
     * @throws ApiError
     */
    public patchCallWithoutParametersAndResponse(): Observable<void> {
        return __request(OpenAPI, this.http, {
            method: 'PATCH',
            url: '/api/v{api-version}/simple'
        });
    }
    
}

@Injectable({
    providedIn: 'root'
})
export class TypesService {
    constructor(public readonly http: HttpClient) { }
    
    /**
     * @param data The data for the request.
     * @param data.parameterArray This is an array parameter
     * @param data.parameterDictionary This is a dictionary parameter
     * @param data.parameterEnum This is an enum parameter
     * @param data.parameterTuple This is tuple parameter
     * @param data.parameterNumber This is a number parameter
     * @param data.parameterString This is a string parameter
     * @param data.parameterBoolean This is a boolean parameter
     * @param data.parameterObject This is an object parameter
     * @param data.id This is a number parameter
     * @returns number Response is a simple number
     * @returns string Response is a simple string
     * @returns boolean Response is a simple boolean
     * @returns unknown Response is a simple object
     * @throws ApiError
     */
    public types(data: TypesData): Observable<TypesResponse> {
        return __request(OpenAPI, this.http, {
            method: 'GET',
            url: '/api/v{api-version}/types',
            path: {
                id: data.id
            },
            query: {
                parameterNumber: data.parameterNumber,
                parameterString: data.parameterString,
                parameterBoolean: data.parameterBoolean,
                parameterObject: data.parameterObject,
                parameterArray: data.parameterArray,
                parameterDictionary: data.parameterDictionary,
                parameterEnum: data.parameterEnum,
                parameterTuple: data.parameterTuple
            }
        });
    }
    
}

@Injectable({
    providedIn: 'root'
})
export class UploadService {
    constructor(public readonly http: HttpClient) { }
    
    /**
     * @param data The data for the request.
     * @param data.formData
     * @returns boolean
     * @throws ApiError
     */
    public uploadFile(data: UploadFileData): Observable<UploadFileResponse> {
        return __request(OpenAPI, this.http, {
            method: 'POST',
            url: '/api/v{api-version}/upload',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded'
        });
    }
    
}