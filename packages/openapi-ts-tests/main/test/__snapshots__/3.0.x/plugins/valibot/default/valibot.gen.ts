// This file is auto-generated by @hey-api/openapi-ts

import * as v from 'valibot';

/**
 * Model with number-only name
 */
export const v400 = v.string();

export const vExternalSharedExternalSharedModel = v.object({
    id: v.string(),
    name: v.optional(v.string())
});

export const vExternalRefA = vExternalSharedExternalSharedModel;

export const vExternalRefB = vExternalSharedExternalSharedModel;

/**
 * Testing multiline comments in string: First line
 * Second line
 *
 * Fourth line
 */
export const vCamelCaseCommentWithBreaks = v.pipe(v.number(), v.integer());

/**
 * Testing multiline comments in string: First line
 * Second line
 *
 * Fourth line
 */
export const vCommentWithBreaks = v.pipe(v.number(), v.integer());

/**
 * Testing backticks in string: `backticks` and ```multiple backticks``` should work
 */
export const vCommentWithBackticks = v.pipe(v.number(), v.integer());

/**
 * Testing backticks and quotes in string: `backticks`, 'quotes', "double quotes" and ```multiple backticks``` should work
 */
export const vCommentWithBackticksAndQuotes = v.pipe(v.number(), v.integer());

/**
 * Testing slashes in string: \backwards\\\ and /forwards/// should work
 */
export const vCommentWithSlashes = v.pipe(v.number(), v.integer());

/**
 * Testing expression placeholders in string: ${expression} should work
 */
export const vCommentWithExpressionPlaceholders = v.pipe(v.number(), v.integer());

/**
 * Testing quotes in string: 'single quote''' and "double quotes""" should work
 */
export const vCommentWithQuotes = v.pipe(v.number(), v.integer());

/**
 * Testing reserved characters in string: * inline * and ** inline ** should work
 */
export const vCommentWithReservedCharacters = v.pipe(v.number(), v.integer());

/**
 * This is a simple number
 */
export const vSimpleInteger = v.pipe(v.number(), v.integer());

/**
 * This is a simple boolean
 */
export const vSimpleBoolean = v.boolean();

/**
 * This is a simple string
 */
export const vSimpleString = v.string();

/**
 * A string with non-ascii (unicode) characters valid in typescript identifiers (æøåÆØÅöÔèÈ字符串)
 */
export const vNonAsciiStringæøåÆøÅöôêÊ字符串 = v.string();

/**
 * This is a simple file
 */
export const vSimpleFile = v.string();

/**
 * This is a model with one string property
 */
export const vModelWithString = v.object({
    prop: v.optional(v.string())
});

/**
 * This is a simple reference
 */
export const vSimpleReference = vModelWithString;

/**
 * This is a simple string
 */
export const vSimpleStringWithPattern = v.union([
    v.pipe(v.string(), v.maxLength(64), v.regex(/^[a-zA-Z0-9_]*$/)),
    v.null()
]);

/**
 * This is a simple enum with strings
 */
export const vEnumWithStrings = v.picklist([
    'Success',
    'Warning',
    'Error',
    "'Single Quote'",
    '"Double Quotes"',
    'Non-ascii: øæåôöØÆÅÔÖ字符串'
]);

export const vEnumWithReplacedCharacters = v.picklist([
    "'Single Quote'",
    '"Double Quotes"',
    'øæåôöØÆÅÔÖ字符串',
    ''
]);

/**
 * This is a simple enum with numbers
 */
export const vEnumWithNumbers = v.unknown();

/**
 * Success=1,Warning=2,Error=3
 */
export const vEnumFromDescription = v.number();

/**
 * This is a simple enum with numbers
 */
export const vEnumWithExtensions = v.unknown();

export const vEnumWithXEnumNames = v.unknown();

/**
 * This is a simple array with numbers
 */
export const vArrayWithNumbers = v.array(v.pipe(v.number(), v.integer()));

/**
 * This is a simple array with booleans
 */
export const vArrayWithBooleans = v.array(v.boolean());

/**
 * This is a simple array with strings
 */
export const vArrayWithStrings = v.optional(v.array(v.string()), ['test']);

/**
 * This is a simple array with references
 */
export const vArrayWithReferences = v.array(vModelWithString);

/**
 * This is a simple array containing an array
 */
export const vArrayWithArray = v.array(v.array(vModelWithString));

/**
 * This is a simple array with properties
 */
export const vArrayWithProperties = v.array(v.object({
    '16x16': v.optional(vCamelCaseCommentWithBreaks),
    bar: v.optional(v.string())
}));

/**
 * This is a simple array with any of properties
 */
export const vArrayWithAnyOfProperties = v.array(v.unknown());

export const vAnyOfAnyAndNull = v.object({
    data: v.optional(v.unknown())
});

/**
 * This is a simple array with any of properties
 */
export const vAnyOfArrays = v.object({
    results: v.optional(v.array(v.unknown()))
});

/**
 * This is a string dictionary
 */
export const vDictionaryWithString = v.object({});

export const vDictionaryWithPropertiesAndAdditionalProperties = v.object({
    foo: v.optional(v.number()),
    bar: v.optional(v.boolean())
});

/**
 * This is a string reference
 */
export const vDictionaryWithReference = v.object({});

/**
 * This is a complex dictionary
 */
export const vDictionaryWithArray = v.object({});

/**
 * This is a string dictionary
 */
export const vDictionaryWithDictionary = v.record(v.string(), v.object({}));

/**
 * This is a complex dictionary
 */
export const vDictionaryWithProperties = v.record(v.string(), v.object({
    foo: v.optional(v.string()),
    bar: v.optional(v.string())
}));

/**
 * This is a model with one number property
 */
export const vModelWithInteger = v.object({
    prop: v.optional(v.pipe(v.number(), v.integer()))
});

/**
 * This is a model with one boolean property
 */
export const vModelWithBoolean = v.object({
    prop: v.optional(v.boolean())
});

/**
 * This is a model with one string property
 */
export const vModelWithStringError = v.object({
    prop: v.optional(v.string())
});

/**
 * `Comment` or `VoiceComment`. The JSON object for adding voice comments to tickets is different. See [Adding voice comments to tickets](/documentation/ticketing/managing-tickets/adding-voice-comments-to-tickets)
 */
export const vModelFromZendesk = v.string();

/**
 * This is a model with one string property
 */
export const vModelWithNullableString = v.object({
    nullableProp1: v.optional(v.union([
        v.string(),
        v.null()
    ])),
    nullableRequiredProp1: v.union([
        v.string(),
        v.null()
    ]),
    nullableProp2: v.optional(v.union([
        v.string(),
        v.null()
    ])),
    nullableRequiredProp2: v.union([
        v.string(),
        v.null()
    ]),
    'foo_bar-enum': v.optional(v.picklist([
        'Success',
        'Warning',
        'Error',
        'ØÆÅ字符串'
    ]))
});

/**
 * This is a model with one enum
 */
export const vModelWithEnum = v.object({
    'foo_bar-enum': v.optional(v.picklist([
        'Success',
        'Warning',
        'Error',
        'ØÆÅ字符串'
    ])),
    statusCode: v.optional(v.picklist([
        '100',
        '200 FOO',
        '300 FOO_BAR',
        '400 foo-bar',
        '500 foo.bar',
        '600 foo&bar'
    ])),
    bool: v.optional(v.unknown())
});

/**
 * This is a model with one enum with escaped name
 */
export const vModelWithEnumWithHyphen = v.object({
    'foo-bar-baz-qux': v.optional(v.picklist([
        '3.0'
    ]))
});

/**
 * This is a model with one enum
 */
export const vModelWithEnumFromDescription = v.object({
    test: v.optional(v.pipe(v.number(), v.integer()))
});

/**
 * This is a model with nested enums
 */
export const vModelWithNestedEnums = v.object({
    dictionaryWithEnum: v.optional(v.object({})),
    dictionaryWithEnumFromDescription: v.optional(v.object({})),
    arrayWithEnum: v.optional(v.array(v.picklist([
        'Success',
        'Warning',
        'Error'
    ]))),
    arrayWithDescription: v.optional(v.array(v.pipe(v.number(), v.integer()))),
    'foo_bar-enum': v.optional(v.picklist([
        'Success',
        'Warning',
        'Error',
        'ØÆÅ字符串'
    ]))
});

/**
 * This is a model with one nested property
 */
export const vModelWithProperties = v.object({
    required: v.string(),
    requiredAndReadOnly: v.pipe(v.string(), v.readonly()),
    requiredAndNullable: v.union([
        v.string(),
        v.null()
    ]),
    string: v.optional(v.string()),
    number: v.optional(v.number()),
    boolean: v.optional(v.boolean()),
    reference: v.optional(vModelWithString),
    'property with space': v.optional(v.string()),
    default: v.optional(v.string()),
    try: v.optional(v.string()),
    '@namespace.string': v.optional(v.pipe(v.string(), v.readonly())),
    '@namespace.integer': v.optional(v.pipe(v.pipe(v.number(), v.integer()), v.readonly()))
});

/**
 * This is a model with one property containing a reference
 */
export const vModelWithReference = v.object({
    prop: v.optional(vModelWithProperties)
});

export const vModelWithReadOnlyAndWriteOnly = v.object({
    foo: v.string(),
    bar: v.pipe(v.string(), v.readonly())
});

/**
 * This is a model with one property containing an array
 */
export const vModelWithArrayReadOnlyAndWriteOnly = v.object({
    prop: v.optional(v.array(vModelWithReadOnlyAndWriteOnly)),
    propWithFile: v.optional(v.array(v.string())),
    propWithNumber: v.optional(v.array(v.number()))
});

/**
 * This is a model with one property containing an array
 */
export const vModelWithArray = v.object({
    prop: v.optional(v.array(vModelWithString)),
    propWithFile: v.optional(v.array(v.string())),
    propWithNumber: v.optional(v.array(v.number()))
});

/**
 * This is a model with one property containing a dictionary
 */
export const vModelWithDictionary = v.object({
    prop: v.optional(v.object({}))
});

/**
 * This is a deprecated model with a deprecated property
 *
 * @deprecated
 */
export const vDeprecatedModel = v.object({
    prop: v.optional(v.string())
});

/**
 * This is a model with one property containing a circular reference
 */
export const vModelWithCircularReference: v.GenericSchema = v.object({
    prop: v.optional(v.lazy(() => {
        return vModelWithCircularReference;
    }))
});

/**
 * This is a model with one property with a 'one of' relationship
 */
export const vCompositionWithOneOf = v.object({
    propA: v.optional(v.union([
        vModelWithString,
        vModelWithEnum,
        vModelWithArray,
        vModelWithDictionary
    ]))
});

/**
 * This is a model with one property with a 'one of' relationship where the options are not $ref
 */
export const vCompositionWithOneOfAnonymous = v.object({
    propA: v.optional(v.union([
        v.object({
            propA: v.optional(v.string())
        }),
        v.string(),
        v.pipe(v.number(), v.integer())
    ]))
});

/**
 * Circle
 */
export const vModelCircle = v.object({
    kind: v.string(),
    radius: v.optional(v.number())
});

/**
 * Square
 */
export const vModelSquare = v.object({
    kind: v.string(),
    sideLength: v.optional(v.number())
});

/**
 * This is a model with one property with a 'one of' relationship where the options are not $ref
 */
export const vCompositionWithOneOfDiscriminator = v.union([
    v.intersect([
        v.object({
            kind: v.literal('circle')
        }),
        vModelCircle
    ]),
    v.intersect([
        v.object({
            kind: v.literal('square')
        }),
        vModelSquare
    ])
]);

/**
 * This is a model with one property with a 'any of' relationship
 */
export const vCompositionWithAnyOf = v.object({
    propA: v.optional(v.union([
        vModelWithString,
        vModelWithEnum,
        vModelWithArray,
        vModelWithDictionary
    ]))
});

/**
 * This is a model with one property with a 'any of' relationship where the options are not $ref
 */
export const vCompositionWithAnyOfAnonymous = v.object({
    propA: v.optional(v.union([
        v.object({
            propA: v.optional(v.string())
        }),
        v.string(),
        v.pipe(v.number(), v.integer())
    ]))
});

/**
 * This is a model with nested 'any of' property with a type null
 */
export const vCompositionWithNestedAnyAndTypeNull = v.object({
    propA: v.optional(v.union([
        v.array(v.union([
            vModelWithDictionary,
            v.null()
        ])),
        v.array(v.union([
            vModelWithArray,
            v.null()
        ]))
    ]))
});

export const v3eNum1Период = v.picklist([
    'Bird',
    'Dog'
]);

export const vConstValue = v.picklist([
    'ConstValue'
]);

/**
 * This is a model with one property with a 'any of' relationship where the options are not $ref
 */
export const vCompositionWithNestedAnyOfAndNull = v.object({
    propA: v.optional(v.union([
        v.array(v.unknown()),
        v.null()
    ]))
});

/**
 * This is a model with one property with a 'one of' relationship
 */
export const vCompositionWithOneOfAndNullable = v.object({
    propA: v.optional(v.union([
        v.object({
            boolean: v.optional(v.boolean())
        }),
        vModelWithEnum,
        vModelWithArray,
        vModelWithDictionary,
        v.null()
    ]))
});

/**
 * This is a model that contains a simple dictionary within composition
 */
export const vCompositionWithOneOfAndSimpleDictionary = v.object({
    propA: v.optional(v.union([
        v.boolean(),
        v.object({})
    ]))
});

/**
 * This is a model that contains a dictionary of simple arrays within composition
 */
export const vCompositionWithOneOfAndSimpleArrayDictionary = v.object({
    propA: v.optional(v.union([
        v.boolean(),
        v.object({})
    ]))
});

/**
 * This is a model that contains a dictionary of complex arrays (composited) within composition
 */
export const vCompositionWithOneOfAndComplexArrayDictionary = v.object({
    propA: v.optional(v.union([
        v.boolean(),
        v.object({})
    ]))
});

/**
 * This is a model with one property with a 'all of' relationship
 */
export const vCompositionWithAllOfAndNullable = v.object({
    propA: v.optional(v.union([
        v.intersect([
            v.object({
                boolean: v.optional(v.boolean())
            }),
            vModelWithEnum,
            vModelWithArray,
            vModelWithDictionary
        ]),
        v.null()
    ]))
});

/**
 * This is a model with one property with a 'any of' relationship
 */
export const vCompositionWithAnyOfAndNullable = v.object({
    propA: v.optional(v.union([
        v.object({
            boolean: v.optional(v.boolean())
        }),
        vModelWithEnum,
        vModelWithArray,
        vModelWithDictionary,
        v.null()
    ]))
});

/**
 * This is a base model with two simple optional properties
 */
export const vCompositionBaseModel = v.object({
    firstName: v.optional(v.string()),
    lastname: v.optional(v.string())
});

/**
 * This is a model that extends the base model
 */
export const vCompositionExtendedModel = v.intersect([
    vCompositionBaseModel,
    v.object({
        age: v.number(),
        firstName: v.string(),
        lastname: v.string()
    })
]);

/**
 * This is a model with one nested property
 */
export const vModelWithNestedProperties = v.object({
    first: v.pipe(v.union([
        v.pipe(v.object({
            second: v.pipe(v.union([
                v.pipe(v.object({
                    third: v.pipe(v.union([
                        v.pipe(v.string(), v.readonly()),
                        v.null()
                    ]), v.readonly())
                }), v.readonly()),
                v.null()
            ]), v.readonly())
        }), v.readonly()),
        v.null()
    ]), v.readonly())
});

/**
 * This is a model with duplicated properties
 */
export const vModelWithDuplicateProperties = v.object({
    prop: v.optional(vModelWithString)
});

/**
 * This is a model with ordered properties
 */
export const vModelWithOrderedProperties = v.object({
    zebra: v.optional(v.string()),
    apple: v.optional(v.string()),
    hawaii: v.optional(v.string())
});

/**
 * This is a model with duplicated imports
 */
export const vModelWithDuplicateImports = v.object({
    propA: v.optional(vModelWithString),
    propB: v.optional(vModelWithString),
    propC: v.optional(vModelWithString)
});

/**
 * This is a model that extends another model
 */
export const vModelThatExtends = v.intersect([
    vModelWithString,
    v.object({
        propExtendsA: v.optional(v.string()),
        propExtendsB: v.optional(vModelWithString)
    })
]);

/**
 * This is a model that extends another model
 */
export const vModelThatExtendsExtends = v.intersect([
    vModelWithString,
    vModelThatExtends,
    v.object({
        propExtendsC: v.optional(v.string()),
        propExtendsD: v.optional(vModelWithString)
    })
]);

/**
 * This is a model that contains a some patterns
 */
export const vModelWithPattern = v.object({
    key: v.pipe(v.string(), v.maxLength(64), v.regex(/^[a-zA-Z0-9_]*$/)),
    name: v.pipe(v.string(), v.maxLength(255)),
    enabled: v.optional(v.pipe(v.boolean(), v.readonly())),
    modified: v.optional(v.pipe(v.pipe(v.string(), v.isoTimestamp()), v.readonly())),
    id: v.optional(v.pipe(v.string(), v.regex(/^\\d{2}-\\d{3}-\\d{4}$/))),
    text: v.optional(v.pipe(v.string(), v.regex(/^\\w+$/))),
    patternWithSingleQuotes: v.optional(v.pipe(v.string(), v.regex(/^[a-zA-Z0-9\']*$/))),
    patternWithNewline: v.optional(v.pipe(v.string(), v.regex(/aaa\\nbbb/))),
    patternWithBacktick: v.optional(v.pipe(v.string(), v.regex(/aaa`bbb/)))
});

export const vFile = v.object({
    id: v.optional(v.pipe(v.pipe(v.string(), v.minLength(1)), v.readonly())),
    updated_at: v.optional(v.pipe(v.pipe(v.string(), v.isoTimestamp()), v.readonly())),
    created_at: v.optional(v.pipe(v.pipe(v.string(), v.isoTimestamp()), v.readonly())),
    mime: v.pipe(v.string(), v.minLength(1), v.maxLength(24)),
    file: v.optional(v.pipe(v.pipe(v.string(), v.url()), v.readonly()))
});

export const vDefault = v.object({
    name: v.optional(v.string())
});

export const vPageable = v.object({
    page: v.optional(v.pipe(v.number(), v.integer(), v.minValue(-2147483648, 'Invalid value: Expected int32 to be >= -2^31'), v.maxValue(2147483647, 'Invalid value: Expected int32 to be <= 2^31-1'), v.minValue(0)), 0),
    size: v.optional(v.pipe(v.number(), v.integer(), v.minValue(-2147483648, 'Invalid value: Expected int32 to be >= -2^31'), v.maxValue(2147483647, 'Invalid value: Expected int32 to be <= 2^31-1'), v.minValue(1))),
    sort: v.optional(v.array(v.string()))
});

/**
 * This is a free-form object without additionalProperties.
 */
export const vFreeFormObjectWithoutAdditionalProperties = v.object({});

/**
 * This is a free-form object with additionalProperties: true.
 */
export const vFreeFormObjectWithAdditionalPropertiesEqTrue = v.object({});

/**
 * This is a free-form object with additionalProperties: {}.
 */
export const vFreeFormObjectWithAdditionalPropertiesEqEmptyObject = v.object({});

export const vModelWithConst = v.object({
    String: v.optional(v.picklist([
        'String'
    ])),
    number: v.optional(v.unknown()),
    null: v.optional(v.unknown()),
    withType: v.optional(v.picklist([
        'Some string'
    ]))
});

/**
 * This is a model with one property and additionalProperties: true
 */
export const vModelWithAdditionalPropertiesEqTrue = v.object({
    prop: v.optional(v.string())
});

export const vNestedAnyOfArraysNullable = v.object({
    nullableArray: v.optional(v.union([
        v.array(v.unknown()),
        v.null()
    ]))
});

/**
 * This is a reusable parameter
 */
export const vSimpleParameter = v.unknown();

export const vCompositionWithOneOfAndProperties = v.intersect([
    v.union([
        v.object({
            foo: vSimpleParameter
        }),
        v.object({
            bar: vNonAsciiStringæøåÆøÅöôêÊ字符串
        })
    ]),
    v.object({
        baz: v.union([
            v.pipe(v.number(), v.integer(), v.minValue(0, 'Invalid value: Expected uint16 to be >= 0'), v.maxValue(65535, 'Invalid value: Expected uint16 to be <= 2^16-1'), v.minValue(0)),
            v.null()
        ]),
        qux: v.pipe(v.number(), v.integer(), v.minValue(0, 'Invalid value: Expected uint8 to be >= 0'), v.maxValue(255, 'Invalid value: Expected uint8 to be <= 2^8-1'), v.minValue(0))
    })
]);

/**
 * An object that can be null
 */
export const vNullableObject = v.optional(v.union([
    v.object({
        foo: v.optional(v.string())
    }),
    v.null()
]), null);

/**
 * Some % character
 */
export const vCharactersInDescription = v.string();

export const vModelWithNullableObject = v.object({
    data: v.optional(vNullableObject)
});

export const vModelWithOneOfEnum = v.union([
    v.object({
        foo: v.picklist([
            'Bar'
        ])
    }),
    v.object({
        foo: v.picklist([
            'Baz'
        ])
    }),
    v.object({
        foo: v.picklist([
            'Qux'
        ])
    }),
    v.object({
        content: v.pipe(v.string(), v.isoTimestamp()),
        foo: v.picklist([
            'Quux'
        ])
    }),
    v.object({
        content: v.tuple([
            v.pipe(v.string(), v.isoTimestamp()),
            v.pipe(v.string(), v.isoTimestamp())
        ]),
        foo: v.picklist([
            'Corge'
        ])
    })
]);

export const vModelWithNestedArrayEnumsDataFoo = v.picklist([
    'foo',
    'bar'
]);

export const vModelWithNestedArrayEnumsDataBar = v.picklist([
    'baz',
    'qux'
]);

export const vModelWithNestedArrayEnumsData = v.object({
    foo: v.optional(v.array(vModelWithNestedArrayEnumsDataFoo)),
    bar: v.optional(v.array(vModelWithNestedArrayEnumsDataBar))
});

export const vModelWithNestedArrayEnums = v.object({
    array_strings: v.optional(v.array(v.string())),
    data: v.optional(vModelWithNestedArrayEnumsData)
});

export const vModelWithNestedCompositionEnums = v.object({
    foo: v.optional(vModelWithNestedArrayEnumsDataFoo)
});

export const vModelWithConstantSizeArray = v.tuple([
    v.number(),
    v.number()
]);

export const vModelWithAnyOfConstantSizeArray = v.tuple([
    v.union([
        v.number(),
        v.string()
    ]),
    v.union([
        v.number(),
        v.string()
    ]),
    v.union([
        v.number(),
        v.string()
    ])
]);

export const vModelWithPrefixItemsConstantSizeArray = v.array(v.unknown());

export const vModelWithAnyOfConstantSizeArrayNullable = v.tuple([
    v.union([
        v.number(),
        v.null(),
        v.string()
    ]),
    v.union([
        v.number(),
        v.null(),
        v.string()
    ]),
    v.union([
        v.number(),
        v.null(),
        v.string()
    ])
]);

/**
 * Model with restricted keyword name
 */
export const vImport = v.string();

export const vModelWithAnyOfConstantSizeArrayWithNSizeAndOptions = v.tuple([
    v.union([
        v.number(),
        vImport
    ]),
    v.union([
        v.number(),
        vImport
    ])
]);

export const vModelWithAnyOfConstantSizeArrayAndIntersect = v.tuple([
    v.intersect([
        v.number(),
        v.string()
    ]),
    v.intersect([
        v.number(),
        v.string()
    ])
]);

export const vModelWithNumericEnumUnion = v.object({
    value: v.optional(v.unknown())
});

/**
 * Some description with `back ticks`
 */
export const vModelWithBackticksInDescription = v.object({
    template: v.optional(v.string())
});

export const vModelWithOneOfAndProperties = v.intersect([
    v.union([
        vSimpleParameter,
        vNonAsciiStringæøåÆøÅöôêÊ字符串
    ]),
    v.object({
        baz: v.union([
            v.pipe(v.number(), v.integer(), v.minValue(0, 'Invalid value: Expected uint16 to be >= 0'), v.maxValue(65535, 'Invalid value: Expected uint16 to be <= 2^16-1'), v.minValue(0)),
            v.null()
        ]),
        qux: v.pipe(v.number(), v.integer(), v.minValue(0, 'Invalid value: Expected uint8 to be >= 0'), v.maxValue(255, 'Invalid value: Expected uint8 to be <= 2^8-1'), v.minValue(0))
    })
]);

/**
 * Model used to test deduplication strategy (unused)
 */
export const vParameterSimpleParameterUnused = v.string();

/**
 * Model used to test deduplication strategy
 */
export const vPostServiceWithEmptyTagResponse = v.string();

/**
 * Model used to test deduplication strategy
 */
export const vPostServiceWithEmptyTagResponse2 = v.string();

/**
 * Model used to test deduplication strategy
 */
export const vDeleteFooData = v.string();

/**
 * Model used to test deduplication strategy
 */
export const vDeleteFooData2 = v.string();

export const vSchemaWithFormRestrictedKeys = v.object({
    description: v.optional(v.string()),
    'x-enum-descriptions': v.optional(v.string()),
    'x-enum-varnames': v.optional(v.string()),
    'x-enumNames': v.optional(v.string()),
    title: v.optional(v.string()),
    object: v.optional(v.object({
        description: v.optional(v.string()),
        'x-enum-descriptions': v.optional(v.string()),
        'x-enum-varnames': v.optional(v.string()),
        'x-enumNames': v.optional(v.string()),
        title: v.optional(v.string())
    })),
    array: v.optional(v.array(v.object({
        description: v.optional(v.string()),
        'x-enum-descriptions': v.optional(v.string()),
        'x-enum-varnames': v.optional(v.string()),
        'x-enumNames': v.optional(v.string()),
        title: v.optional(v.string())
    })))
});

/**
 * This schema was giving PascalCase transformations a hard time
 */
export const vIoK8sApimachineryPkgApisMetaV1Preconditions = v.object({
    resourceVersion: v.optional(v.string()),
    uid: v.optional(v.string())
});

/**
 * This schema was giving PascalCase transformations a hard time
 */
export const vIoK8sApimachineryPkgApisMetaV1DeleteOptions = v.object({
    preconditions: v.optional(vIoK8sApimachineryPkgApisMetaV1Preconditions)
});

export const vAdditionalPropertiesUnknownIssue = v.object({});

export const vAdditionalPropertiesUnknownIssue2 = v.object({});

export const vAdditionalPropertiesUnknownIssue3 = v.intersect([
    v.string(),
    v.object({
        entries: v.object({})
    })
]);

export const vAdditionalPropertiesIntegerIssue = v.object({
    value: v.pipe(v.number(), v.integer())
});

export const vGenericSchemaDuplicateIssue1SystemBoolean = v.object({
    item: v.optional(v.boolean()),
    error: v.optional(v.union([
        v.string(),
        v.null()
    ])),
    hasError: v.optional(v.pipe(v.boolean(), v.readonly())),
    data: v.optional(v.object({}))
});

export const vGenericSchemaDuplicateIssue1SystemString = v.object({
    item: v.optional(v.union([
        v.string(),
        v.null()
    ])),
    error: v.optional(v.union([
        v.string(),
        v.null()
    ])),
    hasError: v.optional(v.pipe(v.boolean(), v.readonly()))
});

export const vOneOfAllOfIssue = v.union([
    v.intersect([
        v.union([
            vConstValue,
            vGenericSchemaDuplicateIssue1SystemBoolean
        ]),
        v3eNum1Период
    ]),
    vGenericSchemaDuplicateIssue1SystemString
]);

/**
 * This is a model with one nested property
 */
export const vModelWithPropertiesWritable = v.object({
    required: v.string(),
    requiredAndNullable: v.union([
        v.string(),
        v.null()
    ]),
    string: v.optional(v.string()),
    number: v.optional(v.number()),
    boolean: v.optional(v.boolean()),
    reference: v.optional(vModelWithString),
    'property with space': v.optional(v.string()),
    default: v.optional(v.string()),
    try: v.optional(v.string())
});

/**
 * This is a model that contains a some patterns
 */
export const vModelWithPatternWritable = v.object({
    key: v.pipe(v.string(), v.maxLength(64), v.regex(/^[a-zA-Z0-9_]*$/)),
    name: v.pipe(v.string(), v.maxLength(255)),
    id: v.optional(v.pipe(v.string(), v.regex(/^\\d{2}-\\d{3}-\\d{4}$/))),
    text: v.optional(v.pipe(v.string(), v.regex(/^\\w+$/))),
    patternWithSingleQuotes: v.optional(v.pipe(v.string(), v.regex(/^[a-zA-Z0-9\']*$/))),
    patternWithNewline: v.optional(v.pipe(v.string(), v.regex(/aaa\\nbbb/))),
    patternWithBacktick: v.optional(v.pipe(v.string(), v.regex(/aaa`bbb/)))
});

export const vFileWritable = v.object({
    mime: v.pipe(v.string(), v.minLength(1), v.maxLength(24))
});

export const vModelWithReadOnlyAndWriteOnlyWritable = v.object({
    foo: v.string(),
    baz: v.string()
});

export const vAdditionalPropertiesUnknownIssueWritable = v.object({});

export const vGenericSchemaDuplicateIssue1SystemBooleanWritable = v.object({
    item: v.optional(v.boolean()),
    error: v.optional(v.union([
        v.string(),
        v.null()
    ])),
    data: v.optional(v.object({}))
});

export const vGenericSchemaDuplicateIssue1SystemStringWritable = v.object({
    item: v.optional(v.union([
        v.string(),
        v.null()
    ])),
    error: v.optional(v.union([
        v.string(),
        v.null()
    ]))
});

/**
 * Parameter with illegal characters
 */
export const vXFooBar = vModelWithString;

export const vSimpleRequestBody = vModelWithString;

export const vSimpleFormData = vModelWithString;

export const vExportData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vPatchApiVbyApiVersionNoTagData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vImportData = v.object({
    body: v.union([
        vModelWithReadOnlyAndWriteOnlyWritable,
        vModelWithArrayReadOnlyAndWriteOnly
    ]),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vImportResponse = v.union([
    vModelFromZendesk,
    vModelWithReadOnlyAndWriteOnly
]);

export const vFooWowData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vApiVVersionODataControllerCountData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

/**
 * Success
 */
export const vApiVVersionODataControllerCountResponse = vModelFromZendesk;

export const vGetApiVbyApiVersionSimpleOperationData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        foo_param: v.string()
    }),
    query: v.optional(v.never())
});

/**
 * Response is a simple number
 */
export const vGetApiVbyApiVersionSimpleOperationResponse = v.number();

export const vDeleteCallWithoutParametersAndResponseData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vGetCallWithoutParametersAndResponseData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vHeadCallWithoutParametersAndResponseData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vOptionsCallWithoutParametersAndResponseData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vPatchCallWithoutParametersAndResponseData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vPostCallWithoutParametersAndResponseData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vPutCallWithoutParametersAndResponseData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vDeleteFooData3 = v.object({
    body: v.optional(v.never()),
    path: v.object({
        foo_param: v.string(),
        BarParam: v.string()
    }),
    query: v.optional(v.never()),
    headers: v.object({
        'x-Foo-Bar': vModelWithString
    })
});

export const vCallWithDescriptionsData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.object({
        parameterWithBreaks: v.optional(v.string()),
        parameterWithBackticks: v.optional(v.string()),
        parameterWithSlashes: v.optional(v.string()),
        parameterWithExpressionPlaceholders: v.optional(v.string()),
        parameterWithQuotes: v.optional(v.string()),
        parameterWithReservedCharacters: v.optional(v.string())
    }))
});

export const vDeprecatedCallData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never()),
    headers: v.object({
        parameter: v.union([
            vDeprecatedModel,
            v.null()
        ])
    })
});

export const vCallWithParametersData = v.object({
    body: v.union([
        v.object({}),
        v.null()
    ]),
    path: v.object({
        parameterPath: v.union([
            v.string(),
            v.null()
        ]),
        'api-version': v.union([
            v.string(),
            v.null()
        ])
    }),
    query: v.object({
        foo_ref_enum: v.optional(vModelWithNestedArrayEnumsDataFoo),
        foo_all_of_enum: vModelWithNestedArrayEnumsDataFoo,
        cursor: v.union([
            v.string(),
            v.null()
        ])
    }),
    headers: v.object({
        parameterHeader: v.union([
            v.string(),
            v.null()
        ])
    })
});

export const vCallWithWeirdParameterNamesData = v.object({
    body: v.union([
        vModelWithString,
        v.null()
    ]),
    path: v.object({
        'parameter.path.1': v.optional(v.string()),
        'parameter-path-2': v.optional(v.string()),
        'PARAMETER-PATH-3': v.optional(v.string()),
        'api-version': v.union([
            v.string(),
            v.null()
        ])
    }),
    query: v.object({
        default: v.optional(v.string()),
        'parameter-query': v.union([
            v.string(),
            v.null()
        ])
    }),
    headers: v.object({
        'parameter.header': v.union([
            v.string(),
            v.null()
        ])
    })
});

export const vGetCallWithOptionalParamData = v.object({
    body: vModelWithOneOfEnum,
    path: v.optional(v.never()),
    query: v.optional(v.object({
        page: v.optional(v.number())
    }))
});

export const vPostCallWithOptionalParamData = v.object({
    body: v.optional(v.object({
        offset: v.optional(v.union([
            v.number(),
            v.null()
        ]))
    })),
    path: v.optional(v.never()),
    query: v.object({
        parameter: vPageable
    })
});

export const vPostCallWithOptionalParamResponse = v.union([
    v.number(),
    v.void()
]);

export const vPostApiVbyApiVersionRequestBodyData = v.object({
    body: v.optional(vSimpleRequestBody),
    path: v.optional(v.never()),
    query: v.optional(v.object({
        parameter: v.optional(v.string())
    }))
});

export const vPostApiVbyApiVersionFormDataData = v.object({
    body: v.optional(vSimpleFormData),
    path: v.optional(v.never()),
    query: v.optional(v.object({
        parameter: v.optional(v.string())
    }))
});

export const vCallWithDefaultParametersData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.object({
        parameterString: v.optional(v.union([
            v.optional(v.string(), 'Hello World!'),
            v.null()
        ]), 'Hello World!'),
        parameterNumber: v.optional(v.union([
            v.optional(v.number(), 123),
            v.null()
        ]), 123),
        parameterBoolean: v.optional(v.union([
            v.optional(v.boolean(), true),
            v.null()
        ]), true),
        parameterEnum: v.optional(v.picklist([
            'Success',
            'Warning',
            'Error'
        ])),
        parameterModel: v.optional(v.union([
            vModelWithString,
            v.null()
        ]))
    }))
});

export const vCallWithDefaultOptionalParametersData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.object({
        parameterString: v.optional(v.string(), 'Hello World!'),
        parameterNumber: v.optional(v.number(), 123),
        parameterBoolean: v.optional(v.boolean(), true),
        parameterEnum: v.optional(v.picklist([
            'Success',
            'Warning',
            'Error'
        ])),
        parameterModel: v.optional(vModelWithString)
    }))
});

export const vCallToTestOrderOfParamsData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.object({
        parameterOptionalStringWithDefault: v.optional(v.string(), 'Hello World!'),
        parameterOptionalStringWithEmptyDefault: v.optional(v.string(), ''),
        parameterOptionalStringWithNoDefault: v.optional(v.string()),
        parameterStringWithDefault: v.optional(v.string(), 'Hello World!'),
        parameterStringWithEmptyDefault: v.optional(v.string(), ''),
        parameterStringWithNoDefault: v.string(),
        parameterStringNullableWithNoDefault: v.optional(v.union([
            v.string(),
            v.null()
        ])),
        parameterStringNullableWithDefault: v.optional(v.union([
            v.string(),
            v.null()
        ]), null)
    })
});

export const vDuplicateNameData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vDuplicateName2Data = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vDuplicateName3Data = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vDuplicateName4Data = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vCallWithNoContentResponseData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

/**
 * Success
 */
export const vCallWithNoContentResponseResponse = v.void();

export const vCallWithResponseAndNoContentResponseData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vCallWithResponseAndNoContentResponseResponse = v.union([
    v.number(),
    v.void()
]);

export const vDummyAData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vDummyAResponse = v400;

export const vDummyBData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

/**
 * Success
 */
export const vDummyBResponse = v.void();

export const vCallWithResponseData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vCallWithResponseResponse = vImport;

export const vCallWithDuplicateResponsesData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vCallWithDuplicateResponsesResponse = v.union([
    v.intersect([
        vModelWithBoolean,
        vModelWithInteger
    ]),
    vModelWithString
]);

export const vCallWithResponsesData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vCallWithResponsesResponse = v.union([
    v.object({
        '@namespace.string': v.optional(v.pipe(v.string(), v.readonly())),
        '@namespace.integer': v.optional(v.pipe(v.pipe(v.number(), v.integer()), v.readonly())),
        value: v.optional(v.pipe(v.array(vModelWithString), v.readonly()))
    }),
    vModelThatExtends,
    vModelThatExtendsExtends
]);

export const vCollectionFormatData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.object({
        parameterArrayCSV: v.union([
            v.array(v.string()),
            v.null()
        ]),
        parameterArraySSV: v.union([
            v.array(v.string()),
            v.null()
        ]),
        parameterArrayTSV: v.union([
            v.array(v.string()),
            v.null()
        ]),
        parameterArrayPipes: v.union([
            v.array(v.string()),
            v.null()
        ]),
        parameterArrayMulti: v.union([
            v.array(v.string()),
            v.null()
        ])
    })
});

export const vTypesData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.object({
        id: v.optional(v.pipe(v.number(), v.integer(), v.minValue(-2147483648, 'Invalid value: Expected int32 to be >= -2^31'), v.maxValue(2147483647, 'Invalid value: Expected int32 to be <= 2^31-1')))
    })),
    query: v.object({
        parameterNumber: v.optional(v.number(), 123),
        parameterString: v.optional(v.union([
            v.optional(v.string(), 'default'),
            v.null()
        ]), 'default'),
        parameterBoolean: v.optional(v.union([
            v.optional(v.boolean(), true),
            v.null()
        ]), true),
        parameterObject: v.optional(v.union([
            v.object({}),
            v.null()
        ]), null),
        parameterArray: v.union([
            v.array(v.string()),
            v.null()
        ]),
        parameterDictionary: v.union([
            v.object({}),
            v.null()
        ]),
        parameterEnum: v.picklist([
            'Success',
            'Warning',
            'Error'
        ])
    })
});

export const vTypesResponse = v.union([
    v.number(),
    v.string(),
    v.boolean(),
    v.object({})
]);

export const vUploadFileData = v.object({
    body: v.string(),
    path: v.object({
        'api-version': v.union([
            v.string(),
            v.null()
        ])
    }),
    query: v.optional(v.never())
});

export const vUploadFileResponse = v.boolean();

export const vFileResponseData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        id: v.string(),
        'api-version': v.string()
    }),
    query: v.optional(v.never())
});

/**
 * Success
 */
export const vFileResponseResponse = v.string();

export const vComplexTypesData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.object({
        parameterObject: v.object({
            first: v.optional(v.object({
                second: v.optional(v.object({
                    third: v.optional(v.string())
                }))
            }))
        }),
        parameterReference: vModelWithString
    })
});

/**
 * Successful response
 */
export const vComplexTypesResponse = v.array(vModelWithString);

export const vMultipartResponseData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vMultipartResponseResponse = v.object({
    file: v.optional(v.string()),
    metadata: v.optional(v.object({
        foo: v.optional(v.string()),
        bar: v.optional(v.string())
    }))
});

export const vMultipartRequestData = v.object({
    body: v.optional(v.object({
        content: v.optional(v.string()),
        data: v.optional(v.union([
            vModelWithString,
            v.null()
        ]))
    })),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vComplexParamsData = v.object({
    body: v.optional(v.object({
        key: v.pipe(v.union([
            v.pipe(v.pipe(v.string(), v.maxLength(64), v.regex(/^[a-zA-Z0-9_]*$/)), v.readonly()),
            v.null()
        ]), v.readonly()),
        name: v.union([
            v.pipe(v.string(), v.maxLength(255)),
            v.null()
        ]),
        enabled: v.optional(v.boolean(), true),
        type: v.picklist([
            'Monkey',
            'Horse',
            'Bird'
        ]),
        listOfModels: v.optional(v.union([
            v.array(vModelWithString),
            v.null()
        ])),
        listOfStrings: v.optional(v.union([
            v.array(v.string()),
            v.null()
        ])),
        parameters: v.union([
            vModelWithString,
            vModelWithEnum,
            vModelWithArray,
            vModelWithDictionary
        ]),
        user: v.optional(v.pipe(v.object({
            id: v.optional(v.pipe(v.pipe(v.number(), v.integer(), v.minValue(-2147483648, 'Invalid value: Expected int32 to be >= -2^31'), v.maxValue(2147483647, 'Invalid value: Expected int32 to be <= 2^31-1')), v.readonly())),
            name: v.optional(v.pipe(v.union([
                v.pipe(v.string(), v.readonly()),
                v.null()
            ]), v.readonly()))
        }), v.readonly()))
    })),
    path: v.object({
        id: v.pipe(v.number(), v.integer(), v.minValue(-2147483648, 'Invalid value: Expected int32 to be >= -2^31'), v.maxValue(2147483647, 'Invalid value: Expected int32 to be <= 2^31-1')),
        'api-version': v.string()
    }),
    query: v.optional(v.never())
});

/**
 * Success
 */
export const vComplexParamsResponse = vModelWithString;

export const vCallWithResultFromHeaderData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vTestErrorCodeData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.object({
        status: v.pipe(v.number(), v.integer())
    })
});

export const vNonAsciiæøåÆøÅöôêÊ字符串Data = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.object({
        'nonAsciiParamæøåÆØÅöôêÊ': v.pipe(v.number(), v.integer())
    })
});

/**
 * Successful response
 */
export const vNonAsciiæøåÆøÅöôêÊ字符串Response = v.array(vNonAsciiStringæøåÆøÅöôêÊ字符串);

export const vPutWithFormUrlEncodedData = v.object({
    body: vArrayWithStrings,
    path: v.optional(v.never()),
    query: v.optional(v.never())
});
