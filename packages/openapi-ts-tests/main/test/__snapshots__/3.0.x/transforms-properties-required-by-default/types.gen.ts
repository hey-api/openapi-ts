// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: `${string}://${string}` | 'https://api.pos.dutchie.com' | (string & {});
};

export type Address = {
    addressId: number | null;
    customerId: number;
    street: string | null;
    street2: string | null;
    city: string | null;
    state: string | null;
    postal_code: string | null;
    country_Code: string | null;
    latitude: number | null;
    longitude: number | null;
    county: string | null;
    additionalStateIdentifiers: string | null;
};

export type AllocatedDeliveryItem = {
    transactionId: number;
    productName: string | null;
    quantity: number;
    totalPrice: number;
    totalDiscount: number;
    totalTax: number;
};

export type AllocatedPreOrderItem = {
    productName: string | null;
    quantity: number;
    totalPrice: number;
    totalDiscount: number;
    totalTax: number;
};

/**
 * Anonymous transaction response model containing transaction identifiers for guest checkout operations.
 */
export type AnonymousTransaction = {
    /**
     * Unique identifier for the customer record associated with this anonymous transaction.
     */
    customerId: number;
    /**
     * Unique identifier for the transaction record.
     */
    transactionId: number;
    /**
     * String representation of the unique identifier for API responses.
     */
    readonly uniqueId: string | null;
};

/**
 * Discount information applied to a specific transaction item in cannabis retail operations.
 */
export type AppliedDiscount = {
    /**
     * Unique identifier for the discount program or campaign applied.
     */
    discountId: number;
    /**
     * Display name of the discount for customer receipts and reporting.
     */
    discountName: string | null;
    /**
     * Reason or justification for the discount application (e.g., "Loyalty Reward", "Medical Patient").
     */
    discountReason: string | null;
    /**
     * Discount amount applied to the transaction item (in USD, positive value represents savings).
     */
    amount: number;
    /**
     * Reference identifier linking this discount back to the specific transaction line item.
     * Not guaranteed to be unique outside of a single transaction.
     */
    readonly transactionItemId: number;
};

/**
 * Request model for assigning existing cannabis plants to a specific plant group for batch management and cultivation workflow organization.
 *
 * **Plant Group Assignment:**
 * - Assigns existing plants to target plant group using serial numbers
 * - Supports batch organization for cultivation workflow management
 * - Plants identified by serial numbers for precise assignment
 * - Validates target plant group exists before assignment
 *
 * **Serial Number Identification:**
 * - Plants identified by their unique serial numbers rather than IDs
 * - All serial numbers must correspond to existing plants in the facility
 * - Plants must be accessible to the authenticated location
 * - Serial numbers must match exact plant tracking identifiers
 *
 * **Batch Management:**
 * - Plant groups enable batch-based cultivation tracking and compliance
 * - Supports harvest planning and cultivation scheduling optimization
 * - Facilitates cultivation management and operational efficiency
 */
export type AssignPlantsToGroupRequest = {
    /**
     * Name of target plant group for batch organization and cultivation tracking
     */
    plantGroupName: string | null;
    /**
     * Collection of plant serial numbers to assign to the specified plant group
     */
    plantSerialNumbers: Array<string> | null;
};

/**
 * Field-specific validation error details for BadRequest responses.
 */
export type BadRequestPropertyError = {
    /**
     * Name of the property that failed validation.
     */
    propertyName: string | null;
    /**
     * Description of the validation error for the specified property.
     */
    propertyError: string | null;
};

/**
 * Standardized error response model for HTTP 400 Bad Request responses across the API.
 */
export type BadRequestResponse = {
    /**
     * General error message describing the nature of the bad request.
     */
    message: string | null;
    /**
     * Collection of field-specific validation errors for detailed feedback.
     */
    propertyErrors: Array<BadRequestPropertyError> | null;
};

/**
 * Detailed specification for creating individual immature plant batches with cultivation and compliance information.
 */
export type BatchDetails = {
    /**
     * Display name for the immature plant batch for identification and organization.
     */
    batchName: string | null;
    /**
     * Plant type designation for the batch (e.g., "Seedling", "Clone", "Cutting").
     */
    plantType: string | null;
    /**
     * Number of plants in the immature batch for inventory tracking and compliance.
     */
    plantCount: number;
    /**
     * Strain identifier for the cannabis strain being cultivated in this batch.
     */
    strainId: number;
    /**
     * Room identifier for the immature batch location assignment.
     */
    roomId: number;
    /**
     * Table identifier within the room for precise location tracking (optional).
     */
    tableId: number | null;
    /**
     * Mother plant identifier for tracking genetic lineage (required for clone batches).
     */
    motherPlantId: number | null;
    /**
     * Date when the immature batch was created for cultivation timeline documentation.
     */
    dateCreated: string | null;
};

export type BooleanNullableOptional = boolean;

export type BooleanOptional = boolean;

export type Brand = {
    brandId: number;
    brandName: string | null;
    brandCatalogBrandId: string | null;
};

export type BrandEditRequest = {
    brandId: number | null;
    brandName: string | null;
};

export type BroadcastedResponses = {
    responses: Array<LocationResponse> | null;
};

export type BulkCreateOrUpdateHarvest = {
    harvests: Array<BulkHarvestDetail> | null;
};

export type BulkCreateOrUpdateHarvestResponse = {
    createdHarvestIds: Array<number> | null;
    updatedHarvestIds: Array<number> | null;
};

export type BulkHarvestDetail = {
    harvestId: number | null;
    harvestName: string | null;
    harvestRoomId: number;
    harvestDate: string | null;
    strainId: number;
};

export type CalculationMethod = 1 | 2 | 3 | 4 | 5 | 6 | 15;

/**
 * Request model for canceling existing customer pre-orders before fulfillment.
 */
export type CancelPreorderRequest = {
    /**
     * Unique identifier of the pre-order to be canceled.
     */
    orderId: number;
    /**
     * Required reason for canceling the order (used for business analytics and customer service).
     */
    cancellationReason: string | null;
};

/**
 * Laboratory test result value model for cannabinoid and terpene measurements in cannabis products.
 */
export type CannabinoidTerpeneValue = {
    /**
     * Name of the laboratory test result (e.g., "THC", "CBD", "Limonene") - must match predefined compound list.
     */
    labResultName: string;
    /**
     * Measured value of the compound in the cannabis sample (decimal precision for accurate reporting).
     */
    value: number;
    /**
     * Unit identifier for the measurement (references LabResultUnit enum - mg/g, percentage, etc.).
     */
    labResultUnitId: number;
};

export type CartItemPrice = {
    productName: string | null;
    productId: number;
    quantity: number;
    subtotal: number;
    pricingTierAdjustment: number | null;
    discounts: Array<Discount> | null;
    tax: number;
};

export type CartPrice = {
    cartItemPrices: Array<CartItemPrice> | null;
    subTotal: number;
    taxes: number;
    discount: number;
    total: number;
    originalTotal: number;
    roundedDifference: number;
};

/**
 * Request model for updating the cultivation growth phase of cannabis plants to track development stages.
 *
 * **Growth Phase Management:**
 * - Updates plant cultivation phase for proper development tracking
 * - Supports bulk processing of multiple plants in single operation
 * - Validates growth phase against allowed phase values
 * - Automatically sets phase start date if not provided
 *
 * **Valid Growth Phases:**
 * - `Propagation`: Initial plant development and cloning phase
 * - `Vegetative`: Active vegetative growth before flowering initiation
 * - `Flowering`: Reproductive growth phase leading to harvest
 *
 * **Phase Transition Rules:**
 * - Phase start date defaults to current UTC time if not specified
 * - Phase changes are logged for cultivation timeline tracking
 * - Integration with external cultivation systems for environmental control
 */
export type ChangeGrowthPhaseRequest = {
    /**
     * Collection of LeafLogix plant IDs to update to the new growth phase
     */
    plantIds: Array<number> | null;
    /**
     * Target cultivation growth phase. Must be one of: `Propagation`, `Vegetative`, `Flowering`
     */
    growthPhase: string | null;
    /**
     * Date when new growth phase begins (optional, defaults to current UTC time if not specified)
     */
    phaseStartDate: string | null;
};

/**
 * Product category sales summary for cannabis retail closing reports and financial analysis.
 */
export type ClosingReportCategorySummary = {
    /**
     * Product category name (e.g., "Flower", "Edibles", "Concentrates").
     */
    category: string | null;
    /**
     * Total net sales for the category (calculated property returning CategoryNetTotal).
     */
    readonly categoryTotal: number;
    /**
     * Gross sales total for the category before discounts (in USD).
     */
    categoryGrossTotal: number;
    /**
     * Total discount amount applied to products in this category (in USD).
     */
    categoryDiscountTotal: number;
    /**
     * Net sales total for the category after discounts (in USD).
     */
    categoryNetTotal: number;
    /**
     * Total cost of goods sold for products in this category (in USD).
     */
    categoryCost: number;
};

/**
 * Customer type sales summary for cannabis retail closing reports and customer segment analysis.
 */
export type ClosingReportCustomerTypeSummary = {
    /**
     * Customer type classification (e.g., "Recreational", "Medical", "Industry").
     */
    customerType: string | null;
    /**
     * Total net sales for this customer type (calculated property returning NetTotal).
     */
    readonly total: number;
    /**
     * Gross sales total for this customer type before discounts (in USD).
     */
    grossTotal: number;
    /**
     * Net sales total for this customer type after discounts (in USD).
     */
    netTotal: number;
    /**
     * Total discount amount applied to this customer type (in USD).
     */
    discountTotal: number;
    /**
     * Total cost of goods sold for this customer type (in USD).
     */
    customerTypeCost: number;
    /**
     * Cannabis product sales total for this customer type (in USD).
     */
    cannabisSales: number;
    /**
     * Non-cannabis product sales total for this customer type (accessories, etc.) (in USD).
     */
    nonCannabisSales: number;
};

/**
 * Order source sales summary for cannabis retail closing reports and marketing channel analysis.
 */
export type ClosingReportOrderSourceSummary = {
    /**
     * Order origination source (e.g., "Website", "Mobile App", "Weedmaps", "Walk-In").
     */
    orderSource: string | null;
    /**
     * Total net sales for this order source (calculated property returning NetTotal).
     */
    readonly total: number;
    /**
     * Gross sales total for this order source before discounts (in USD).
     */
    grossTotal: number;
    /**
     * Net sales total for this order source after discounts (in USD).
     */
    netTotal: number;
    /**
     * Total discount amount applied to this order source (in USD).
     */
    discountTotal: number;
    orderSourceCost: number;
};

/**
 * Order type sales summary for cannabis retail closing reports and fulfillment channel analysis.
 */
export type ClosingReportOrderTypeSummary = {
    /**
     * Order fulfillment type (e.g., "In-Store", "Pickup", "Delivery", "Curbside").
     */
    orderType: string | null;
    /**
     * Total net sales for this order type (calculated property returning NetTotal).
     */
    readonly total: number;
    /**
     * Gross sales total for this order type before discounts (in USD).
     */
    grossTotal: number;
    /**
     * Net sales total for this order type after discounts (in USD).
     */
    netTotal: number;
    /**
     * Total discount amount applied to this order type (in USD).
     */
    discountTotal: number;
    /**
     * Total cost of goods sold for this order type (in USD).
     */
    orderTypeCost: number;
};

/**
 * Pay-by-Bank batch file summary for cannabis payment processing reconciliation.
 */
export type ClosingReportPayByBankBatchFileSums = {
    /**
     * Batch file name for payment processor identification and tracking.
     */
    batchFileName: string | null;
    /**
     * Adjustment amount for the batch file for financial reconciliation.
     */
    payByBankBatchFileAdjustmentAmount: number;
};

/**
 * Payment method summary for cannabis retail closing reports and financial reconciliation.
 */
export type ClosingReportPaymentSummary = {
    /**
     * Payment method type (e.g., "Cash", "Credit Card", "CanPay", "Hypur").
     */
    paymentType: string | null;
    /**
     * Total amount paid using this payment method (in USD).
     */
    totalPaid: number;
};

/**
 * Tax rate summary for cannabis retail closing reports and tax liability tracking.
 */
export type ClosingReportTaxRateSummary = {
    /**
     * Tax rate name or type (e.g., "State Excise Tax", "City Cannabis Tax", "Sales Tax").
     */
    taxRate: string | null;
    /**
     * Total tax amount collected for this tax rate (in USD).
     */
    totalTax: number;
};

/**
 * Enhanced closing report model for cannabis dispensary daily financial operations with payment processing integration.
 */
export type ClosingReportV2 = {
    /**
     * Total tips aggregated for the closing period for staff distribution.
     */
    readonly totalTips: number | null;
    /**
     * Tips processed through Pay-by-Bank system for electronic tip distribution.
     */
    payByBankTips: number;
    /**
     * Transaction fees charged by Pay-by-Bank system for cost accounting.
     */
    payByBankTransactionFees: number;
    /**
     * Batch file summaries for Pay-by-Bank transaction reconciliation.
     */
    payByBankBatchFile: Array<ClosingReportPayByBankBatchFileSums> | null;
    /**
     * Fees and donations collected during the closing period for compliance reporting.
     */
    feesDonations: Array<FeeDonation> | null;
    /**
     * DutchiePay tips processed for cannabis payment integration.
     */
    readonly dutchiePayTips: number | null;
    /**
     * DutchiePay transaction adjustments for cannabis payment processing.
     */
    readonly dutchiePayTotalAdjustmentAmount: number | null;
    /**
     * DutchiePay batch file summaries for cannabis payment reconciliation.
     */
    readonly dutchiePayBatchFileSums: Array<ClosingReportPayByBankBatchFileSums> | null;
    grossSales: number | null;
    discount: number | null;
    loyalty: number | null;
    totalTax: number | null;
    cost: number | null;
    coupons: number | null;
    itemTotal: number | null;
    transactionCount: number;
    itemCount: number;
    customerCount: number;
    newCustomerCount: number;
    voidCount: number;
    voidTotal: number | null;
    returnTotal: number | null;
    startingBalance: number | null;
    endingBalance: number | null;
    deposits: number | null;
    adjustments: number | null;
    totalPayments: number | null;
    invoiceTotal: number | null;
    cannabisSales: number | null;
    nonCannabisSales: number | null;
    netSales: number | null;
    revenueFeesDonations: number | null;
    nonRevenueFeesDonations: number | null;
    rounding: number | null;
    totalIncome: number | null;
    averageCartNetSales: number | null;
    readonly overShort: number | null;
    categorySummary: Array<ClosingReportCategorySummary> | null;
    paymentSummary: Array<ClosingReportPaymentSummary> | null;
    taxSummary: Array<ClosingReportTaxRateSummary> | null;
    customerTypeSummary: Array<ClosingReportCustomerTypeSummary> | null;
    orderTypeSummary: Array<ClosingReportOrderTypeSummary> | null;
    orderSourceSummary: Array<ClosingReportOrderSourceSummary> | null;
};

/**
 * Detailed specification for converting individual plant batches during cultivation growth phase transitions.
 */
export type ConvertBatchDetails = {
    /**
     * Batch identifier for the plant batch being converted to mature growth phase.
     */
    batchId: number;
    /**
     * Collection of individual plant serial numbers within the batch for state tracking compliance.
     */
    serialNumbers: Array<string> | null;
    /**
     * Target growth stage for the batch conversion (e.g., "Vegetative", "Flowering").
     */
    batchStage: string | null;
    /**
     * Destination room identifier for the converted batch location tracking.
     */
    roomId: number;
    /**
     * Destination table identifier within the room for precise location tracking (optional).
     */
    tableId: number | null;
    /**
     * Date when the batch conversion was performed for cultivation timeline documentation.
     */
    dateCreated: string | null;
};

/**
 * Request model for converting immature plant batches to mature growth phases in cannabis cultivation operations.
 */
export type ConvertImmatureBatchRequest = {
    /**
     * Collection of plant batches to be converted from immature to mature growth phases.
     */
    batches: Array<ConvertBatchDetails> | null;
};

/**
 * Response model for immature plant batch conversion operations containing converted mature plant identifiers.
 */
export type ConvertImmaturePlantResponse = {
    /**
     * Collection of mature plants created from immature batch conversion.
     */
    convertedPlants: Array<CreatedMaturePlant> | null;
};

export type ConvertImmaturePlantResponseApiResult = {
    result: boolean;
    message: string | null;
    data: ConvertImmaturePlantResponse;
};

/**
 * Request model for creating anonymous transactions for guest customer operations.
 */
export type CreateAnonymousTransactionRequest = {
    /**
     * Optional reference identifier for the transaction (for external system integration).
     */
    transactionReference: string | null;
};

/**
 * Response model for immature plant batch creation operations containing created batch and plant identifiers.
 */
export type CreateImmaturePlantBatchResponse = {
    /**
     * Collection of created immature plant batches with associated plant identifiers.
     */
    batches: Array<CreatedImmaturePlantBatch> | null;
};

export type CreateImmaturePlantBatchResponseApiResult = {
    result: boolean;
    message: string | null;
    data: CreateImmaturePlantBatchResponse;
};

/**
 * Request model for creating new customer journal entries with interaction details and notes.
 */
export type CreateJournalEntryRequest = {
    /**
     * The customer ID to create the journal entry for.
     */
    customerId: number;
    /**
     * Brief title or summary of the journal entry.
     */
    subject: string;
    /**
     * Detailed content and notes for the journal entry.
     */
    body: string;
    /**
     * Date and time when the journal entry should be dated.
     */
    date: string;
};

/**
 * Request model for creating mature plant batches in cannabis cultivation operations.
 */
export type CreateMatureBatchRequest = {
    /**
     * Collection of mature plant batch specifications for bulk batch creation operations.
     */
    batches: Array<MatureBatchDetails> | null;
};

/**
 * Response model for mature plant batch creation operations containing created mature plant identifiers.
 */
export type CreateMaturePlantsResponse = {
    /**
     * Collection of mature plants created ready for flowering phase cultivation.
     */
    createdPlants: Array<CreatedMaturePlant> | null;
};

export type CreateMaturePlantsResponseApiResult = {
    result: boolean;
    message: string | null;
    data: CreateMaturePlantsResponse;
};

export type CreateOrUpdateHarvest = {
    harvestId: number | null;
    harvestName: string | null;
    strainName: string | null;
    harvestRoomId: number;
    harvestDate: string;
};

export type CreatePlantRequest = {
    serialNumber: string | null;
    plantGroupName: string | null;
    growthPhase: string | null;
    phaseStartDate: string | null;
    dateCreated: string | null;
    bornDate: string | null;
    strain: string | null;
    room: string | null;
    table: string | null;
    isMother: boolean;
    bypassStateIntegration: boolean;
};

export type CreatePreOrderRequest = {
    customerId: number;
    items?: Array<PreOrderItem> | null;
    redemptions?: Array<PreOrderRedemption> | null;
    isDelivery?: boolean;
    /**
     * @deprecated
     */
    orderSource?: string | null;
    orderType?: string | null;
    deliveryStreet?: string | null;
    deliveryStreet2?: string | null;
    deliveryCity?: string | null;
    deliveryState?: string | null;
    deliveryPostalCode?: string | null;
    idempotencyKey?: string | null;
    notes?: string | null;
    status?: string | null;
    transactionReference?: string | null;
    timeWindowStartDateUtc?: string | null;
    timeWindowEndDateUtc?: string | null;
    deliveryScheduleId?: DeliveryScheduleType;
};

export type CreateUpdatePurchaseOrderItemRequest = {
    productId: number;
    unitId: Int32NullableOptional;
    quantity: Int32NullableOptional;
    subtotal: DecimalNullableOptional;
    tax: DecimalNullableOptional;
};

export type CreateUpdatePurchaseOrderRequest = {
    purchaseOrderId: number | null;
    expectedArrivalDate: DateTimeNullableOptional;
    title: StringOptional;
    dateReceived: DateTimeNullableOptional;
    shippingInformation: StringOptional;
    vendorContact: StringOptional;
    status: StringOptional;
    vendorId: Int32NullableOptional;
    purchaseOrderNumber: Int32NullableOptional;
    purchaseOrderItems: Array<CreateUpdatePurchaseOrderItemRequest> | null;
};

export type CreateUpdatePurchaseOrderResponse = {
    createdPurchaseOrderIds: Array<number> | null;
    updatedPurchaseOrderIds: Array<number> | null;
};

export type CreateUpdatePurchaseOrdersRequest = {
    purchaseOrders: Array<CreateUpdatePurchaseOrderRequest> | null;
};

/**
 * Individual created immature plant batch containing batch identifier and associated plant IDs.
 */
export type CreatedImmaturePlantBatch = {
    /**
     * Unique identifier assigned to the created immature plant batch.
     */
    batchId: number;
    /**
     * Collection of unique plant identifiers created within this batch.
     */
    plantIds: Array<number> | null;
};

export type CreatedMaturePlant = {
    batchId: number;
    plantId: number;
    plantSerialNumber: string | null;
};

/**
 * Represents a customer profile with personal information, contact details, and cannabis compliance data.
 */
export type Customer = {
    /**
     * Unique internal identifier for the customer record.
     */
    customerId: number;
    /**
     * String representation of UniqueId for external API consumption.
     */
    readonly uniqueId: string | null;
    /**
     * Deprecated name field (use FirstName and LastName instead).
     *
     * @deprecated
     */
    name: string | null;
    /**
     * Customer's first name.
     */
    firstName: string | null;
    /**
     * Customer's last name.
     */
    lastName: string | null;
    /**
     * Customer's middle name.
     */
    middleName: string | null;
    /**
     * Name suffix (Jr., Sr., III, etc.).
     */
    nameSuffix: string | null;
    /**
     * Name prefix (Mr., Mrs., Dr., etc.).
     */
    namePrefix: string | null;
    /**
     * Primary street address line.
     */
    address1: string | null;
    /**
     * Secondary address line (apartment, suite, etc.).
     */
    address2: string | null;
    /**
     * City name.
     */
    city: string | null;
    /**
     * State or province.
     */
    state: string | null;
    /**
     * Postal or ZIP code.
     */
    postalCode: string | null;
    /**
     * Primary phone number.
     */
    phone: string | null;
    /**
     * Cell phone number.
     */
    cellPhone: string | null;
    /**
     * Email address.
     */
    emailAddress: string | null;
    /**
     * Customer account status.
     */
    status: string | null;
    /**
     * Medical marijuana identification number.
     */
    mmjidNumber: string | null;
    /**
     * Medical marijuana ID expiration date.
     */
    mmjidExpirationDate: string | null;
    /**
     * Last modification timestamp in UTC format.
     */
    lastModifiedDateUTC: string | null;
    /**
     * Customer record creation date.
     */
    creationDate: string | null;
    /**
     * Customer type classification.
     */
    customerType: string | null;
    /**
     * Customer's gender.
     */
    gender: string | null;
    /**
     * SHA2_256 hash of the Driver License ID
     */
    driversLicenseHash: string | null;
    /**
     * Customer's date of birth.
     */
    dateOfBirth: string | null;
    /**
     * External system customer identifier.
     */
    externalCustomerId: string | null;
    /**
     * Name of the integration system that created this customer.
     */
    createdByIntegrator: string | null;
    /**
     * Indicates if this is an anonymous customer record.
     */
    isAnonymous: boolean;
    /**
     * How the customer heard about the dispensary.
     */
    referralSource: string | null;
    /**
     * Additional details about referral source when "Other" is selected.
     */
    otherReferralSource: string | null;
    /**
     * SpringBig loyalty system member identifier.
     */
    springBigMemberId: number;
    /**
     * Custom identifier for external system integration.
     */
    customIdentifier: string | null;
    /**
     * Collection of active discount groups for this customer.
     */
    readonly discountGroups: Array<string> | null;
    /**
     * Location where this customer record was created.
     */
    createdAtLocation: string | null;
    /**
     * Additional notes about the customer.
     */
    notes: string | null;
    /**
     * Indicates if customer is enrolled in loyalty program.
     */
    isLoyaltyMember: boolean | null;
    /**
     * Primary medical condition for medical marijuana patients.
     */
    primaryQualifyingCondition: string | null;
    /**
     * Additional medical conditions for medical marijuana patients.
     */
    secondaryQualifyingConditions: Array<string> | null;
    /**
     * Customer ID this record was merged into (if applicable).
     */
    mergedIntoCustomerId: number | null;
    /**
     * Customer's marketing communication preference.
     */
    optedIntoMarketing: boolean | null;
    /**
     * Customer's current loyalty program tier.
     */
    loyaltyTier: string | null;
};

/**
 * Search criteria model for customer lookup operations with flexible matching options.
 */
export type CustomerSearchRequest = {
    /**
     * Customer's last name for name-based search matching.
     */
    lastName: string | null;
    /**
     * Customer's date of birth for identity verification and precise matching.
     */
    dateOfBirth: string | null;
    /**
     * Customer's phone number for contact-based search matching.
     */
    phone: string | null;
    /**
     * Customer's email address for account-based search matching.
     */
    emailAddress: string | null;
    /**
     * Medical marijuana identification number for regulatory compliance search.
     */
    mmjidNumber: string | null;
    /**
     * Driver's license identifier for government ID-based search matching.
     */
    driversLicenseId: string | null;
};

/**
 * Extended customer model that includes search match type information for customer lookup operations.
 */
export type CustomerSearchResult = {
    /**
     * Indicates how the customer record was matched during the search operation.
     */
    matchType: string | null;
    /**
     * Unique internal identifier for the customer record.
     */
    customerId: number;
    /**
     * String representation of UniqueId for external API consumption.
     */
    readonly uniqueId: string | null;
    /**
     * Deprecated name field (use FirstName and LastName instead).
     *
     * @deprecated
     */
    name: string | null;
    /**
     * Customer's first name.
     */
    firstName: string | null;
    /**
     * Customer's last name.
     */
    lastName: string | null;
    /**
     * Customer's middle name.
     */
    middleName: string | null;
    /**
     * Name suffix (Jr., Sr., III, etc.).
     */
    nameSuffix: string | null;
    /**
     * Name prefix (Mr., Mrs., Dr., etc.).
     */
    namePrefix: string | null;
    /**
     * Primary street address line.
     */
    address1: string | null;
    /**
     * Secondary address line (apartment, suite, etc.).
     */
    address2: string | null;
    /**
     * City name.
     */
    city: string | null;
    /**
     * State or province.
     */
    state: string | null;
    /**
     * Postal or ZIP code.
     */
    postalCode: string | null;
    /**
     * Primary phone number.
     */
    phone: string | null;
    /**
     * Cell phone number.
     */
    cellPhone: string | null;
    /**
     * Email address.
     */
    emailAddress: string | null;
    /**
     * Customer account status.
     */
    status: string | null;
    /**
     * Medical marijuana identification number.
     */
    mmjidNumber: string | null;
    /**
     * Medical marijuana ID expiration date.
     */
    mmjidExpirationDate: string | null;
    /**
     * Last modification timestamp in UTC format.
     */
    lastModifiedDateUTC: string | null;
    /**
     * Customer record creation date.
     */
    creationDate: string | null;
    /**
     * Customer type classification.
     */
    customerType: string | null;
    /**
     * Customer's gender.
     */
    gender: string | null;
    /**
     * SHA2_256 hash of the Driver License ID
     */
    driversLicenseHash: string | null;
    /**
     * Customer's date of birth.
     */
    dateOfBirth: string | null;
    /**
     * External system customer identifier.
     */
    externalCustomerId: string | null;
    /**
     * Name of the integration system that created this customer.
     */
    createdByIntegrator: string | null;
    /**
     * Indicates if this is an anonymous customer record.
     */
    isAnonymous: boolean;
    /**
     * How the customer heard about the dispensary.
     */
    referralSource: string | null;
    /**
     * Additional details about referral source when "Other" is selected.
     */
    otherReferralSource: string | null;
    /**
     * SpringBig loyalty system member identifier.
     */
    springBigMemberId: number;
    /**
     * Custom identifier for external system integration.
     */
    customIdentifier: string | null;
    /**
     * Collection of active discount groups for this customer.
     */
    readonly discountGroups: Array<string> | null;
    /**
     * Location where this customer record was created.
     */
    createdAtLocation: string | null;
    /**
     * Additional notes about the customer.
     */
    notes: string | null;
    /**
     * Indicates if customer is enrolled in loyalty program.
     */
    isLoyaltyMember: boolean | null;
    /**
     * Primary medical condition for medical marijuana patients.
     */
    primaryQualifyingCondition: string | null;
    /**
     * Additional medical conditions for medical marijuana patients.
     */
    secondaryQualifyingConditions: Array<string> | null;
    /**
     * Customer ID this record was merged into (if applicable).
     */
    mergedIntoCustomerId: number | null;
    /**
     * Customer's marketing communication preference.
     */
    optedIntoMarketing: boolean | null;
    /**
     * Customer's current loyalty program tier.
     */
    loyaltyTier: string | null;
};

/**
 * Represents a customer type classification for cannabis dispensary operations and compliance.
 */
export type CustomerType = {
    /**
     * Unique identifier for the customer type.
     */
    id: number;
    /**
     * Display name of the customer type.
     */
    name: string | null;
    /**
     * Indicates whether this customer type is for medical marijuana patients.
     */
    isMedical: boolean;
    /**
     * Indicates whether this customer type is for retail (adult-use) customers.
     */
    isRetail: boolean;
};

export type DateTimeNullableOptional = string;

export type DecimalNullableOptional = number;

/**
 * Request model for deleting a product image through the product image management API.
 */
export type DeleteImageRequest = {
    /**
     * The unique identifier of the product that owns the image to be deleted.
     */
    productId: number;
    /**
     * The unique identifier of the specific image to be deleted from the product.
     */
    imageId: number;
};

export type DeliveryOrderStatus = {
    preOrderId: number | null;
    transactionId: number;
    status: string | null;
    orderDate: string;
    customerFirstName: string | null;
    customerLastName: string | null;
    customerId: number;
    orderType: string | null;
    orderSource: string | null;
    rejectedReason: string | null;
    total: number | null;
    subTotal: number | null;
    totalTax: number | null;
    streetAddress1: string | null;
    streetAddress2: string | null;
    city: string | null;
    deliveryState: string | null;
    postalCode: string | null;
    customerPhone: string | null;
    customerExpectedTimeStart: string;
    customerExpectedTimeEnd: string;
    dispatchDepartTime: string;
    dispatchArriveTime: string;
    items: Array<AllocatedDeliveryItem> | null;
    payments: Array<DeliveryPayment> | null;
    deliveryStatus: string | null;
};

export type DeliveryPayment = {
    name: string | null;
    amount: number;
};

export type DeliveryScheduleType = 1 | 2;

export type Discount = {
    name: string | null;
    amount: number;
    discountId: number | null;
};

export type DiscountApiResponse = {
    id: number | null;
    externalId: string | null;
    validDateFrom: string | null;
    validDateTo: string | null;
    maxRedemptions: number | null;
    redemptionLimit: number | null;
    firstTimeCustomerOnly: DiscountFirstTimeCustomer;
    discountDescription: string | null;
    discountCode: string | null;
    applicationMethodId: DiscountApplicationMethod;
    readonly applicationMethod: string | null;
    canStackAutomatically: boolean;
    onlineName: string | null;
    locationRestrictions: Array<number> | null;
    restrictToGroupIds: Array<number> | null;
    monday: boolean | null;
    tuesday: boolean | null;
    wednesday: boolean | null;
    thursday: boolean | null;
    friday: boolean | null;
    saturday: boolean | null;
    sunday: boolean | null;
    isActive: boolean;
    isBundledDiscount: boolean;
    constraints: Array<DiscountConstraintApiResponse> | null;
    reward: DiscountRewardApiResponse;
    menuDisplay: DiscountMenuDisplayApiResponse;
    paymentRestrictions: DiscountPaymentRestrictionApiResponse;
};

export type DiscountApplicationMethod = 1 | 2 | 3 | 4 | 5 | 6;

export type DiscountConstraintApiResponse = {
    discountConstraintId: number | null;
    discountId: number;
    thresholdMin: number | null;
    includeNonCannabis: boolean;
    thresholdTypeId: DiscountThresholdType;
    readonly thresholdType: string | null;
    readonly hasThreshold: boolean;
    discountItemGroupTypeId: DiscountItemGroupType;
    readonly itemGroupType: string | null;
    restrictions: {
        [key: string]: IRestrictionApiResponse;
    } | null;
};

export type DiscountFirstTimeCustomer = 0 | 1 | 2;

/**
 * Discount group model for organizing and categorizing related discounts.
 */
export type DiscountGroup = {
    /**
     * Unique identifier for the discount group.
     */
    discountGroupId: number;
    /**
     * Display name of the discount group for management and organization.
     */
    discountGroupName: string | null;
};

export type DiscountItemGroupType = 5 | 6;

export type DiscountMenuDisplayApiResponse = {
    menuDisplayDescription: string | null;
    menuDisplayImageUrl: string | null;
    menuDisplayName: string | null;
    menuDisplayRank: number;
};

export type DiscountPaymentRestrictionApiResponse = {
    payByBankSignupIncentive: boolean;
};

/**
 * Discount restriction model defining entity inclusion or exclusion rules for discount application.
 */
export type DiscountRestriction = {
    /**
     * Collection of entity identifiers subject to the restriction rule.
     */
    ids: Array<number> | null;
    /**
     * Indicates if this is an exclusion rule (true) or inclusion rule (false).
     */
    isExclusion: boolean;
};

export type DiscountRewardApiResponse = {
    discountRewardId: number | null;
    discountId: number;
    calculationMethodId: CalculationMethod;
    readonly calculationMethod: string | null;
    discountValue: number;
    includeNonCannabis: boolean;
    highestOrLowest: string | null;
    thresholdTypeId: DiscountThresholdType;
    readonly thresholdType: string | null;
    readonly hasThreshold: boolean;
    itemGroupTypeId: DiscountItemGroupType;
    readonly itemGroupType: string | null;
    thresholdMin: number | null;
    thresholdMax: number | null;
    applyToOnlyOneItem: boolean;
    restrictions: {
        [key: string]: IRestrictionApiResponse;
    } | null;
};

export type DiscountThresholdType = 1 | 2 | 3;

export type DriverDetail = {
    driverId: number;
    name: string | null;
    stateId: string | null;
    driversLicense: string | null;
};

/**
 * E-commerce customer data model for creating or updating customer profiles via API integration.
 */
export type EcomCustomerEdit = {
    /**
     * When specified, it updates the record, if the ID exists
     * null / unspecified will create a new customer
     */
    customerId?: number | null;
    /**
     * Unique identifier for external system integration.
     */
    uniqueId?: string | null;
    /**
     * Deprecated full name field (use FirstName and LastName instead).
     *
     * @deprecated
     */
    name?: string | null;
    /**
     * Customer's first name (required).
     */
    firstName: string;
    /**
     * Customer's last name.
     */
    lastName?: string | null;
    /**
     * Customer's middle name.
     */
    middleName?: string | null;
    /**
     * Name suffix (Jr., Sr., III, etc.).
     */
    nameSuffix?: string | null;
    /**
     * Name prefix (Mr., Mrs., Dr., etc.).
     */
    namePrefix?: string | null;
    /**
     * Primary street address line (required).
     */
    address1: string;
    /**
     * Secondary address line (apartment, suite, etc.).
     */
    address2?: string | null;
    /**
     * City name (required).
     */
    city: string;
    /**
     * State or province (required).
     */
    state: string;
    /**
     * Postal or ZIP code (required).
     */
    postalCode: string;
    /**
     * Phone number.
     */
    phone?: string | null;
    /**
     * Email address.
     */
    emailAddress?: string | null;
    /**
     * Active; Cancelled; Hold; Banned
     */
    status: string;
    /**
     * Medical marijuana identification number.
     */
    mmjidNumber?: string | null;
    /**
     * Driver's license ID.
     */
    driversLicenseID?: string | null;
    /**
     * Driver's license expiration date.
     */
    driversLicenseExpiration?: string | null;
    /**
     * Medical marijuana ID expiration date.
     */
    mmjidExpirationDate?: string | null;
    /**
     * Customer type classification (required). Use CustomerTypes endpoint to retrieve active customer types for a given location.
     */
    customerType: string;
    /**
     * Customer's date of birth.
     */
    dateOfBirth?: string | null;
    /**
     * External system customer identifier.
     */
    externalCustomerId?: string | null;
    /**
     * Customer's gender.
     */
    gender?: string | null;
    /**
     * Optional idempotency key for duplicate prevention. When provided with a ConsumerKey header, ensures the same customer creation request is not processed multiple times.
     */
    idempotencyKey?: string | null;
    /**
     * How the customer heard about the dispensary. Use ReferralSources endpoint to retrieve values.
     */
    referralSource?: string | null;
    /**
     * Custom identifier for external system integration.
     */
    customIdentifier?: string | null;
    /**
     * Additional notes about the customer.
     */
    notes?: string | null;
    /**
     * Indicates if customer is enrolled in loyalty program.
     */
    isLoyaltyMember?: boolean | null;
};

export type Employee = {
    userId: number;
    loginId: string | null;
    fullName: string | null;
    defaultLocation: string | null;
    status: string | null;
    stateId: string | null;
    mmjExpiration: string;
    permissionsLocation: string | null;
    groups: string | null;
};

/**
 * Fee and donation tracking model for cannabis dispensary compliance and accounting.
 */
export type FeeDonation = {
    /**
     * Name of the fee or donation for identification and reporting purposes.
     */
    name: string | null;
    /**
     * Cash value of the fee or donation for financial accounting.
     */
    cashValue: number;
    /**
     * Flag indicating whether the fee or donation counts as revenue for accounting purposes.
     */
    isRevenue: boolean;
};

/**
 * Fee and donation information associated with cannabis retail transactions.
 */
export type FeeDonationInfo = {
    /**
     * Unique identifier for the specific fee or donation program.
     */
    feeDonationId: number;
    /**
     * Description of the fee or donation for customer receipts and reporting.
     */
    description: string | null;
    /**
     * Amount of the fee or donation (in USD).
     */
    amount: number;
    /**
     * Indicates whether this fee counts as business revenue for accounting purposes.
     */
    isRevenue: boolean;
};

export type FinishOrUnfinishBatchDetails = {
    batchId: number;
    harvestCompletedOn: string | null;
};

export type GuestListEntry = {
    name: string | null;
    checkinDateUTC: string;
    status: string | null;
    customerId: number;
    transactionId: number;
    transactionReferenceNumber: string | null;
    terminalName: string | null;
    customerType: string | null;
    phone: string | null;
    cellPhone: string | null;
    preOrderSource: string | null;
};

export type Harvest = {
    harvestId: number;
    harvestName: string | null;
    harvestDate: string;
    harvestRoom: string | null;
    plantCount: number;
    plantWeight: number | null;
    wetWeight: number | null;
    wetWaste: number | null;
    dryBudWeight: number | null;
    dryShakeWeight: number | null;
    dryWaste: number | null;
    packageCount: number;
    packagedWeight: number | null;
    lastModifiedDateUTC: string;
    strainName: string | null;
};

/**
 * Request model for moving cannabis plants from cultivation to harvest status with optional weight tracking.
 *
 * **Request Behavior:**
 * - Moves specified plants from cultivation status to harvesting status
 * - Supports bulk processing of multiple plants in single operation
 * - Optional weight tracking for harvest yield management
 * - Integrates with external cultivation systems when configured
 *
 * **Validation:**
 * - All plant IDs must exist and be accessible to the authenticated location
 * - Plants must be in valid status for harvesting (typically Active status)
 * - Harvest ID must correspond to existing harvest record
 */
export type HarvestPlantRequest = {
    /**
     * Collection of plants to be harvested with optional weight measurements
     */
    plants: Array<HarvestedPlant> | null;
    /**
     * Target harvest record ID for associating harvested plants
     */
    harvestId: number;
    /**
     * Date and time when harvest occurred (optional, defaults to current UTC time if not specified)
     */
    harvestedOn: string | null;
};

/**
 * Harvest waste detail model for tracking waste generated from specific harvest operations.
 */
export type HarvestWasteDetail = {
    /**
     * Identifier for the harvest batch generating this waste.
     */
    harvestId: number;
    /**
     * Type or category of waste material from the harvest.
     */
    wasteType: string | null;
    /**
     * Quantity of waste material generated from the harvest.
     */
    wasteAmount: number;
    /**
     * Unit of measurement identifier for the waste amount.
     */
    unitId: number;
};

/**
 * Generic waste record model containing waste disposal information and associated detail records for cannabis compliance and waste tracking.
 */
export type HarvestWasteDetailWaste = {
    /**
     * Unique identifier for the waste record (null for new waste creation).
     */
    wasteId: number | null;
    /**
     * Reference number for waste tracking and documentation.
     */
    referenceNo: string | null;
    /**
     * Additional comments or notes about the waste disposal.
     */
    comments: string | null;
    /**
     * Date when the waste disposal occurred.
     */
    wasteDate: string | null;
    /**
     * Collection of waste detail records containing specific item information.
     */
    wasteDetail: Array<HarvestWasteDetail> | null;
    /**
     * Licensed Service Provider identifier (internal use only).
     */
    lspId: number | null;
    /**
     * Location identifier (internal use only).
     */
    locId: number | null;
    /**
     * Indicates if room identification is required for this waste type (internal use only).
     */
    roomRequired: boolean | null;
    /**
     * Indicates if this waste integrates with BioTrack system (internal use only).
     */
    isBioTrack: boolean | null;
};

/**
 * Individual plant harvest information with optional weight tracking for yield management.
 *
 * **Weight Tracking:**
 * - Weight is optional but recommended for harvest yield analysis
 * - Typically represents wet weight at time of harvest
 * - Used for compliance reporting and operational analytics
 */
export type HarvestedPlant = {
    /**
     * Unique LeafLogix plant identifier for the plant being harvested
     */
    plantId: number;
    /**
     * Optional harvest weight measurement (typically wet weight in grams)
     */
    weight: number | null;
};

export type IRestrictionApiResponse = {
    isExclusion: boolean;
};

export type Int32iEnumerableOptional = Array<unknown>;

export type Int32NullableOptional = number;

/**
 * Integrated payment processing information for cannabis transactions processed through connected payment systems.
 */
export type IntegratedPayment = {
    /**
     * Type of integrated payment processor used for the transaction (e.g., "CreditCard", "CanPay", "ACH").
     */
    integrationType: string | null;
    /**
     * Amount paid through the integrated payment system (in USD).
     */
    integratedPaid: number;
    /**
     * External payment identifier from the integrated payment processor for transaction tracking.
     */
    externalPaymentId: string | null;
};

export type InventoryDiscrepancy = {
    inventoryId: number | null;
    packageId: string | null;
    quantity: number;
    roomId: number;
    unitId: number;
    externalQuantity: number;
    externalUnitId: number;
    equivalentExternalQuantity: number | null;
    readonly difference: number;
    productName: string | null;
    room: string | null;
    externalRoom: string | null;
    batchModeQuantity: number | null;
    bioTrackCategoryName: string | null;
    externalBioTrackCategoryName: string | null;
    sku: string | null;
    unitErrorMsg: string | null;
    rooms: Array<string> | null;
    serialNumber: string | null;
};

export type InventoryIntegrationReconResponse = {
    lastUpdated: string | null;
    discrepancies: Array<InventoryDiscrepancy> | null;
};

/**
 * Inventory item model representing current stock and product details for available inventory.
 */
export type InventoryItem = {
    /**
     * Unit of measurement for unit weight, always "g" (grams).
     */
    unitWeightUnit: string | null;
    /**
     * Unique inventory record identifier for this specific inventory item.
     */
    inventoryId: number;
    /**
     * Product identifier linking this inventory to the product catalog.
     */
    productId: number;
    /**
     * Stock Keeping Unit (SKU) code for inventory tracking and identification.
     */
    sku: string | null;
    /**
     * Display name of the product for customer-facing applications.
     */
    productName: string | null;
    /**
     * Detailed product description including effects, characteristics, and usage information.
     */
    description: string | null;
    /**
     * Category identifier for product classification (optional).
     */
    categoryId: number | null;
    /**
     * Category name for product classification and filtering.
     */
    category: string | null;
    /**
     * URL path to product image for display purposes.
     */
    imageUrl: string | null;
    /**
     * Current available quantity for sale or transfer.
     */
    quantityAvailable: number;
    /**
     * Unit of measurement for the available quantity (e.g., "g", "mg", "ea").
     */
    quantityUnits: string | null;
    /**
     * Weight per unit in grams for dosing and compliance calculations.
     */
    unitWeight: number;
    /**
     * Flower equivalent amount in grams for compliance tracking.
     */
    flowerEquivalent: number;
    /**
     * Recreational flower equivalent amount in grams (optional).
     */
    recFlowerEquivalent: number | null;
    /**
     * Unit of measurement for flower equivalent, always "g" (grams).
     */
    readonly flowerEquivalentUnits: string | null;
    /**
     * Batch identifier for lot tracking and quality control.
     */
    batchId: number;
    /**
     * Human-readable batch name or lot number for tracking.
     */
    batchName: string | null;
    /**
     * Package identifier for compliance tracking and traceability.
     */
    packageId: string | null;
    /**
     * Current status of the package (e.g., "Active", "Testing", "Quarantine").
     */
    packageStatus: string | null;
    /**
     * Base unit price for retail sales.
     */
    unitPrice: number;
    /**
     * Medical program pricing (optional, different from retail).
     */
    medUnitPrice: number | null;
    /**
     * Recreational program pricing (optional, different from medical).
     */
    recUnitPrice: number | null;
    /**
     * Strain identifier for cannabis products (optional).
     */
    strainId: number | null;
    /**
     * Strain name for cannabis products.
     */
    strain: string | null;
    /**
     * Cannabis strain classification (Hybrid, Indica, Sativa, CBD).
     */
    strainType: string | null;
    /**
     * Product size designation for packaging and dosing information.
     */
    size: string | null;
    /**
     * Collection of laboratory test results for this batch (included when includeLabResults=true).
     */
    labResults: Array<LabResult> | null;
    /**
     * Date when laboratory testing was completed (optional).
     */
    testedDate: string | null;
    /**
     * Date when sample was collected for laboratory testing (optional).
     */
    sampleDate: string | null;
    /**
     * Date when product was packaged for distribution (optional).
     */
    packagedDate: string | null;
    /**
     * Date when product was manufactured or produced (optional).
     */
    manufacturingDate: string | null;
    /**
     * Last modification timestamp in UTC for data synchronization.
     */
    lastModifiedDateUtc: string | null;
    /**
     * Current status of laboratory testing (e.g., "Passed", "Failed", "Pending").
     */
    labTestStatus: string | null;
    /**
     * Vendor identifier for the supplier of this inventory (optional).
     */
    vendorId: number | null;
    /**
     * Vendor name for the supplier of this inventory.
     */
    vendor: string | null;
    /**
     * Product expiration date for compliance and quality control (optional).
     */
    expirationDate: string | null;
    /**
     * Quantity breakdown by storage room/location (included when includeRoomQuantities=true).
     */
    roomQuantities: Array<InventoryRoomQuantity> | null;
    /**
     * Pricing tier classification for bulk pricing strategies.
     */
    pricingTierName: string | null;
    /**
     * Alternative product name for display purposes.
     */
    alternateName: string | null;
    /**
     * Collection of compliance tags associated with this inventory package.
     */
    tags: Array<InventoryTag> | null;
    /**
     * Brand identifier for branded products (optional).
     */
    brandId: number | null;
    /**
     * Brand name for branded products.
     */
    brandName: string | null;
    /**
     * Indicates if product is restricted to medical program only.
     */
    medicalOnly: boolean;
    /**
     * External compliance system ID (METRC or BioTrack) for regulatory tracking.
     */
    externalPackageId: string | null;
    /**
     * Producer name for cultivation and manufacturing tracking.
     */
    producer: string | null;
    /**
     * Producer identifier for cultivation and manufacturing tracking (optional).
     */
    producerId: number | null;
    /**
     * Package lineage information for traceability and compliance tracking.
     */
    lineage: Array<PackageLineage> | null;
    /**
     * Potency classification indicator for dosing guidance.
     */
    potencyIndicator: string | null;
    /**
     * Master category classification for product grouping.
     */
    masterCategory: string | null;
    /**
     * Effective potency in milligrams for dosing calculations (optional).
     */
    effectivePotencyMg: number | null;
    /**
     * Indicates if product contains cannabis or is cannabis-related.
     */
    isCannabis: boolean;
    /**
     * National Drug Code for pharmaceutical tracking (optional).
     */
    packageNDC: string | null;
    /**
     * URL to certificate of analysis or lab testing document.
     */
    labResultUrl: string | null;
};

/**
 * Cannabis inventory quantity tracking model by room location for facility management and compliance.
 */
export type InventoryRoomQuantity = {
    /**
     * Room identifier for the storage location.
     */
    roomId: number;
    /**
     * Room name or description for the storage location.
     */
    room: string | null;
    /**
     * Quantity of cannabis product available in this specific room location.
     */
    quantityAvailable: number;
};

/**
 * Historical inventory snapshot model representing inventory levels at a specific point in time.
 */
export type InventorySnapshot = {
    /**
     * Stock Keeping Unit (SKU) code for product identification.
     */
    sku: string;
    /**
     * Product name as it existed at the snapshot date.
     */
    product: string;
    /**
     * Product identifier linking to the product catalog.
     */
    productId: number;
    /**
     * Storage room name where inventory was located at snapshot time.
     */
    room: string;
    /**
     * Storage room identifier for location tracking.
     */
    roomId: number;
    /**
     * Vendor name for the supplier of this inventory (optional).
     */
    vendor?: string | null;
    /**
     * Package identifier for compliance tracking and traceability.
     */
    packageId: string;
    /**
     * Batch name or lot number for quality tracking (optional).
     */
    batchName?: string | null;
    /**
     * Batch identifier for lot tracking (optional).
     */
    batchId?: number | null;
    /**
     * Inventory quantity as it existed at the snapshot date.
     */
    quantity: number;
    /**
     * Total cost value of the inventory quantity (optional).
     */
    totalCost?: number | null;
    /**
     * Unit of measurement for the quantity.
     */
    unit: string;
    /**
     * Unit identifier for the measurement type.
     */
    unitId: number;
    /**
     * Inventory status at the time of snapshot (e.g., "Active", "Quarantine").
     */
    status?: string | null;
    /**
     * Date and time when this inventory snapshot was captured.
     */
    snapshotDate: string;
    /**
     * Inventory record identifier linking to the specific inventory item.
     */
    inventoryId: number;
};

export type InventoryTag = {
    tagId: number;
    tagName: string | null;
    packageId: string | null;
};

/**
 * Inventory transaction record model representing historical inventory movement and modification operations.
 */
export type InventoryTransaction = {
    /**
     * Unique identifier for the inventory transaction record.
     */
    inventoryTransactionId: number;
    /**
     * Type of inventory transaction performed.
     * **Options**: Move, Convert, Adjust, Combine, Receive, Change Product, Discontinue, Detail Update, Reconciliation, Create Package
     */
    transactionType?: string | null;
    /**
     * Product name at the time of transaction.
     */
    product?: string | null;
    /**
     * Stock Keeping Unit (SKU) code for the product.
     */
    sku?: string | null;
    /**
     * Product identifier linking to the product catalog.
     */
    productId?: number;
    /**
     * Unit of measurement for the transaction quantities.
     */
    unit?: string | null;
    /**
     * Package identifier for compliance tracking and traceability.
     */
    packageId?: string | null;
    /**
     * External package identifier from integrated compliance systems.
     */
    externalPackageId?: string | null;
    /**
     * Batch identifier for lot tracking (optional).
     */
    batchId?: number | null;
    /**
     * Batch name or lot number for quality tracking (optional).
     */
    batchName?: string | null;
    /**
     * Transaction quantity for non-adjustment operations (Move, Convert, Receive, etc.).
     */
    quantity?: number | null;
    /**
     * Original quantity before adjustment (used for Adjust transaction type).
     */
    fromQuantity?: number | null;
    /**
     * New quantity after adjustment (used for Adjust transaction type).
     */
    toQuantity?: number | null;
    /**
     * Reason for adjustment (used for Adjust transaction type).
     */
    reason?: string | null;
    /**
     * Receive inventory history identifier for received inventory linkage (optional).
     */
    receiveInventoryHistoryId?: number | null;
    /**
     * Source location name for Move transactions.
     */
    fromLocation?: string | null;
    /**
     * Source room name for Move transactions.
     */
    fromRoom?: string | null;
    /**
     * Destination location name for Move transactions.
     */
    toLocation?: string | null;
    /**
     * Destination room name for Move transactions.
     */
    toRoom?: string | null;
    /**
     * Conversion transaction identifier for Convert operations (optional).
     */
    conversionTransactionID?: number | null;
    /**
     * Username or identifier of the person who performed the transaction.
     */
    transactionBy?: string | null;
    /**
     * Date and time when the transaction was performed.
     */
    transactionDate?: string;
    /**
     * Unit cost of the package at the time of transaction (optional).
     */
    unitCost?: number | null;
    /**
     * Purchase order identifier for received inventory linkage (optional).
     */
    purchaseOrderId?: number | null;
    /**
     * Unique inventory item identifier affected by this transaction.
     */
    inventoryId?: number;
};

/**
 * Represents a customer journal entry containing notes and interaction history for customer service tracking.
 */
export type JournalEntry = {
    /**
     * Unique identifier for the journal entry.
     */
    journalEntryId: number;
    /**
     * Brief title or summary of the journal entry.
     */
    subject: string | null;
    /**
     * Detailed content and notes for the journal entry.
     */
    body: string | null;
    /**
     * Date and time when the journal entry was created or should be dated.
     */
    date: string;
};

/**
 * Laboratory testing result model for cannabis and cannabis product analysis.
 */
export type LabResult = {
    /**
     * Name of the laboratory test performed (e.g., "THC", "CBD", "Myrcene", "Total Aerobic Count").
     */
    labTest: string | null;
    /**
     * Numeric test result value (null if not detected or not applicable).
     */
    value: number | null;
    labResultUnitId: LabResultUnit;
    /**
     * Human-readable unit name corresponding to the LabResultUnitId.
     */
    readonly labResultUnit: string | null;
};

export type LabResultUnit = 1 | 2 | 3 | 4 | 5 | 6;

/**
 * Laboratory result unit data model for cannabis testing measurements and reporting.
 */
export type LabResultUnitData = {
    /**
     * Unique identifier for the lab result unit type.
     */
    labResultUnitId: number;
    /**
     * Display name of the lab result unit (e.g., "mg", "%", "mg/g", "ND", "LOQ", "Pass/Fail").
     */
    labResultUnit: string | null;
};

/**
 * Tax information applied to individual transaction line items in cannabis retail operations.
 */
export type LineItemTaxInfo = {
    /**
     * Name of the tax rate applied (e.g., "State Excise Tax", "City Cannabis Tax", "Sales Tax").
     */
    rateName: string | null;
    /**
     * Tax rate as a decimal percentage (e.g., 0.0875 for 8.75% tax rate).
     */
    rate: number;
    /**
     * Calculated tax amount applied to the line item (in USD).
     */
    amount: number;
    /**
     * Reference identifier linking this tax information back to the specific transaction line item.
     * Not guaranteed to be unique outside of a single transaction.
     */
    readonly transactionItemId: number;
};

/**
 * Cannabis genetic lineage model containing hereditary classification information for product categorization and genetic tracking.
 */
export type Lineage = {
    /**
     * Unique identifier for the genetic lineage.
     */
    lineageId: number;
    /**
     * Display name for the genetic lineage (e.g., "Indica", "Sativa", "Hybrid").
     */
    lineageName: string | null;
};

/**
 * Location identity model containing complete location and parent company information for API key verification and context identification.
 */
export type LocationIdentity = {
    /**
     * Unique identifier for the cannabis dispensary location.
     */
    locationId: number;
    /**
     * Unique identifier for the parent company (LSP - Licensed Service Provider).
     */
    lspId: number;
    /**
     * Business name of the cannabis dispensary location.
     */
    locationName: string | null;
    /**
     * Company name of the parent organization (Licensed Service Provider).
     */
    lspName: string | null;
    /**
     * Primary street address of the dispensary location.
     */
    address: string | null;
    /**
     * Secondary address line (suite, unit, etc.) if applicable.
     */
    address2: string | null;
    /**
     * City where the dispensary is located.
     */
    city: string | null;
    /**
     * State or province where the dispensary is licensed to operate.
     */
    state: string | null;
    /**
     * Postal code (ZIP code) for the dispensary location.
     */
    postalCode: string | null;
    /**
     * State-issued cannabis business license number for regulatory compliance.
     */
    licenseNumber: string | null;
    /**
     * "Doing Business As" name if different from the legal business name.
     */
    doingBusinessAs: string | null;
    /**
     * Indicates whether customer profiles are shared across locations within the organization.
     */
    shareCustomerProfiles: boolean;
    /**
     * Legacy global unique identifier for the location (deprecated).
     *
     * @deprecated
     */
    globalId: string | null;
    /**
     * Global unique identifier for the location across all systems and integrations.
     */
    locationGlobalId: string | null;
    /**
     * Global unique identifier for the parent company (LSP) across all systems.
     */
    lspGlobalId: string | null;
    /**
     * Regional identifier for compliance and API routing (internal use only).
     */
    region: string | null;
    /**
     * Base64-encoded SHA256 hash of the region identifier for secure regional routing.
     */
    readonly regionId: string | null;
};

/**
 * Location mapping model for associating discounts with specific business locations.
 */
export type LocationMapping = {
    /**
     * Name of the location where the discount applies.
     */
    locationName: string | null;
};

export type LocationProductOverride = {
    productId: number;
    price: number | null;
    recPrice: number | null;
    cost: number | null;
    onlineAvailable: boolean | null;
    posAvailable: boolean | null;
    maxPurchasable: number | null;
    lowInventoryThreshold: number | null;
    customMetadata: string | null;
};

export type LocationProductOverrideRequest = {
    /**
     * Product identifier for the product being configured with location-specific overrides.
     */
    productId: number;
    price: DecimalNullableOptional;
    recPrice: DecimalNullableOptional;
    cost: DecimalNullableOptional;
    onlineAvailable: BooleanNullableOptional;
    posAvailable: BooleanNullableOptional;
    maxPurchasable: DecimalNullableOptional;
    lowInventoryThreshold: DecimalNullableOptional;
    customMetadata: StringOptional;
};

export type LocationResponse = {
    locationName: string | null;
    locId: number;
    licenseNumber: string | null;
    readonly outcome: string | null;
    readonly outcomeId: number;
    broadcastedTo: string | null;
    errorDetail: string | null;
};

/**
 * Represents a customer's loyalty program balance and activity snapshot for reporting purposes.
 *
 * Contains current point balances and historical activity for individual customers within the
 * loyalty program. Used for daily balance reporting, customer service inquiries, and loyalty
 * program analytics. Data reflects nightly batch processing and may not include real-time changes.
 */
export type LoyaltySnapshot = {
    /**
     * Unique identifier for the customer in the loyalty program.
     * Links this loyalty snapshot to the specific customer account.
     */
    customerId: number;
    /**
     * Current available loyalty points balance for the customer.
     * Represents points that can be redeemed for rewards or discounts.
     */
    loyaltyBalance: number;
    /**
     * Total loyalty points redeemed/spent by the customer over their lifetime.
     * Historical record of all point redemptions and rewards claimed.
     */
    loyaltySpent: number;
    /**
     * Total loyalty points earned by the customer over their lifetime.
     * Historical record of all points awarded through purchases and activities.
     */
    loyaltyEarned: number;
};

/**
 * Manual payment information for cannabis transactions processed outside integrated payment systems.
 */
export type ManualPayment = {
    /**
     * Name of the manual payment processor or handling method (e.g., "Cash", "Check", "Money Order").
     */
    manualPaymentProcessorName: string | null;
    /**
     * Amount paid through the manual payment method (in USD).
     */
    manualPaid: number;
};

/**
 * Detailed specification for creating individual mature plant batches with compliance tracking information.
 */
export type MatureBatchDetails = {
    /**
     * Batch identifier for the mature plant batch being created.
     */
    batchId: number;
    /**
     * Collection of individual plant serial numbers within the mature batch for state tracking compliance.
     */
    serialNumbers: Array<string> | null;
    /**
     * Growth stage designation for the mature batch (e.g., "Vegetative", "Flowering").
     */
    batchStage: string | null;
    /**
     * Room identifier for the mature batch location assignment.
     */
    roomId: number;
    /**
     * Table identifier within the room for precise location tracking (optional).
     */
    tableId: number | null;
    /**
     * Date when the mature batch was created for cultivation timeline documentation.
     */
    dateCreated: string | null;
};

/**
 * Request model for moving cannabis plants to a different cultivation room or table within the same facility.
 *
 * **Movement Behavior:**
 * - Moves specified plants to target room within same facility
 * - Optional table assignment for precise cultivation area management
 * - Validates target room belongs to same facility for security
 * - Automatically updates plant cultivation stage if room has associated stage
 *
 * **Facility Restrictions:**
 * - Target room must belong to same facility as requesting user
 * - Cross-facility plant movements are prohibited for security and compliance
 * - All plant IDs must be accessible to the authenticated location
 *
 * **Integration:**
 * - Movement synchronized with external cultivation systems when configured
 * - Supports cultivation workflow automation and environmental optimization
 */
export type MovePlantRequest = {
    /**
     * Collection of LeafLogix plant IDs to move to the target room
     */
    plantIds: Array<number> | null;
    /**
     * Target cultivation room ID within the same facility where plants will be moved
     */
    roomId: number;
    /**
     * Optional table ID within the target room for precise plant positioning (optional)
     */
    tableId: number | null;
};

/**
 * Generic waste record model containing waste disposal information and associated detail records for cannabis compliance and waste tracking.
 */
export type ObjectWaste = {
    /**
     * Unique identifier for the waste record (null for new waste creation).
     */
    wasteId: number | null;
    /**
     * Reference number for waste tracking and documentation.
     */
    referenceNo: string | null;
    /**
     * Additional comments or notes about the waste disposal.
     */
    comments: string | null;
    /**
     * Date when the waste disposal occurred.
     */
    wasteDate: string | null;
    /**
     * Collection of waste detail records containing specific item information.
     */
    wasteDetail: Array<{
        [key: string]: unknown;
    }> | null;
    /**
     * Licensed Service Provider identifier (internal use only).
     */
    lspId: number | null;
    /**
     * Location identifier (internal use only).
     */
    locId: number | null;
    /**
     * Indicates if room identification is required for this waste type (internal use only).
     */
    roomRequired: boolean | null;
    /**
     * Indicates if this waste integrates with BioTrack system (internal use only).
     */
    isBioTrack: boolean | null;
};

/**
 * Package lineage tracking model for cannabis product traceability and regulatory compliance.
 */
export type PackageLineage = {
    /**
     * Package identifier for the current package in the lineage chain.
     */
    packageId: string | null;
    /**
     * Number of generations between current package and antecedent package in the lineage chain.
     */
    antecedentPackageDistance: number;
    /**
     * Flag indicating whether the antecedent package originated from a harvest operation.
     */
    antecedentIsHarvest: boolean;
    /**
     * Batch name for the current package for lot tracking and quality control.
     */
    batchName: string | null;
    /**
     * Batch name of the antecedent package for lineage and quality tracking.
     */
    antecedentBatchName: string | null;
};

export type Plant = {
    plantId: number;
    serialNumber: string | null;
    growthPhase: string | null;
    type: string | null;
    harvestedWeight: number | null;
    status: string | null;
    plantCount: number | null;
    isMother: boolean;
    motherPlantId: number | null;
    plantedOn: string | null;
    addedToHarvestOn: string | null;
    harvestDate: string | null;
    destroyedDate: string | null;
    plantGroupName: string | null;
    strain: string | null;
    room: string | null;
    table: string | null;
    vegetationStartedOn: string | null;
    vegetationEndedOn: string | null;
    floweringStartedOn: string | null;
    floweringEndedOn: string | null;
    currentPhaseStartDate: string | null;
    lastModifiedDate: string | null;
    daysInCurrentPhase: number | null;
    floweringRoom: string | null;
    floweringTable: string | null;
    vegetationRoom: string | null;
    vegetationTable: string | null;
    daysInFlowering: number | null;
    daysInVegetation: number | null;
    batchId: number;
    readonly harvestId: number;
};

/**
 * Plant waste detail model for tracking waste generated from specific plant disposal operations.
 */
export type PlantWasteDetail = {
    /**
     * Identifier for the plant generating this waste.
     */
    plantId: number;
    /**
     * Type or category of waste material from the plant.
     */
    wasteType: string | null;
    /**
     * Quantity of waste material generated from the plant.
     */
    wasteAmount: number;
    /**
     * Unit of measurement identifier for the waste amount.
     */
    unitId: number;
};

/**
 * Generic waste record model containing waste disposal information and associated detail records for cannabis compliance and waste tracking.
 */
export type PlantWasteDetailWaste = {
    /**
     * Unique identifier for the waste record (null for new waste creation).
     */
    wasteId: number | null;
    /**
     * Reference number for waste tracking and documentation.
     */
    referenceNo: string | null;
    /**
     * Additional comments or notes about the waste disposal.
     */
    comments: string | null;
    /**
     * Date when the waste disposal occurred.
     */
    wasteDate: string | null;
    /**
     * Collection of waste detail records containing specific item information.
     */
    wasteDetail: Array<PlantWasteDetail> | null;
    /**
     * Licensed Service Provider identifier (internal use only).
     */
    lspId: number | null;
    /**
     * Location identifier (internal use only).
     */
    locId: number | null;
    /**
     * Indicates if room identification is required for this waste type (internal use only).
     */
    roomRequired: boolean | null;
    /**
     * Indicates if this waste integrates with BioTrack system (internal use only).
     */
    isBioTrack: boolean | null;
};

/**
 * Request model for creating immature plant batches in cannabis cultivation operations.
 */
export type PostImmatureBatchRequest = {
    /**
     * Collection of immature plant batch specifications for bulk batch creation operations.
     */
    batches: Array<BatchDetails> | null;
};

export type PreOrderItem = {
    productId: number;
    quantity: number;
};

export type PreOrderRedemption = {
    productId?: number | null;
    redemptionType: string;
    redemptionId: string;
    redemptionDescription?: string | null;
    redemptionCallbackUrl?: string | null;
};

export type PreOrderRedemptionIEnumerableOptional = Array<unknown>;

export type PreOrderStatus = {
    preOrderId: number;
    status: string | null;
    transactionId: number | null;
    orderDate: string;
    customerFirstName: string | null;
    customerLastName: string | null;
    customerId: number;
    orderType: string | null;
    orderSource: string | null;
    rejectedReason: string | null;
    isCancellable: boolean;
    isUpdateable: boolean;
    total: number | null;
    subTotal: number | null;
    totalTax: number | null;
    sourceSystem: string | null;
    items: Array<AllocatedPreOrderItem> | null;
};

export type PrecartItem = {
    productId: number;
    quantity: number;
};

/**
 * Request model for calculating pricing, taxes, and discounts for a customer's shopping cart before creating a pre-order.
 */
export type PriceCartRequest = {
    /**
     * Collection of products in the customer's shopping cart with quantities and specifications.
     */
    cart: Array<PrecartItem> | null;
    /**
     * Customer type identifier for pricing tier and discount eligibility (e.g., medical, recreational).
     */
    customerTypeId: number | null;
    /**
     * Unique customer identifier for personalized pricing and loyalty program benefits.
     */
    customerId: number | null;
    /**
     * Primary street address for delivery orders (used for tax calculation and delivery fee estimation).
     */
    deliveryStreet: string | null;
    /**
     * Secondary address information (apartment, suite, unit number) for delivery orders.
     */
    deliveryStreet2: string | null;
    /**
     * City name for delivery address (used for tax jurisdiction determination).
     */
    deliveryCity: string | null;
    /**
     * State or province for delivery address (used for tax calculation and compliance verification).
     */
    deliveryState: string | null;
    /**
     * Postal or ZIP code for delivery address (used for precise tax calculation and delivery zones).
     */
    deliveryPostalCode: string | null;
    /**
     * Indicates whether this is a delivery order (true) or pickup order (false) for tax and fee calculation.
     */
    isDelivery: boolean;
};

export type PriceEstimates = {
    discountAmount: number;
    taxAmount: number;
    feeAmount: number;
    subtotal: number;
    grandTotal: number;
};

/**
 * Pricing detail information for cannabis products with medical and recreational pricing tiers.
 */
export type PricingDetail = {
    /**
     * Medical cannabis patient pricing (typically lower due to tax benefits and patient programs).
     */
    medPrice: number | null;
    /**
     * Recreational adult-use cannabis pricing (standard retail pricing with full taxes).
     */
    recPrice: number | null;
    /**
     * Pricing tier name for customer segmentation (e.g., "Standard", "VIP", "Bulk", "Employee").
     */
    pricingTierName: string | null;
};

export type PricingTier = {
    pricingTierId: number;
    pricingTierName: string | null;
};

export type PricingTierData = {
    startWeight: number | null;
    endWeight: number | null;
    price: number;
    medicalPrice: number;
};

/**
 * Producer identification model containing basic producer information for product attribution and reference data needs.
 */
export type Producer = {
    /**
     * Unique identifier for the producer.
     */
    producerId: number;
    /**
     * Display name of the producer for product attribution and branding.
     */
    producerName: string | null;
};

/**
 * Product category model containing cannabis product classification information for menu organization and product management.
 */
export type ProductCategory = {
    /**
     * Unique identifier for the product category.
     */
    productCategoryId: number;
    /**
     * Display name of the product category (e.g., "Flower", "Edibles", "Concentrates").
     */
    productCategoryName: string | null;
    /**
     * Higher-level master category classification for broader product grouping.
     */
    masterCategory: string | null;
};

export type ProductDetail = {
    productId: number;
    sku: string | null;
    internalName: string | null;
    productName: string | null;
    description: string | null;
    masterCategory: string | null;
    categoryId: number | null;
    category: string | null;
    imageUrl: string | null;
    imageUrls: Array<string> | null;
    strainId: number | null;
    strain: string | null;
    strainType: string | null;
    size: string | null;
    netWeight: number | null;
    netWeightUnitId: number | null;
    readonly netWeightUnit: string | null;
    brandId: number | null;
    brandName: string | null;
    vendorId: number | null;
    vendorName: string | null;
    isCannabis: boolean;
    isActive: boolean;
    isCoupon: boolean;
    thcContent: number | null;
    thcContentUnit: string | null;
    cbdContent: number | null;
    cbdContentUnit: string | null;
    productGrams: number | null;
    flowerEquivalent: number | null;
    recFlowerEquivalent: number | null;
    price: number | null;
    medPrice: number | null;
    recPrice: number | null;
    unitCost: number | null;
    unitType: string | null;
    onlineTitle: string | null;
    onlineDescription: string | null;
    readonly onlineProduct: boolean | null;
    posProducts: boolean | null;
    pricingTier: number | null;
    onlineAvailable: boolean | null;
    lowInventoryThreshold: number | null;
    pricingTierName: string | null;
    pricingTierDescription: string | null;
    pricingTierData: Array<PricingTierData> | null;
    flavor: string | null;
    alternateName: string | null;
    lineageName: string | null;
    distillationName: string | null;
    maxPurchaseablePerTransaction: number | null;
    tags: Array<ProductTag> | null;
    effects: Array<ProductEffect> | null;
    dosage: string | null;
    instructions: string | null;
    allergens: string | null;
    standardAllergens: StandardAllergensDetails;
    defaultUnit: string | null;
    producerId: number | null;
    producerName: string | null;
    createdDate: string | null;
    isMedicalOnly: boolean;
    lastModifiedDateUTC: string | null;
    grossWeight: number | null;
    isTaxable: boolean | null;
    taxCategories: Array<string> | null;
    upc: string | null;
    regulatoryCategory: string | null;
    ndc: string | null;
    daysSupply: number | null;
    readonly illinoisTaxCategory: string | null;
    externalCategory: string | null;
    externalId: string | null;
    syncExternally: boolean;
    regulatoryName: string | null;
    broadcastedResponses: BroadcastedResponses;
    administrationMethod: string | null;
    unitCBDContentDose: number | null;
    unitTHCContentDose: number | null;
    oilVolume: number | null;
    ingredientList: string | null;
    expirationDays: number | null;
    abbreviation: string | null;
    isTestProduct: boolean;
    isFinished: boolean;
    allowAutomaticDiscounts: boolean;
    servingSize: string | null;
    servingSizePerUnit: number | null;
    isNutrient: boolean;
    approvalDateUTC: string | null;
    ecomCategory: string | null;
    ecomSubcategory: string | null;
    customMetadata: string | null;
};

/**
 * Product upload model for creating and updating products.
 *
 * ⚠️ **DATA LOSS WARNING**: Most fields will be overwritten with null/zero if not provided.
 * **RECOMMENDED**: Use GET /products first, modify needed fields, then POST the complete object.
 */
export type ProductDetailUpload = {
    /**
     * The unique identifier for a product in the system.
     *
     * **IMPORTANT**: This field determines whether a product is created or updated:
     * - To CREATE a new product: Omit this field or set to null
     * - To UPDATE an existing product: You MUST provide the ProductId of the existing product
     */
    productId?: number | null;
    /**
     * Product SKU - REQUIRED for CREATE operations
     */
    sku: string;
    /**
     * Product Name - REQUIRED for CREATE operations
     */
    productName: string;
    /**
     * Deprecated in favor of AlternateName
     */
    description?: string | null;
    alternateName?: string | null;
    masterCategory?: string | null;
    category?: string | null;
    strain?: string | null;
    /**
     * Strain type of the specified strain.
     * Used to disambiguate strains, if duplicates exist.
     * If no duplicates exist in the location's strain list, this field is not useful.
     * If duplicates DO exist and this field is not specified, the strain will be chosen by the first one created.
     */
    strainType?: string | null;
    size?: string | null;
    netWeight?: number | null;
    /**
     * Optional.  Abbreviation of the unit of the product's net weight.
     */
    netWeightUnit?: string | null;
    grossWeight?: number | null;
    brandName?: string | null;
    vendorName?: string | null;
    isCannabis?: boolean;
    isActive?: boolean;
    thcContent?: number | null;
    /**
     * mg; %; mg/g; n.d.
     */
    thcContentUnit?: string | null;
    cbdContent?: number | null;
    /**
     * mg; %; mg/g; n.d.
     */
    cbdContentUnit?: string | null;
    productGrams?: number | null;
    flowerEquivalent?: number | null;
    recFlowerEquivalent?: number | null;
    price?: number | null;
    unitCost?: number | null;
    unitType?: string | null;
    onlineTitle?: string | null;
    onlineDescription?: string | null;
    onlineProduct?: boolean | null;
    posProducts?: boolean | null;
    tags?: Array<number> | null;
    defaultUnit?: string | null;
    isMedicalOnly?: boolean | null;
    isTaxable?: boolean | null;
    regulatoryCategory?: string | null;
    ndc?: string | null;
    daysSupply?: number | null;
    illinoisTaxCategory?: string | null;
    externalCategory?: string | null;
    externalId?: StringOptional;
    syncExternally?: boolean | null;
    bypassExternalUpdate?: boolean | null;
    administrationMethod?: StringOptional;
    unitCBDContentDose?: DecimalNullableOptional;
    unitTHCContentDose?: DecimalNullableOptional;
    oilVolume?: DecimalNullableOptional;
    ingredientList?: StringOptional;
    expirationDays?: Int32NullableOptional;
    abbreviation?: StringOptional;
    isTestProduct?: BooleanOptional;
    isFinished?: BooleanOptional;
    allowAutomaticDiscounts?: BooleanOptional;
    servingSize?: StringOptional;
    servingSizePerUnit?: Int32NullableOptional;
    isNutrient?: BooleanOptional;
    approvalDateUTC?: DateTimeNullableOptional;
    customMetadata?: StringOptional;
    /**
     * List of strings of tax categories that the product belongs to.
     */
    taxCategories?: Array<string> | null;
    pricingDetails?: PricingDetail;
    /**
     * UserName of the user making the product change
     * This will be used when authorizing with traceability systems (METRC/BioTrack) - if not included or NULL is specified, the traceability integration's "master key" will be used, if possible.
     * This field is only relevant if the request is setting SyncExternally to true
     */
    userName?: string | null;
    instructions?: string | null;
    upc?: string | null;
    regulatoryName?: StringOptional;
    broadcast?: BooleanOptional;
};

export type ProductEffect = {
    effectId: number;
    effectName: string | null;
    productId: number;
};

export type ProductTag = {
    tagId: number;
    tagName: string | null;
    productId: number;
};

/**
 * Published discount model containing complete discount configuration and constraint information for customer-facing applications.
 */
export type PublishedDiscount = {
    /**
     * Unique identifier for the discount.
     */
    discountId: number;
    /**
     * Display name of the discount for customer-facing applications.
     */
    discountName: string | null;
    /**
     * Monetary discount amount or percentage value.
     */
    discountAmount: number;
    /**
     * Promotional code required to apply the discount (optional).
     */
    discountCode: string | null;
    /**
     * Type classification of the discount (e.g., percentage, fixed amount).
     */
    discountType: string | null;
    /**
     * Method used to apply the discount (e.g., automatic, code required).
     */
    discountMethod: string | null;
    /**
     * Indicates if the discount is currently active and available.
     */
    isActive: boolean;
    /**
     * Start date and time when discount becomes valid (UTC converted from Eastern Time).
     */
    validFrom: string | null;
    /**
     * End date and time when discount expires (UTC converted from Eastern Time).
     */
    validUntil: string | null;
    /**
     * Type of threshold requirement for discount eligibility (optional).
     */
    thresholdType: string | null;
    /**
     * Minimum number of qualifying items required for discount application (optional).
     */
    minimumItemsRequired: number | null;
    /**
     * Maximum number of items that can receive the discount (optional).
     */
    maximumItemsAllowed: number | null;
    /**
     * Maximum number of times this discount can be used (optional).
     */
    maximumUsageCount: number | null;
    /**
     * Indicates if discount applies to non-cannabis products.
     */
    includeNonCannabis: boolean;
    /**
     * Indicates if discount is restricted to first-time customers only.
     */
    firstTimeCustomerOnly: boolean;
    /**
     * Indicates if discount can be combined with other discounts.
     */
    stackOnOtherDiscounts: boolean;
    weeklyRecurrenceInfo: WeeklyRecurrenceInfo;
    products: DiscountRestriction;
    productCategories: DiscountRestriction;
    brands: DiscountRestriction;
    vendors: DiscountRestriction;
    strains: DiscountRestriction;
    tiers: DiscountRestriction;
    tags: DiscountRestriction;
    inventoryTags: DiscountRestriction;
    customerTypes: DiscountRestriction;
    /**
     * Associated discount groups for bundling and organization (loaded conditionally).
     */
    discountGroups: Array<DiscountGroup> | null;
};

export type PurchaseOrderData = {
    purchaseOrderId: number;
    expectedArrivalDate: string | null;
    title: string | null;
    dateReceived: string | null;
    dateSubmitted: string | null;
    shippingInformation: string | null;
    vendorId: number;
    vendorName: string | null;
    vendorContact: string | null;
    status: string | null;
    purchaseOrderNumber: number;
    createdByUser: string | null;
    dateCreated: string | null;
    purchaseOrderItems: Array<PurchaseOrderItemDetail> | null;
};

export type PurchaseOrderItemDetail = {
    purchaseOrderId: number;
    purchaseOrderItemId: number;
    productId: number;
    productName: string | null;
    quantity: number;
    unitId: number;
    unitName: string | null;
    unitNameAbbreviation: string | null;
    subtotal: number;
    tax: number;
};

/**
 * Request model for receiving and recording new cannabis inventory items into the facility management system.
 */
export type ReceiveInventoryItemSave = {
    /**
     * Product identifier for the cannabis product being received into inventory (required).
     */
    productId: number;
    /**
     * Quantity of the product being received into inventory (required).
     */
    quantity: number;
    /**
     * Unit type for the received quantity (qty; ml; g; Gal; L; lb; mg; oz; fl oz; kg).
     */
    unitType?: string | null;
    /**
     * Flower equivalent weight for regulatory compliance and limit calculations.
     */
    flowerEquivalent?: number | null;
    /**
     * Recreational flower equivalent weight for regulatory compliance tracking.
     */
    recFlowerEquivalent?: number | null;
    /**
     * Vendor identifier for supply chain tracking and vendor management.
     */
    vendorId?: number | null;
    /**
     * Room identifier for facility location assignment and space management.
     */
    roomId?: number | null;
    /**
     * Package identifier from state tracking system for compliance documentation.
     */
    packageId?: string | null;
    /**
     * Lot number for batch tracking and quality control management.
     */
    lot?: string | null;
    /**
     * Unit cost for inventory valuation and cost accounting.
     */
    cost?: number | null;
    /**
     * General retail price for the received inventory item.
     */
    price?: number | null;
    /**
     * Recreational market price for dual-license operations.
     */
    recPrice?: number | null;
    /**
     * Tax amount for financial compliance and tax reporting.
     */
    tax?: number | null;
    /**
     * Product expiration date for inventory rotation and compliance management.
     */
    expirationDate?: string | null;
    /**
     * Collection of tag identifiers for product categorization and organization.
     */
    tags?: Array<number> | null;
    /**
     * Cultivation tax amount for cannabis-specific tax compliance.
     */
    cultivationTax?: number | null;
    /**
     * Table identifier within the room for precise location tracking.
     */
    tableId?: number | null;
    /**
     * Source allocated inventory identifier for traceability and audit trails.
     */
    sourceAllocatedInventoryId?: number | null;
    /**
     * Total package cost for comprehensive cost allocation and accounting.
     */
    totalPackageCost?: number | null;
    /**
     * Flag to retrieve lab results from Metrc for compliance integration.
     */
    getMetrcLabResults?: boolean | null;
    /**
     * Product name for inventory identification and display purposes.
     */
    productName?: string | null;
    /**
     * Date when the product was packaged for shelf life tracking.
     */
    packagingDate?: string | null;
    /**
     * Date when the product was manufactured for quality control tracking.
     */
    manufacturingDate?: string | null;
    /**
     * Producer identifier for supply chain tracking and compliance documentation.
     */
    producerId?: number | null;
    /**
     * External package identifier for cross-system integration and tracking.
     */
    externalPackageId?: string | null;
    /**
     * Potency indicator for product strength classification and customer information.
     */
    potencyIndicator?: string | null;
};

/**
 * Request model for creating inventory receive orders for incoming transfers, purchase orders, or direct inventory additions.
 */
export type ReceiveInventorySave = {
    /**
     * Vendor identifier for the supplier (optional, can be resolved from VendorLicense).
     */
    vendorId?: number | null;
    /**
     * Name of the person who delivered the inventory shipment.
     */
    deliveredBy?: string | null;
    /**
     * Date and time when the inventory was delivered (required).
     */
    deliveredOn: string;
    /**
     * Vendor license code for compliance tracking and vendor identification.
     */
    vendorLicense?: string | null;
    /**
     * External transaction reference ID for tracking and reconciliation.
     */
    transactionId?: string | null;
    /**
     * Descriptive title for the receive order for identification purposes.
     */
    orderTitle?: string | null;
    /**
     * External system ID for preventing duplicate receives (must be unique).
     */
    externalId?: string | null;
    /**
     * Additional notes or comments about the receive transaction.
     */
    note?: string | null;
    /**
     * Collection of inventory items being received in this transaction.
     */
    items?: Array<ReceiveInventoryItemSave> | null;
    /**
     * Indicates whether to immediately process items into inventory (true) or save as draft (false).
     */
    receiveIntoInventory?: boolean | null;
    /**
     * User ID for processing the receive (required when ReceiveIntoInventory=true).
     */
    userId?: number | null;
    /**
     * Username for processing the receive (alternative to UserId, required when ReceiveIntoInventory=true).
     */
    userName?: string | null;
};

/**
 * Received inventory record model representing completed or pending inventory receive orders and their processing status.
 */
export type ReceivedInventory = {
    /**
     * Unique identifier for the receive inventory transaction.
     */
    receiveInventoryHistoryId: number;
    /**
     * Descriptive title for the receive order for identification purposes.
     */
    title: string | null;
    /**
     * Current processing status of the receive order (e.g., "Pending", "Completed", "Failed").
     */
    status: string | null;
    /**
     * Error message if the receive order failed processing (optional).
     */
    failureMessage: string | null;
    /**
     * Date and time when the inventory was delivered by the vendor (optional).
     */
    deliveredOn: string | null;
    /**
     * Date and time when the receive order was created in the system (optional).
     */
    addedOn: string | null;
    /**
     * Name of the vendor who supplied the inventory.
     */
    vendor: string | null;
    /**
     * Vendor license code for compliance tracking and verification.
     */
    vendorLicense: string | null;
    /**
     * Collection of inventory items included in this receive order.
     */
    items: Array<ReceivedInventoryItem> | null;
};

/**
 * Response model representing received cannabis inventory items with complete tracking and financial information.
 */
export type ReceivedInventoryItem = {
    /**
     * Product name for inventory item identification and display.
     */
    product: string | null;
    /**
     * Stock Keeping Unit (SKU) for product identification and retail operations.
     */
    sku: string | null;
    /**
     * Product identifier for database references and system integration.
     */
    productId: number | null;
    /**
     * Product type classification for cannabis product categorization.
     */
    type: string | null;
    /**
     * Quantity of the received inventory item for stock tracking.
     */
    quantity: number;
    /**
     * Unit abbreviation for quantity measurement display (e.g., "g", "oz", "ml").
     */
    unitAbbreviation: string | null;
    /**
     * Full unit name for quantity measurement (e.g., "grams", "ounces", "milliliters").
     */
    unit: string | null;
    /**
     * Cost per unit for inventory valuation and financial accounting.
     */
    unitCost: number;
    /**
     * Tax amount per unit for cannabis tax compliance and reporting.
     */
    unitTax: number;
    /**
     * Total cost for the received inventory item including all taxes and fees.
     */
    totalCost: number;
    /**
     * Package identifier from state tracking system for compliance documentation.
     */
    packageId: string | null;
    /**
     * External package identifier for cross-system tracking and integration.
     */
    externalPackageId: string | null;
    /**
     * Batch name for lot tracking and quality control management.
     */
    batchName: string | null;
    /**
     * Batch identifier for database references and batch tracking.
     */
    batchId: number | null;
    /**
     * Room name for facility location identification and display.
     */
    room: string | null;
    /**
     * Room identifier for database references and location tracking.
     */
    roomId: number | null;
};

/**
 * Represents a register cash adjustment transaction record for financial reconciliation and audit trails.
 *
 * Register adjustments include manual cash corrections, deposits, withdrawals, close-outs, and other
 * cash management activities that affect register balances. Each adjustment maintains a complete
 * audit trail with employee accountability and reason tracking.
 */
export type RegisterAdjustment = {
    /**
     * Unique identifier for the register adjustment transaction.
     * Primary key for tracking and referencing specific adjustment records.
     */
    adjustmentId: number;
    /**
     * Type of register adjustment being performed.
     * Common values include "Adjustment", "Close Out", "Deposit", "Withdrawal", "Cash Drop".
     */
    adjustmentType: string | null;
    /**
     * Dollar amount of the register adjustment (positive or negative).
     * Positive values indicate cash added to register, negative values indicate cash removed.
     */
    adjustmentAmount: number;
    /**
     * Name of the employee who performed the register adjustment.
     * Used for accountability and audit trail purposes.
     */
    adjustedBy: string | null;
    /**
     * Date and time when the register adjustment was performed (optional).
     * Timestamp for audit trail and reconciliation purposes.
     */
    adjustedOn: string | null;
    /**
     * Name of the register/terminal where the adjustment occurred.
     * Identifies which physical register or point-of-sale terminal was adjusted.
     */
    terminalName: string | null;
    /**
     * Unique identifier for the register/terminal where the adjustment occurred.
     * Numeric identifier for the specific point-of-sale terminal.
     */
    terminalId: number;
    /**
     * Employee ID of the staff member who performed the adjustment.
     * Numeric identifier linking to the employee record for accountability.
     */
    adjustedByEmployeeId: number;
    /**
     * Reason code or description for why the adjustment was made.
     * Provides business justification for the cash adjustment.
     */
    adjustmentReason: string | null;
    /**
     * Additional comments or notes about the register adjustment (optional).
     * Free-text field for additional details or explanations.
     */
    comment: string | null;
};

/**
 * Represents a comprehensive cash flow summary for a specific register terminal.
 *
 * This model provides real-time cash reconciliation data including starting balances,
 * transaction activity, and variance calculations for cash management and balancing
 * purposes. Used for end-of-shift reconciliation and cash discrepancy identification.
 */
export type RegisterCashSummary = {
    /**
     * Name of the register/terminal for which this cash summary applies.
     * Identifies the specific point-of-sale terminal or register location.
     */
    terminalName: string | null;
    /**
     * Starting cash balance for the register at the beginning of the period.
     * Base amount of cash in the register before any transactions occurred.
     */
    startingBalance: number;
    /**
     * Ending cash balance for the register at the end of the period.
     * Final amount of cash in the register after all transactions and adjustments.
     */
    endingBalance: number;
    /**
     * Total cash sales processed through the register during the period.
     * Includes all cash payments received for customer transactions.
     */
    sales: number;
    /**
     * Total cash refunds and returns processed during the period.
     * Represents cash paid out to customers for returned merchandise.
     */
    returns: number;
    /**
     * Total cash deposits added to the register during the period.
     * Includes cash added to the register for operational purposes.
     */
    deposits: number;
    /**
     * Total register adjustments (positive or negative) made during the period.
     * Includes manual cash corrections, withdrawals, and balancing entries.
     */
    adjustments: number;
    /**
     * Cash variance (over or short) compared to expected register balance.
     * Positive values indicate cash overage, negative values indicate shortage.
     */
    overShort: number;
};

/**
 * Represents a comprehensive register transaction record including sales, adjustments, and cash management activities.
 *
 * This model encompasses all types of register activity including customer sales transactions, cash adjustments,
 * payment processing, register maintenance, and operational activities. Each transaction maintains complete
 * audit trails with employee accountability and detailed financial information.
 */
export type RegisterTransaction = {
    /**
     * Unique identifier for the register transaction record.
     * Primary key for tracking and referencing specific transaction activities.
     */
    registerTransactionId: number;
    /**
     * Type of register transaction being recorded.
     * Examples include "Sale", "Adjustment", "Close Out", "Deposit", "Withdrawal", "Return", "Payment".
     */
    transactionType: string | null;
    /**
     * Dollar amount of the register transaction (positive or negative).
     * Represents the financial impact of the transaction on register balances.
     */
    transactionAmount: number;
    /**
     * Name of the employee who processed the register transaction.
     * Used for accountability and performance tracking.
     */
    transactionBy: string | null;
    /**
     * Date and time when the register transaction occurred in UTC (optional).
     * Timestamp for audit trail and financial reconciliation purposes.
     */
    transactionDateUTC: string | null;
    /**
     * Reference to the associated business transaction ID (optional).
     * Links register activity to customer sales transactions when applicable.
     */
    transactionId: number | null;
    /**
     * Name of the register/terminal where the transaction was processed.
     * Identifies which physical register or point-of-sale terminal handled the transaction.
     */
    terminalName: string | null;
    /**
     * Unique identifier for the register/terminal where the transaction occurred.
     * Numeric identifier for the specific point-of-sale terminal.
     */
    terminalId: number;
    /**
     * Employee ID of the staff member who processed the transaction.
     * Numeric identifier linking to the employee record for accountability tracking.
     */
    transactionByEmployeeId: number;
    /**
     * Reason code or description for adjustment transactions (optional).
     * Provides business justification when the transaction is an adjustment or correction.
     */
    adjustmentReason: string | null;
    /**
     * Additional comments or notes about the register transaction (optional).
     * Free-text field for additional context or explanations.
     */
    comment: string | null;
};

/**
 * Regulatory category model containing state-mandated product classification information for cannabis compliance and reporting.
 */
export type RegulatoryCategory = {
    /**
     * Unique identifier for the regulatory category.
     */
    regulatoryCategoryId: number;
    /**
     * Display name of the regulatory category as defined by state cannabis regulations.
     */
    regulatoryCategoryName: string | null;
};

/**
 * Extended discount model with additional reporting and administrative properties for internal operations.
 */
export type ReportingDiscountDetail = {
    /**
     * Indicates if discount is available for online/e-commerce ordering.
     */
    isAvailableOnline: boolean;
    /**
     * Method used to apply the discount in the system.
     */
    applicationMethod: string | null;
    /**
     * External system identifier for integration mapping.
     */
    externalId: string | null;
    /**
     * Indicates if discount application requires manager approval.
     */
    requireManagerApproval: boolean;
    /**
     * Indicates if discount has been marked as deleted.
     */
    isDeleted: boolean;
    /**
     * Collection of location mappings where this discount applies.
     */
    appliesToLocations: Array<LocationMapping> | null;
    /**
     * Unique identifier for the discount.
     */
    discountId: number;
    /**
     * Display name of the discount for customer-facing applications.
     */
    discountName: string | null;
    /**
     * Monetary discount amount or percentage value.
     */
    discountAmount: number;
    /**
     * Promotional code required to apply the discount (optional).
     */
    discountCode: string | null;
    /**
     * Type classification of the discount (e.g., percentage, fixed amount).
     */
    discountType: string | null;
    /**
     * Method used to apply the discount (e.g., automatic, code required).
     */
    discountMethod: string | null;
    /**
     * Indicates if the discount is currently active and available.
     */
    isActive: boolean;
    /**
     * Start date and time when discount becomes valid (UTC converted from Eastern Time).
     */
    validFrom: string | null;
    /**
     * End date and time when discount expires (UTC converted from Eastern Time).
     */
    validUntil: string | null;
    /**
     * Type of threshold requirement for discount eligibility (optional).
     */
    thresholdType: string | null;
    /**
     * Minimum number of qualifying items required for discount application (optional).
     */
    minimumItemsRequired: number | null;
    /**
     * Maximum number of items that can receive the discount (optional).
     */
    maximumItemsAllowed: number | null;
    /**
     * Maximum number of times this discount can be used (optional).
     */
    maximumUsageCount: number | null;
    /**
     * Indicates if discount applies to non-cannabis products.
     */
    includeNonCannabis: boolean;
    /**
     * Indicates if discount is restricted to first-time customers only.
     */
    firstTimeCustomerOnly: boolean;
    /**
     * Indicates if discount can be combined with other discounts.
     */
    stackOnOtherDiscounts: boolean;
    weeklyRecurrenceInfo: WeeklyRecurrenceInfo;
    products: DiscountRestriction;
    productCategories: DiscountRestriction;
    brands: DiscountRestriction;
    vendors: DiscountRestriction;
    strains: DiscountRestriction;
    tiers: DiscountRestriction;
    tags: DiscountRestriction;
    inventoryTags: DiscountRestriction;
    customerTypes: DiscountRestriction;
    /**
     * Associated discount groups for bundling and organization (loaded conditionally).
     */
    discountGroups: Array<DiscountGroup> | null;
};

/**
 * Extended inventory item model for financial reporting with cost and allocation data.
 */
export type ReportingInventoryItem = {
    /**
     * Unit of measurement for unit weight, always "g" (grams).
     */
    unitWeightUnit: string | null;
    /**
     * Unit cost of the inventory item for cost of goods sold calculations (in USD).
     */
    unitCost: number | null;
    /**
     * Quantity of inventory allocated to orders or transfers but not yet fulfilled.
     */
    allocatedQuantity: number | null;
    /**
     * Unique inventory record identifier for this specific inventory item.
     */
    inventoryId: number;
    /**
     * Product identifier linking this inventory to the product catalog.
     */
    productId: number;
    /**
     * Stock Keeping Unit (SKU) code for inventory tracking and identification.
     */
    sku: string | null;
    /**
     * Display name of the product for customer-facing applications.
     */
    productName: string | null;
    /**
     * Detailed product description including effects, characteristics, and usage information.
     */
    description: string | null;
    /**
     * Category identifier for product classification (optional).
     */
    categoryId: number | null;
    /**
     * Category name for product classification and filtering.
     */
    category: string | null;
    /**
     * URL path to product image for display purposes.
     */
    imageUrl: string | null;
    /**
     * Current available quantity for sale or transfer.
     */
    quantityAvailable: number;
    /**
     * Unit of measurement for the available quantity (e.g., "g", "mg", "ea").
     */
    quantityUnits: string | null;
    /**
     * Weight per unit in grams for dosing and compliance calculations.
     */
    unitWeight: number;
    /**
     * Flower equivalent amount in grams for compliance tracking.
     */
    flowerEquivalent: number;
    /**
     * Recreational flower equivalent amount in grams (optional).
     */
    recFlowerEquivalent: number | null;
    /**
     * Unit of measurement for flower equivalent, always "g" (grams).
     */
    readonly flowerEquivalentUnits: string | null;
    /**
     * Batch identifier for lot tracking and quality control.
     */
    batchId: number;
    /**
     * Human-readable batch name or lot number for tracking.
     */
    batchName: string | null;
    /**
     * Package identifier for compliance tracking and traceability.
     */
    packageId: string | null;
    /**
     * Current status of the package (e.g., "Active", "Testing", "Quarantine").
     */
    packageStatus: string | null;
    /**
     * Base unit price for retail sales.
     */
    unitPrice: number;
    /**
     * Medical program pricing (optional, different from retail).
     */
    medUnitPrice: number | null;
    /**
     * Recreational program pricing (optional, different from medical).
     */
    recUnitPrice: number | null;
    /**
     * Strain identifier for cannabis products (optional).
     */
    strainId: number | null;
    /**
     * Strain name for cannabis products.
     */
    strain: string | null;
    /**
     * Cannabis strain classification (Hybrid, Indica, Sativa, CBD).
     */
    strainType: string | null;
    /**
     * Product size designation for packaging and dosing information.
     */
    size: string | null;
    /**
     * Collection of laboratory test results for this batch (included when includeLabResults=true).
     */
    labResults: Array<LabResult> | null;
    /**
     * Date when laboratory testing was completed (optional).
     */
    testedDate: string | null;
    /**
     * Date when sample was collected for laboratory testing (optional).
     */
    sampleDate: string | null;
    /**
     * Date when product was packaged for distribution (optional).
     */
    packagedDate: string | null;
    /**
     * Date when product was manufactured or produced (optional).
     */
    manufacturingDate: string | null;
    /**
     * Last modification timestamp in UTC for data synchronization.
     */
    lastModifiedDateUtc: string | null;
    /**
     * Current status of laboratory testing (e.g., "Passed", "Failed", "Pending").
     */
    labTestStatus: string | null;
    /**
     * Vendor identifier for the supplier of this inventory (optional).
     */
    vendorId: number | null;
    /**
     * Vendor name for the supplier of this inventory.
     */
    vendor: string | null;
    /**
     * Product expiration date for compliance and quality control (optional).
     */
    expirationDate: string | null;
    /**
     * Quantity breakdown by storage room/location (included when includeRoomQuantities=true).
     */
    roomQuantities: Array<InventoryRoomQuantity> | null;
    /**
     * Pricing tier classification for bulk pricing strategies.
     */
    pricingTierName: string | null;
    /**
     * Alternative product name for display purposes.
     */
    alternateName: string | null;
    /**
     * Collection of compliance tags associated with this inventory package.
     */
    tags: Array<InventoryTag> | null;
    /**
     * Brand identifier for branded products (optional).
     */
    brandId: number | null;
    /**
     * Brand name for branded products.
     */
    brandName: string | null;
    /**
     * Indicates if product is restricted to medical program only.
     */
    medicalOnly: boolean;
    /**
     * External compliance system ID (METRC or BioTrack) for regulatory tracking.
     */
    externalPackageId: string | null;
    /**
     * Producer name for cultivation and manufacturing tracking.
     */
    producer: string | null;
    /**
     * Producer identifier for cultivation and manufacturing tracking (optional).
     */
    producerId: number | null;
    /**
     * Package lineage information for traceability and compliance tracking.
     */
    lineage: Array<PackageLineage> | null;
    /**
     * Potency classification indicator for dosing guidance.
     */
    potencyIndicator: string | null;
    /**
     * Master category classification for product grouping.
     */
    masterCategory: string | null;
    /**
     * Effective potency in milligrams for dosing calculations (optional).
     */
    effectivePotencyMg: number | null;
    /**
     * Indicates if product contains cannabis or is cannabis-related.
     */
    isCannabis: boolean;
    /**
     * National Drug Code for pharmaceutical tracking (optional).
     */
    packageNDC: string | null;
    /**
     * URL to certificate of analysis or lab testing document.
     */
    labResultUrl: string | null;
};

/**
 * Request model for retagging cannabis plants with new serial numbers for compliance and tracking updates.
 */
export type RetagPlantRequest = {
    /**
     * Plant identifier for the cannabis plant being retagged with a new serial number.
     */
    plantId: number;
    /**
     * New serial number for the plant identification tag replacement.
     */
    serialNumber: string | null;
};

/**
 * Detailed specification for retiring immature plants from cultivation batches with compliance documentation.
 */
export type RetireImmaturePlantsDetails = {
    /**
     * Batch identifier for the plant batch containing plants to be retired.
     */
    batchId: number;
    /**
     * Number of plants to retire from the specified batch.
     */
    countToRetire: number;
    /**
     * Standardized reason code for the plant retirement (e.g., "DISEASE", "PEST", "POOR_HEALTH", "CONTAMINATION").
     */
    reasonCode: string | null;
    /**
     * Date when the plants were retired for cultivation timeline documentation.
     */
    retireDate: string | null;
};

/**
 * Request model for retiring immature cannabis plants due to loss, contamination, or quality issues.
 */
export type RetireImmaturePlantsRequest = {
    /**
     * Collection of plant retirement specifications for batch processing of plant removals.
     */
    plants: Array<RetireImmaturePlantsDetails> | null;
};

export type RetirePlantRequest = {
    plantIds: Array<number> | null;
    reasonId: number | null;
    reasonCode: string | null;
    wasteType: string | null;
    roomId: number;
    wasteWeight: number | null;
    comment: string | null;
    wastePackageId: string | null;
    wasteDate: string | null;
    plantWeight: number | null;
    plantWeightUnitId: number | null;
    wasteMaterial: string | null;
    wasteReason: string | null;
    wasteMethod: string | null;
    reasonNote: string | null;
    emptyCloneGroup: boolean;
};

/**
 * Cultivation room model containing facility area configuration information for cannabis operations and facility management.
 */
export type Room = {
    /**
     * Unique identifier for the cultivation room or facility area.
     * **Required for updates, null/0 for new room creation.**
     */
    roomId: number | null;
    /**
     * Human-readable name for room identification and cultivation tracking.
     * **Required for both create and update operations.**
     */
    roomName: string | null;
    /**
     * Indicates if this room is designated for quarantine operations and compliance isolation.
     */
    isQuarantineRoom: boolean;
    /**
     * Indicates if this room is designated as a secure vault for valuable inventory storage.
     */
    isVaultRoom: boolean;
    /**
     * Indicates if this room is designated as a customer waiting area.
     */
    isWaitingRoom: boolean;
    /**
     * Indicates if this room is designated as the main sales floor for customer transactions.
     */
    isSalesFloor: boolean;
    /**
     * Indicates if this room is designated for point-of-sale operations and transactions.
     */
    isPOSRoom: boolean;
    /**
     * Indicates if this room is designated for inventory storage and management.
     */
    isInventoryRoom: boolean;
    /**
     * Indicates if this room is designated for pre-order fulfillment operations.
     */
    isPreOrderRoom: boolean;
    /**
     * Indicates if this room is designated for e-commerce order processing and fulfillment.
     */
    isEcommerceRoom: boolean;
};

/**
 * Room-based waste record model for facility waste disposal tracking and compliance documentation.
 */
export type RoomWaste = {
    /**
     * Unique identifier for the waste record.
     */
    wasteId: number | null;
    /**
     * Reference number for waste tracking and documentation.
     */
    referenceNo: string | null;
    /**
     * Additional comments or notes about the waste disposal.
     */
    comments: string | null;
    /**
     * Date when the waste disposal occurred.
     */
    wasteDate: string | null;
    /**
     * Type or category of waste material being disposed.
     */
    wasteType: string | null;
    /**
     * Identifier for the room or facility area where waste originated.
     */
    roomId: number;
    /**
     * Quantity of waste material being disposed.
     */
    wasteAmount: number;
    /**
     * Unit of measurement identifier for the waste amount.
     */
    unitId: number;
};

/**
 * Response model for successful inventory receive order creation operations.
 */
export type SavedReceive = {
    /**
     * Unique identifier for the created receive inventory transaction.
     */
    receiveInventoryHistoryId: number;
};

/**
 * Request model for setting a product image through the product image management API.
 */
export type SetImageRequest = {
    /**
     * The unique identifier of the product to associate the image with.
     */
    productId: number;
    /**
     * Base64-encoded string representation of the image file data.
     */
    base64Image: string;
    /**
     * Original filename of the image including file extension for proper handling.
     */
    fileName: string;
    /**
     * Computed property that converts the Base64Image string to byte array for processing.
     */
    readonly image?: string | null;
    fileType?: UploadFileType;
};

/**
 * Response model for successful product image upload operations.
 */
export type SetImageResponse = {
    /**
     * Unique identifier assigned to the uploaded image for tracking and reference.
     */
    imageId: number;
    /**
     * Public URL where the uploaded image can be accessed and displayed.
     */
    imageUrl: string | null;
};

export type Severity = 0 | 1 | 2;

/**
 * Represents a product size configuration for cannabis products within an organization.
 */
export type Size = {
    /**
     * Unique identifier for the product size configuration.
     */
    sizeId: number;
    /**
     * Display name for the product size.
     */
    sizeName: string | null;
    /**
     * Detailed description of the product size and its usage.
     */
    description: string | null;
};

export type SplitBatchDetails = {
    newBatchName: string | null;
    batchId: number;
    location: string | null;
    strain: string | null;
    quantity: number;
    splitDate: string | null;
};

export type SplitImmaturePlantResult = {
    batch: Array<SplitImmaturePlantResultDetail> | null;
    plant: Array<SplitImmaturePlantResultDetail> | null;
};

export type SplitImmaturePlantResultApiResult = {
    result: boolean;
    message: string | null;
    data: SplitImmaturePlantResult;
};

export type SplitImmaturePlantResultDetail = {
    batchId: number;
    batchPlantCount: number;
    newBatchId: number;
    newBatchPlantCount: number;
};

/**
 * Request model for splitting immature cannabis plant batches and individual plants for cultivation optimization.
 */
export type SplitImmaturePlantsRequest = {
    /**
     * Collection of batch split specifications for dividing immature plant batches into smaller groups.
     */
    batch: Array<SplitBatchDetails> | null;
    /**
     * Collection of individual plant split specifications for precise cultivation management.
     */
    plant: Array<SplitPlantDetails> | null;
};

export type SplitPlantDetails = {
    batchId: number;
    location: string | null;
    strain: string | null;
    quantity: number;
    splitDate: string | null;
};

export type StandardAllergensDetails = {
    milk: boolean;
    eggs: boolean;
    fish: boolean;
    peanuts: boolean;
    treeNuts: boolean;
    sesame: boolean;
    shellfish: boolean;
    soybeans: boolean;
    wheat: boolean;
};

/**
 * Cannabis strain information with genetic and classification details for product categorization and cultivation tracking.
 */
export type StrainDetail = {
    /**
     * Unique identifier for the strain
     */
    strainId: number;
    /**
     * Name of the cannabis strain
     */
    strainName: string | null;
    /**
     * Detailed description of the strain's characteristics and effects
     */
    strainDescription: string | null;
    /**
     * Short name or code for the strain
     */
    strainAbbreviation: string | null;
    /**
     * Classification type of the strain. Valid values: `Indica`, `Sativa`, `Hybrid`, `CBD`
     */
    strainType: string | null;
    /**
     * External system identifier for third-party integration
     */
    externalId: string | null;
};

export type StringIEnumerableOptional = Array<unknown>;

export type StringOptional = string;

export type SuccessResult = {
    result: boolean;
    message: string | null;
    data: {
        [key: string]: unknown;
    } | null;
};

export type Table = {
    tableId: number | null;
    tableName: string | null;
};

export type Tag = {
    tagName: string | null;
    tagId: number;
};

/**
 * Summary tax information aggregated across transaction items for reporting and receipt generation.
 */
export type TaxSummaryInfo = {
    /**
     * Name of the tax type being summarized (e.g., "State Excise Tax", "Sales Tax").
     */
    rateName: string | null;
    /**
     * Total tax amount for this tax type across all transaction items (in USD).
     */
    amount: number;
};

/**
 * Point-of-sale terminal model containing terminal identification information for retail operations and transaction processing.
 */
export type Terminal = {
    /**
     * Unique identifier for the point-of-sale terminal.
     */
    terminalId: number;
    /**
     * Human-readable name for terminal identification and assignment.
     */
    terminalName: string | null;
};

/**
 * Complete cannabis retail transaction model representing all aspects of cannabis sales operations.
 */
export type Transaction = {
    transactionId: number;
    customerId: number;
    employeeId: number;
    transactionDate: string;
    voidDate: string | null;
    isVoid: boolean;
    subtotal: number;
    totalDiscount: number;
    readonly totalBeforeTax: number;
    tax: number;
    tipAmount: number | null;
    total: number;
    paid: number;
    changeDue: number;
    totalItems: number;
    terminalName: string | null;
    checkInDate: string | null;
    invoiceNumber: string | null;
    isTaxInclusive: boolean;
    /**
     * Will have one of the following values: Retail, Transfer, WholesaleOrder
     */
    transactionType: string | null;
    /**
     * Loyalty points earned on this transaction (can be negative if it's a return)
     */
    loyaltyEarned: number | null;
    /**
     * Loyalty points spent on this transaction (can be negative if it's a return)
     */
    loyaltySpent: number | null;
    items: Array<TransactionItem> | null;
    readonly discounts: Array<AppliedDiscount> | null;
    lastModifiedDateUTC: string;
    cashPaid: number | null;
    debitPaid: number | null;
    electronicPaid: number | null;
    electronicPaymentMethod: string | null;
    checkPaid: number | null;
    creditPaid: number | null;
    giftPaid: number | null;
    mmapPaid: number | null;
    prePaymentAmount: number | null;
    revenueFeesAndDonations: number | null;
    nonRevenueFeesAndDonations: number | null;
    feesAndDonations: Array<FeeDonationInfo> | null;
    readonly taxSummary: Array<TaxSummaryInfo> | null;
    returnOnTransactionId: number | null;
    adjustmentForTransactionId: number | null;
    orderType: string | null;
    wasPreOrdered: boolean;
    orderSource: string | null;
    orderMethod: string | null;
    invoiceName: string | null;
    readonly isReturn: boolean;
    authCode: string | null;
    customerTypeId: number;
    isMedical: boolean;
    orderIds: Array<number> | null;
    totalCredit: number;
    completedByUser: string | null;
    responsibleForSaleUserId: number;
    transactionDateLocalTime: string;
    estTimeArrivalLocal: string | null;
    readonly estDeliveryDateLocal: string | null;
    referenceId: string | null;
    manualPayments: Array<ManualPayment> | null;
    manualPaid: number | null;
    integratedPayments: Array<IntegratedPayment> | null;
    integratedPaid: number | null;
};

/**
 * Individual line item within a cannabis retail transaction containing product, pricing, and compliance information.
 */
export type TransactionItem = {
    /**
     * Parent transaction identifier linking this item to the overall transaction.
     */
    transactionId: number;
    /**
     * Product identifier for the purchased cannabis product.
     */
    productId: number;
    /**
     * Total price for this line item including all taxes and discounts (in USD).
     */
    totalPrice: number;
    /**
     * Quantity of the product purchased (units based on product type - grams, pieces, etc.).
     */
    quantity: number;
    /**
     * Unit price per individual item before taxes and discounts (in USD).
     */
    unitPrice: number;
    /**
     * Cost basis of the product for internal accounting and margin calculations (in USD).
     */
    unitCost: number | null;
    /**
     * State tracking system package identifier for regulatory compliance (seed-to-sale tracking).
     */
    packageId: string | null;
    /**
     * Original source package identifier for product lineage tracking in state systems.
     */
    sourcePackageId: string | null;
    /**
     * Total discount amount applied to this line item (in USD).
     */
    totalDiscount: number;
    /**
     * Inventory record identifier for the specific product inventory being sold.
     */
    inventoryId: number;
    /**
     * Unit type identifier defining how the product is measured and sold.
     */
    unitId: number;
    /**
     * Weight of the product unit in grams (calculated for flower products with UnitId = 1).
     */
    readonly unitWeight: number | null;
    /**
     * Unit of measurement for product weight (always "g" for grams).
     */
    readonly unitWeightUnit: string | null;
    /**
     * Flower equivalent weight for concentrate products in grams (for regulatory compliance).
     */
    flowerEquivalent: number | null;
    /**
     * Unit of measurement for flower equivalent (always "g" for grams).
     */
    readonly flowerEquivalentUnit: string | null;
    /**
     * Collection of discounts applied to this transaction item.
     */
    discounts: Array<AppliedDiscount> | null;
    /**
     * Collection of taxes applied to this transaction item.
     */
    taxes: Array<LineItemTaxInfo> | null;
    /**
     * Date when this item was returned (null if not returned).
     */
    returnDate: string | null;
    /**
     * Indicates whether this transaction item has been returned.
     */
    readonly isReturned: boolean;
    /**
     * Transaction identifier of the return transaction that processed this item's return.
     */
    returnedByTransactionId: number | null;
    /**
     * Reason provided for returning this item (e.g., "Defective", "Customer Dissatisfaction").
     */
    returnReason: string | null;
    /**
     * Cultivation batch name for product traceability and regulatory compliance.
     */
    batchName: string | null;
    /**
     * Reference identifier to tie child items to parent items within a transaction.
     * Not guaranteed to be unique outside of a single transaction.
     */
    readonly transactionItemId: number;
    /**
     * Vendor or supplier name for the product.
     */
    vendor: string | null;
    /**
     * Indicates whether this item represents a coupon or promotional discount rather than a physical product.
     */
    isCoupon: boolean;
};

/**
 * Measurement unit model for cannabis product tracking and inventory management.
 */
export type Unit = {
    /**
     * Unique identifier for the measurement unit.
     */
    unitId: number;
    /**
     * Full name of the measurement unit (e.g., "Grams", "Ounces", "Pounds").
     */
    unitName: string | null;
    /**
     * Short abbreviation for the unit (e.g., "g", "oz", "lb").
     */
    abbreviation: string | null;
    /**
     * Unit type classification identifier linking to measurement category.
     */
    unitTypeId: number;
};

/**
 * Unit type classification model for organizing measurement units by category.
 */
export type UnitType = {
    /**
     * Unique identifier for the unit type category.
     */
    unitTypeId: number;
    /**
     * Display name of the unit type category (e.g., "Weight", "Volume", "Quantity").
     */
    unitTypeName: string | null;
    /**
     * Short abbreviation for the unit type (e.g., "Wgt", "Vol", "Qty").
     */
    unitTypeAbbreivation: string | null;
};

/**
 * Request model for updating laboratory test results for a specific batch by batch name.
 */
export type UpdateBatchLabResultsRequest = {
    /**
     * Name of the batch to update with laboratory test results (required).
     */
    batchName: string;
    /**
     * Weight of the laboratory sample used for testing (in grams).
     */
    sampleWeight?: number | null;
    /**
     * Collection of laboratory test results including cannabinoids and terpenes.
     */
    labResults?: Array<CannabinoidTerpeneValue> | null;
};

export type UpdateBatchRequest = {
    batchName: string | null;
    roomId: number | null;
    strainId: number | null;
};

/**
 * Request model for updating delivery route details including vehicle assignments, driver assignments, and delivery status.
 */
export type UpdateDeliveryRouteDetailRequest = {
    /**
     * Delivery transaction identifier to update (required).
     */
    transactionId: number;
    /**
     * Primary driver identifier for delivery assignment (optional).
     */
    driverId: number | null;
    /**
     * Secondary driver identifier for delivery assignment (optional).
     */
    driverId2: number | null;
    /**
     * Vehicle identifier for delivery assignment (optional).
     */
    vehicleId: number | null;
    /**
     * Route information or delivery notes (optional).
     */
    route: string | null;
    /**
     * Delivery status update (optional).
     */
    status: string | null;
};

/**
 * Request model for updating existing customer journal entries with modified content and details.
 */
export type UpdateJournalEntryRequest = {
    /**
     * The ID of the existing journal entry to update.
     */
    journalEntryId: number;
    /**
     * Updated title or summary for the journal entry.
     */
    subject: string;
    /**
     * Updated detailed content and notes for the journal entry.
     */
    body: string;
    /**
     * Updated date and time when the journal entry should be dated.
     */
    date: string;
};

export type UpdatePackageTagsRequest = {
    packageIds?: StringIEnumerableOptional;
    inventoryIds?: Int32iEnumerableOptional;
    /**
     * Required collection of tags to apply to the specified packages (required).
     */
    tags: Array<string>;
};

export type UpdatePlantDetails = {
    plantId: number;
    serialNumber: StringOptional;
    dateCreated: DateTimeNullableOptional;
    bornDate: DateTimeNullableOptional;
    isMother: BooleanNullableOptional;
    strainId: Int32NullableOptional;
    roomId: Int32NullableOptional;
    tableId: Int32NullableOptional;
    batchId: Int32NullableOptional;
};

export type UpdatePlantsRequest = {
    plants: Array<UpdatePlantDetails> | null;
};

export type UpdatePreOrderRequest = {
    orderId: number;
    items: Array<PreOrderItem> | null;
    isDelivery: boolean;
    /**
     * @deprecated
     */
    orderSource: string | null;
    deliveryStreet: string | null;
    deliveryCity: string | null;
    deliveryState: string | null;
    deliveryPostalCode: string | null;
    deliveryScheduleId: DeliveryScheduleType;
    notes: string | null;
    redemptions: PreOrderRedemptionIEnumerableOptional;
    customerId: number;
    deliveryStreet2: string | null;
    timeWindowStartDateUtc: string | null;
    timeWindowEndDateUtc: string | null;
};

/**
 * Request model for creating or updating cannabis strain information.
 *
 * **Create vs Update Behavior:**
 * - **CREATE**: When `StrainId` is null, 0, or omitted, a new strain record will be created
 * - **UPDATE**: When `StrainId` is provided with a valid strain ID, the existing strain will be updated
 *
 * **Sparse Update Behavior:**
 * - **Provided fields**: Will overwrite existing values with provided data
 * - **Omitted fields**: Will preserve existing values (no data loss for updates)
 * - **Special handling**: `StrainDescription` is always required and cannot be null
 */
export type UpdateStrain = {
    /**
     * Unique identifier for strain updates.
     * - **For CREATE**: Omit this field, set to null, or set to 0
     * - **For UPDATE**: Provide the existing strain's ID
     */
    strainId?: number | null;
    /**
     * Name of the cannabis strain (required for creation)
     */
    strainName: string;
    /**
     * Detailed description of the strain's characteristics and effects.
     * **REQUIRED** - Cannot be null or empty for both create and update operations.
     */
    strainDescription: string;
    /**
     * Short name or code for the strain (optional)
     */
    abbreviation?: string | null;
    /**
     * Classification type of the strain (optional).
     * **Must be one of**: `Indica`, `Sativa`, `Hybrid`, `CBD`
     * If provided, value will be validated against allowed strain types.
     */
    strainType?: string | null;
    /**
     * External system identifier for third-party integration (optional).
     * Useful for synchronizing with cultivation management systems.
     */
    externalId?: string | null;
    broadcast?: BooleanOptional;
};

export type UploadFileType = 0 | 1 | 2 | 3 | 4 | 5;

export type ValidationFailure = {
    propertyName: string | null;
    errorMessage: string | null;
    attemptedValue: {
        [key: string]: unknown;
    } | null;
    customState: {
        [key: string]: unknown;
    } | null;
    severity: Severity;
    errorCode: string | null;
    formattedMessagePlaceholderValues: {
        [key: string]: {
            [key: string]: unknown;
        } | null;
    } | null;
};

export type ValidationResult = {
    readonly isValid: boolean;
    errors: Array<ValidationFailure> | null;
    ruleSetsExecuted: Array<string> | null;
};

export type VehicleDetail = {
    vehicleId: number;
    make: string | null;
    model: string | null;
    modelYear: string | null;
    color: string | null;
    licensePlate: string | null;
    vin: string | null;
};

/**
 * Vendor information model for cannabis supply chain and compliance management.
 */
export type Vendor = {
    /**
     * Unique identifier for the vendor in the system (null for new vendor creation).
     */
    vendorId: number | null;
    /**
     * Official business name of the vendor as registered with regulatory authorities.
     */
    vendorName: string | null;
    /**
     * Street address of the vendor's business location.
     */
    address: string | null;
    /**
     * City where the vendor's business is located.
     */
    city: string | null;
    /**
     * State or province where the vendor's business is located.
     */
    state: string | null;
    /**
     * Postal or ZIP code for the vendor's business address.
     */
    postalCode: string | null;
    /**
     * Cannabis business license number issued by state regulatory authorities.
     */
    licenseNumber: string | null;
    /**
     * Name of the primary business contact for this vendor.
     */
    contactName: string | null;
    /**
     * Email address for business communications with the vendor.
     */
    contactEmail: string | null;
    /**
     * Phone number for business communications with the vendor.
     */
    contactPhone: string | null;
};

/**
 * Comprehensive waste summary model containing all waste types for facility waste management and regulatory reporting.
 */
export type WasteSummary = {
    /**
     * Collection of room-based waste disposal records.
     */
    roomWaste: Array<RoomWaste> | null;
    /**
     * Collection of harvest-based waste disposal records.
     */
    harvestWaste: Array<ObjectWaste> | null;
    /**
     * Collection of plant-based waste disposal records.
     */
    plantWaste: Array<ObjectWaste> | null;
};

/**
 * Weekly recurring schedule model defining time-based availability patterns for discount application.
 */
export type WeeklyRecurrenceInfo = {
    /**
     * Daily start time when discount becomes available (optional).
     */
    startTime: string | null;
    /**
     * Daily end time when discount expires (optional).
     */
    endTime: string | null;
    /**
     * Indicates if discount is available on Mondays.
     */
    appliesOnMonday: boolean;
    /**
     * Indicates if discount is available on Tuesdays.
     */
    appliesOnTuesday: boolean;
    /**
     * Indicates if discount is available on Wednesdays.
     */
    appliesOnWednesday: boolean;
    /**
     * Indicates if discount is available on Thursdays.
     */
    appliesOnThursday: boolean;
    /**
     * Indicates if discount is available on Fridays.
     */
    appliesOnFriday: boolean;
    /**
     * Indicates if discount is available on Saturdays.
     */
    appliesOnSaturday: boolean;
    /**
     * Indicates if discount is available on Sundays.
     */
    appliesOnSunday: boolean;
};

/**
 * Anonymous transaction response model containing transaction identifiers for guest checkout operations.
 */
export type AnonymousTransactionWritable = {
    /**
     * Unique identifier for the customer record associated with this anonymous transaction.
     */
    customerId: number;
    /**
     * Unique identifier for the transaction record.
     */
    transactionId: number;
};

/**
 * Discount information applied to a specific transaction item in cannabis retail operations.
 */
export type AppliedDiscountWritable = {
    /**
     * Unique identifier for the discount program or campaign applied.
     */
    discountId: number;
    /**
     * Display name of the discount for customer receipts and reporting.
     */
    discountName: string | null;
    /**
     * Reason or justification for the discount application (e.g., "Loyalty Reward", "Medical Patient").
     */
    discountReason: string | null;
    /**
     * Discount amount applied to the transaction item (in USD, positive value represents savings).
     */
    amount: number;
};

export type BroadcastedResponsesWritable = {
    responses: Array<LocationResponseWritable> | null;
};

/**
 * Product category sales summary for cannabis retail closing reports and financial analysis.
 */
export type ClosingReportCategorySummaryWritable = {
    /**
     * Product category name (e.g., "Flower", "Edibles", "Concentrates").
     */
    category: string | null;
    /**
     * Gross sales total for the category before discounts (in USD).
     */
    categoryGrossTotal: number;
    /**
     * Total discount amount applied to products in this category (in USD).
     */
    categoryDiscountTotal: number;
    /**
     * Net sales total for the category after discounts (in USD).
     */
    categoryNetTotal: number;
    /**
     * Total cost of goods sold for products in this category (in USD).
     */
    categoryCost: number;
};

/**
 * Customer type sales summary for cannabis retail closing reports and customer segment analysis.
 */
export type ClosingReportCustomerTypeSummaryWritable = {
    /**
     * Customer type classification (e.g., "Recreational", "Medical", "Industry").
     */
    customerType: string | null;
    /**
     * Gross sales total for this customer type before discounts (in USD).
     */
    grossTotal: number;
    /**
     * Net sales total for this customer type after discounts (in USD).
     */
    netTotal: number;
    /**
     * Total discount amount applied to this customer type (in USD).
     */
    discountTotal: number;
    /**
     * Total cost of goods sold for this customer type (in USD).
     */
    customerTypeCost: number;
    /**
     * Cannabis product sales total for this customer type (in USD).
     */
    cannabisSales: number;
    /**
     * Non-cannabis product sales total for this customer type (accessories, etc.) (in USD).
     */
    nonCannabisSales: number;
};

/**
 * Order source sales summary for cannabis retail closing reports and marketing channel analysis.
 */
export type ClosingReportOrderSourceSummaryWritable = {
    /**
     * Order origination source (e.g., "Website", "Mobile App", "Weedmaps", "Walk-In").
     */
    orderSource: string | null;
    /**
     * Gross sales total for this order source before discounts (in USD).
     */
    grossTotal: number;
    /**
     * Net sales total for this order source after discounts (in USD).
     */
    netTotal: number;
    /**
     * Total discount amount applied to this order source (in USD).
     */
    discountTotal: number;
    orderSourceCost: number;
};

/**
 * Order type sales summary for cannabis retail closing reports and fulfillment channel analysis.
 */
export type ClosingReportOrderTypeSummaryWritable = {
    /**
     * Order fulfillment type (e.g., "In-Store", "Pickup", "Delivery", "Curbside").
     */
    orderType: string | null;
    /**
     * Gross sales total for this order type before discounts (in USD).
     */
    grossTotal: number;
    /**
     * Net sales total for this order type after discounts (in USD).
     */
    netTotal: number;
    /**
     * Total discount amount applied to this order type (in USD).
     */
    discountTotal: number;
    /**
     * Total cost of goods sold for this order type (in USD).
     */
    orderTypeCost: number;
};

/**
 * Enhanced closing report model for cannabis dispensary daily financial operations with payment processing integration.
 */
export type ClosingReportV2Writable = {
    /**
     * Tips processed through Pay-by-Bank system for electronic tip distribution.
     */
    payByBankTips: number;
    /**
     * Transaction fees charged by Pay-by-Bank system for cost accounting.
     */
    payByBankTransactionFees: number;
    /**
     * Batch file summaries for Pay-by-Bank transaction reconciliation.
     */
    payByBankBatchFile: Array<ClosingReportPayByBankBatchFileSums> | null;
    /**
     * Fees and donations collected during the closing period for compliance reporting.
     */
    feesDonations: Array<FeeDonation> | null;
    grossSales: number | null;
    discount: number | null;
    loyalty: number | null;
    totalTax: number | null;
    cost: number | null;
    coupons: number | null;
    itemTotal: number | null;
    transactionCount: number;
    itemCount: number;
    customerCount: number;
    newCustomerCount: number;
    voidCount: number;
    voidTotal: number | null;
    returnTotal: number | null;
    startingBalance: number | null;
    endingBalance: number | null;
    deposits: number | null;
    adjustments: number | null;
    totalPayments: number | null;
    invoiceTotal: number | null;
    cannabisSales: number | null;
    nonCannabisSales: number | null;
    netSales: number | null;
    revenueFeesDonations: number | null;
    nonRevenueFeesDonations: number | null;
    rounding: number | null;
    totalIncome: number | null;
    averageCartNetSales: number | null;
    categorySummary: Array<ClosingReportCategorySummaryWritable> | null;
    paymentSummary: Array<ClosingReportPaymentSummary> | null;
    taxSummary: Array<ClosingReportTaxRateSummary> | null;
    customerTypeSummary: Array<ClosingReportCustomerTypeSummaryWritable> | null;
    orderTypeSummary: Array<ClosingReportOrderTypeSummaryWritable> | null;
    orderSourceSummary: Array<ClosingReportOrderSourceSummaryWritable> | null;
};

/**
 * Represents a customer profile with personal information, contact details, and cannabis compliance data.
 */
export type CustomerWritable = {
    /**
     * Unique internal identifier for the customer record.
     */
    customerId: number;
    /**
     * Deprecated name field (use FirstName and LastName instead).
     *
     * @deprecated
     */
    name: string | null;
    /**
     * Customer's first name.
     */
    firstName: string | null;
    /**
     * Customer's last name.
     */
    lastName: string | null;
    /**
     * Customer's middle name.
     */
    middleName: string | null;
    /**
     * Name suffix (Jr., Sr., III, etc.).
     */
    nameSuffix: string | null;
    /**
     * Name prefix (Mr., Mrs., Dr., etc.).
     */
    namePrefix: string | null;
    /**
     * Primary street address line.
     */
    address1: string | null;
    /**
     * Secondary address line (apartment, suite, etc.).
     */
    address2: string | null;
    /**
     * City name.
     */
    city: string | null;
    /**
     * State or province.
     */
    state: string | null;
    /**
     * Postal or ZIP code.
     */
    postalCode: string | null;
    /**
     * Primary phone number.
     */
    phone: string | null;
    /**
     * Cell phone number.
     */
    cellPhone: string | null;
    /**
     * Email address.
     */
    emailAddress: string | null;
    /**
     * Customer account status.
     */
    status: string | null;
    /**
     * Medical marijuana identification number.
     */
    mmjidNumber: string | null;
    /**
     * Medical marijuana ID expiration date.
     */
    mmjidExpirationDate: string | null;
    /**
     * Last modification timestamp in UTC format.
     */
    lastModifiedDateUTC: string | null;
    /**
     * Customer record creation date.
     */
    creationDate: string | null;
    /**
     * Customer type classification.
     */
    customerType: string | null;
    /**
     * Customer's gender.
     */
    gender: string | null;
    /**
     * SHA2_256 hash of the Driver License ID
     */
    driversLicenseHash: string | null;
    /**
     * Customer's date of birth.
     */
    dateOfBirth: string | null;
    /**
     * External system customer identifier.
     */
    externalCustomerId: string | null;
    /**
     * Name of the integration system that created this customer.
     */
    createdByIntegrator: string | null;
    /**
     * Indicates if this is an anonymous customer record.
     */
    isAnonymous: boolean;
    /**
     * How the customer heard about the dispensary.
     */
    referralSource: string | null;
    /**
     * Additional details about referral source when "Other" is selected.
     */
    otherReferralSource: string | null;
    /**
     * SpringBig loyalty system member identifier.
     */
    springBigMemberId: number;
    /**
     * Custom identifier for external system integration.
     */
    customIdentifier: string | null;
    /**
     * Location where this customer record was created.
     */
    createdAtLocation: string | null;
    /**
     * Additional notes about the customer.
     */
    notes: string | null;
    /**
     * Indicates if customer is enrolled in loyalty program.
     */
    isLoyaltyMember: boolean | null;
    /**
     * Primary medical condition for medical marijuana patients.
     */
    primaryQualifyingCondition: string | null;
    /**
     * Additional medical conditions for medical marijuana patients.
     */
    secondaryQualifyingConditions: Array<string> | null;
    /**
     * Customer ID this record was merged into (if applicable).
     */
    mergedIntoCustomerId: number | null;
    /**
     * Customer's marketing communication preference.
     */
    optedIntoMarketing: boolean | null;
    /**
     * Customer's current loyalty program tier.
     */
    loyaltyTier: string | null;
};

/**
 * Extended customer model that includes search match type information for customer lookup operations.
 */
export type CustomerSearchResultWritable = {
    /**
     * Indicates how the customer record was matched during the search operation.
     */
    matchType: string | null;
    /**
     * Unique internal identifier for the customer record.
     */
    customerId: number;
    /**
     * Deprecated name field (use FirstName and LastName instead).
     *
     * @deprecated
     */
    name: string | null;
    /**
     * Customer's first name.
     */
    firstName: string | null;
    /**
     * Customer's last name.
     */
    lastName: string | null;
    /**
     * Customer's middle name.
     */
    middleName: string | null;
    /**
     * Name suffix (Jr., Sr., III, etc.).
     */
    nameSuffix: string | null;
    /**
     * Name prefix (Mr., Mrs., Dr., etc.).
     */
    namePrefix: string | null;
    /**
     * Primary street address line.
     */
    address1: string | null;
    /**
     * Secondary address line (apartment, suite, etc.).
     */
    address2: string | null;
    /**
     * City name.
     */
    city: string | null;
    /**
     * State or province.
     */
    state: string | null;
    /**
     * Postal or ZIP code.
     */
    postalCode: string | null;
    /**
     * Primary phone number.
     */
    phone: string | null;
    /**
     * Cell phone number.
     */
    cellPhone: string | null;
    /**
     * Email address.
     */
    emailAddress: string | null;
    /**
     * Customer account status.
     */
    status: string | null;
    /**
     * Medical marijuana identification number.
     */
    mmjidNumber: string | null;
    /**
     * Medical marijuana ID expiration date.
     */
    mmjidExpirationDate: string | null;
    /**
     * Last modification timestamp in UTC format.
     */
    lastModifiedDateUTC: string | null;
    /**
     * Customer record creation date.
     */
    creationDate: string | null;
    /**
     * Customer type classification.
     */
    customerType: string | null;
    /**
     * Customer's gender.
     */
    gender: string | null;
    /**
     * SHA2_256 hash of the Driver License ID
     */
    driversLicenseHash: string | null;
    /**
     * Customer's date of birth.
     */
    dateOfBirth: string | null;
    /**
     * External system customer identifier.
     */
    externalCustomerId: string | null;
    /**
     * Name of the integration system that created this customer.
     */
    createdByIntegrator: string | null;
    /**
     * Indicates if this is an anonymous customer record.
     */
    isAnonymous: boolean;
    /**
     * How the customer heard about the dispensary.
     */
    referralSource: string | null;
    /**
     * Additional details about referral source when "Other" is selected.
     */
    otherReferralSource: string | null;
    /**
     * SpringBig loyalty system member identifier.
     */
    springBigMemberId: number;
    /**
     * Custom identifier for external system integration.
     */
    customIdentifier: string | null;
    /**
     * Location where this customer record was created.
     */
    createdAtLocation: string | null;
    /**
     * Additional notes about the customer.
     */
    notes: string | null;
    /**
     * Indicates if customer is enrolled in loyalty program.
     */
    isLoyaltyMember: boolean | null;
    /**
     * Primary medical condition for medical marijuana patients.
     */
    primaryQualifyingCondition: string | null;
    /**
     * Additional medical conditions for medical marijuana patients.
     */
    secondaryQualifyingConditions: Array<string> | null;
    /**
     * Customer ID this record was merged into (if applicable).
     */
    mergedIntoCustomerId: number | null;
    /**
     * Customer's marketing communication preference.
     */
    optedIntoMarketing: boolean | null;
    /**
     * Customer's current loyalty program tier.
     */
    loyaltyTier: string | null;
};

export type DiscountApiResponseWritable = {
    id: number | null;
    externalId: string | null;
    validDateFrom: string | null;
    validDateTo: string | null;
    maxRedemptions: number | null;
    redemptionLimit: number | null;
    firstTimeCustomerOnly: DiscountFirstTimeCustomer;
    discountDescription: string | null;
    discountCode: string | null;
    applicationMethodId: DiscountApplicationMethod;
    canStackAutomatically: boolean;
    onlineName: string | null;
    locationRestrictions: Array<number> | null;
    restrictToGroupIds: Array<number> | null;
    monday: boolean | null;
    tuesday: boolean | null;
    wednesday: boolean | null;
    thursday: boolean | null;
    friday: boolean | null;
    saturday: boolean | null;
    sunday: boolean | null;
    isActive: boolean;
    isBundledDiscount: boolean;
    constraints: Array<DiscountConstraintApiResponseWritable> | null;
    reward: DiscountRewardApiResponseWritable;
    menuDisplay: DiscountMenuDisplayApiResponse;
    paymentRestrictions: DiscountPaymentRestrictionApiResponse;
};

export type DiscountConstraintApiResponseWritable = {
    discountConstraintId: number | null;
    discountId: number;
    thresholdMin: number | null;
    includeNonCannabis: boolean;
    thresholdTypeId: DiscountThresholdType;
    discountItemGroupTypeId: DiscountItemGroupType;
    restrictions: {
        [key: string]: IRestrictionApiResponse;
    } | null;
};

export type DiscountRewardApiResponseWritable = {
    discountRewardId: number | null;
    discountId: number;
    calculationMethodId: CalculationMethod;
    discountValue: number;
    includeNonCannabis: boolean;
    highestOrLowest: string | null;
    thresholdTypeId: DiscountThresholdType;
    itemGroupTypeId: DiscountItemGroupType;
    thresholdMin: number | null;
    thresholdMax: number | null;
    applyToOnlyOneItem: boolean;
    restrictions: {
        [key: string]: IRestrictionApiResponse;
    } | null;
};

export type InventoryDiscrepancyWritable = {
    inventoryId: number | null;
    packageId: string | null;
    quantity: number;
    roomId: number;
    unitId: number;
    externalQuantity: number;
    externalUnitId: number;
    equivalentExternalQuantity: number | null;
    productName: string | null;
    room: string | null;
    externalRoom: string | null;
    batchModeQuantity: number | null;
    bioTrackCategoryName: string | null;
    externalBioTrackCategoryName: string | null;
    sku: string | null;
    unitErrorMsg: string | null;
    rooms: Array<string> | null;
    serialNumber: string | null;
};

export type InventoryIntegrationReconResponseWritable = {
    lastUpdated: string | null;
    discrepancies: Array<InventoryDiscrepancyWritable> | null;
};

/**
 * Inventory item model representing current stock and product details for available inventory.
 */
export type InventoryItemWritable = {
    /**
     * Unit of measurement for unit weight, always "g" (grams).
     */
    unitWeightUnit: string | null;
    /**
     * Unique inventory record identifier for this specific inventory item.
     */
    inventoryId: number;
    /**
     * Product identifier linking this inventory to the product catalog.
     */
    productId: number;
    /**
     * Stock Keeping Unit (SKU) code for inventory tracking and identification.
     */
    sku: string | null;
    /**
     * Display name of the product for customer-facing applications.
     */
    productName: string | null;
    /**
     * Detailed product description including effects, characteristics, and usage information.
     */
    description: string | null;
    /**
     * Category identifier for product classification (optional).
     */
    categoryId: number | null;
    /**
     * Category name for product classification and filtering.
     */
    category: string | null;
    /**
     * URL path to product image for display purposes.
     */
    imageUrl: string | null;
    /**
     * Current available quantity for sale or transfer.
     */
    quantityAvailable: number;
    /**
     * Unit of measurement for the available quantity (e.g., "g", "mg", "ea").
     */
    quantityUnits: string | null;
    /**
     * Weight per unit in grams for dosing and compliance calculations.
     */
    unitWeight: number;
    /**
     * Flower equivalent amount in grams for compliance tracking.
     */
    flowerEquivalent: number;
    /**
     * Recreational flower equivalent amount in grams (optional).
     */
    recFlowerEquivalent: number | null;
    /**
     * Batch identifier for lot tracking and quality control.
     */
    batchId: number;
    /**
     * Human-readable batch name or lot number for tracking.
     */
    batchName: string | null;
    /**
     * Package identifier for compliance tracking and traceability.
     */
    packageId: string | null;
    /**
     * Current status of the package (e.g., "Active", "Testing", "Quarantine").
     */
    packageStatus: string | null;
    /**
     * Base unit price for retail sales.
     */
    unitPrice: number;
    /**
     * Medical program pricing (optional, different from retail).
     */
    medUnitPrice: number | null;
    /**
     * Recreational program pricing (optional, different from medical).
     */
    recUnitPrice: number | null;
    /**
     * Strain identifier for cannabis products (optional).
     */
    strainId: number | null;
    /**
     * Strain name for cannabis products.
     */
    strain: string | null;
    /**
     * Cannabis strain classification (Hybrid, Indica, Sativa, CBD).
     */
    strainType: string | null;
    /**
     * Product size designation for packaging and dosing information.
     */
    size: string | null;
    /**
     * Collection of laboratory test results for this batch (included when includeLabResults=true).
     */
    labResults: Array<LabResultWritable> | null;
    /**
     * Date when laboratory testing was completed (optional).
     */
    testedDate: string | null;
    /**
     * Date when sample was collected for laboratory testing (optional).
     */
    sampleDate: string | null;
    /**
     * Date when product was packaged for distribution (optional).
     */
    packagedDate: string | null;
    /**
     * Date when product was manufactured or produced (optional).
     */
    manufacturingDate: string | null;
    /**
     * Last modification timestamp in UTC for data synchronization.
     */
    lastModifiedDateUtc: string | null;
    /**
     * Current status of laboratory testing (e.g., "Passed", "Failed", "Pending").
     */
    labTestStatus: string | null;
    /**
     * Vendor identifier for the supplier of this inventory (optional).
     */
    vendorId: number | null;
    /**
     * Vendor name for the supplier of this inventory.
     */
    vendor: string | null;
    /**
     * Product expiration date for compliance and quality control (optional).
     */
    expirationDate: string | null;
    /**
     * Quantity breakdown by storage room/location (included when includeRoomQuantities=true).
     */
    roomQuantities: Array<InventoryRoomQuantity> | null;
    /**
     * Pricing tier classification for bulk pricing strategies.
     */
    pricingTierName: string | null;
    /**
     * Alternative product name for display purposes.
     */
    alternateName: string | null;
    /**
     * Collection of compliance tags associated with this inventory package.
     */
    tags: Array<InventoryTag> | null;
    /**
     * Brand identifier for branded products (optional).
     */
    brandId: number | null;
    /**
     * Brand name for branded products.
     */
    brandName: string | null;
    /**
     * Indicates if product is restricted to medical program only.
     */
    medicalOnly: boolean;
    /**
     * External compliance system ID (METRC or BioTrack) for regulatory tracking.
     */
    externalPackageId: string | null;
    /**
     * Producer name for cultivation and manufacturing tracking.
     */
    producer: string | null;
    /**
     * Producer identifier for cultivation and manufacturing tracking (optional).
     */
    producerId: number | null;
    /**
     * Package lineage information for traceability and compliance tracking.
     */
    lineage: Array<PackageLineage> | null;
    /**
     * Potency classification indicator for dosing guidance.
     */
    potencyIndicator: string | null;
    /**
     * Master category classification for product grouping.
     */
    masterCategory: string | null;
    /**
     * Effective potency in milligrams for dosing calculations (optional).
     */
    effectivePotencyMg: number | null;
    /**
     * Indicates if product contains cannabis or is cannabis-related.
     */
    isCannabis: boolean;
    /**
     * National Drug Code for pharmaceutical tracking (optional).
     */
    packageNDC: string | null;
    /**
     * URL to certificate of analysis or lab testing document.
     */
    labResultUrl: string | null;
};

/**
 * Laboratory testing result model for cannabis and cannabis product analysis.
 */
export type LabResultWritable = {
    /**
     * Name of the laboratory test performed (e.g., "THC", "CBD", "Myrcene", "Total Aerobic Count").
     */
    labTest: string | null;
    /**
     * Numeric test result value (null if not detected or not applicable).
     */
    value: number | null;
    labResultUnitId: LabResultUnit;
};

/**
 * Tax information applied to individual transaction line items in cannabis retail operations.
 */
export type LineItemTaxInfoWritable = {
    /**
     * Name of the tax rate applied (e.g., "State Excise Tax", "City Cannabis Tax", "Sales Tax").
     */
    rateName: string | null;
    /**
     * Tax rate as a decimal percentage (e.g., 0.0875 for 8.75% tax rate).
     */
    rate: number;
    /**
     * Calculated tax amount applied to the line item (in USD).
     */
    amount: number;
};

/**
 * Location identity model containing complete location and parent company information for API key verification and context identification.
 */
export type LocationIdentityWritable = {
    /**
     * Unique identifier for the cannabis dispensary location.
     */
    locationId: number;
    /**
     * Unique identifier for the parent company (LSP - Licensed Service Provider).
     */
    lspId: number;
    /**
     * Business name of the cannabis dispensary location.
     */
    locationName: string | null;
    /**
     * Company name of the parent organization (Licensed Service Provider).
     */
    lspName: string | null;
    /**
     * Primary street address of the dispensary location.
     */
    address: string | null;
    /**
     * Secondary address line (suite, unit, etc.) if applicable.
     */
    address2: string | null;
    /**
     * City where the dispensary is located.
     */
    city: string | null;
    /**
     * State or province where the dispensary is licensed to operate.
     */
    state: string | null;
    /**
     * Postal code (ZIP code) for the dispensary location.
     */
    postalCode: string | null;
    /**
     * State-issued cannabis business license number for regulatory compliance.
     */
    licenseNumber: string | null;
    /**
     * "Doing Business As" name if different from the legal business name.
     */
    doingBusinessAs: string | null;
    /**
     * Indicates whether customer profiles are shared across locations within the organization.
     */
    shareCustomerProfiles: boolean;
    /**
     * Legacy global unique identifier for the location (deprecated).
     *
     * @deprecated
     */
    globalId: string | null;
    /**
     * Global unique identifier for the location across all systems and integrations.
     */
    locationGlobalId: string | null;
    /**
     * Global unique identifier for the parent company (LSP) across all systems.
     */
    lspGlobalId: string | null;
    /**
     * Regional identifier for compliance and API routing (internal use only).
     */
    region: string | null;
};

export type LocationResponseWritable = {
    locationName: string | null;
    locId: number;
    licenseNumber: string | null;
    broadcastedTo: string | null;
    errorDetail: string | null;
};

export type PlantWritable = {
    plantId: number;
    serialNumber: string | null;
    growthPhase: string | null;
    type: string | null;
    harvestedWeight: number | null;
    status: string | null;
    plantCount: number | null;
    isMother: boolean;
    motherPlantId: number | null;
    plantedOn: string | null;
    addedToHarvestOn: string | null;
    harvestDate: string | null;
    destroyedDate: string | null;
    plantGroupName: string | null;
    strain: string | null;
    room: string | null;
    table: string | null;
    vegetationStartedOn: string | null;
    vegetationEndedOn: string | null;
    floweringStartedOn: string | null;
    floweringEndedOn: string | null;
    currentPhaseStartDate: string | null;
    lastModifiedDate: string | null;
    daysInCurrentPhase: number | null;
    floweringRoom: string | null;
    floweringTable: string | null;
    vegetationRoom: string | null;
    vegetationTable: string | null;
    daysInFlowering: number | null;
    daysInVegetation: number | null;
    batchId: number;
};

export type ProductDetailWritable = {
    productId: number;
    sku: string | null;
    internalName: string | null;
    productName: string | null;
    description: string | null;
    masterCategory: string | null;
    categoryId: number | null;
    category: string | null;
    imageUrl: string | null;
    imageUrls: Array<string> | null;
    strainId: number | null;
    strain: string | null;
    strainType: string | null;
    size: string | null;
    netWeight: number | null;
    netWeightUnitId: number | null;
    brandId: number | null;
    brandName: string | null;
    vendorId: number | null;
    vendorName: string | null;
    isCannabis: boolean;
    isActive: boolean;
    isCoupon: boolean;
    thcContent: number | null;
    thcContentUnit: string | null;
    cbdContent: number | null;
    cbdContentUnit: string | null;
    productGrams: number | null;
    flowerEquivalent: number | null;
    recFlowerEquivalent: number | null;
    price: number | null;
    medPrice: number | null;
    recPrice: number | null;
    unitCost: number | null;
    unitType: string | null;
    onlineTitle: string | null;
    onlineDescription: string | null;
    posProducts: boolean | null;
    pricingTier: number | null;
    onlineAvailable: boolean | null;
    lowInventoryThreshold: number | null;
    pricingTierName: string | null;
    pricingTierDescription: string | null;
    pricingTierData: Array<PricingTierData> | null;
    flavor: string | null;
    alternateName: string | null;
    lineageName: string | null;
    distillationName: string | null;
    maxPurchaseablePerTransaction: number | null;
    tags: Array<ProductTag> | null;
    effects: Array<ProductEffect> | null;
    dosage: string | null;
    instructions: string | null;
    allergens: string | null;
    standardAllergens: StandardAllergensDetails;
    defaultUnit: string | null;
    producerId: number | null;
    producerName: string | null;
    createdDate: string | null;
    isMedicalOnly: boolean;
    lastModifiedDateUTC: string | null;
    grossWeight: number | null;
    isTaxable: boolean | null;
    taxCategories: Array<string> | null;
    upc: string | null;
    regulatoryCategory: string | null;
    ndc: string | null;
    daysSupply: number | null;
    externalCategory: string | null;
    externalId: string | null;
    syncExternally: boolean;
    regulatoryName: string | null;
    broadcastedResponses: BroadcastedResponsesWritable;
    administrationMethod: string | null;
    unitCBDContentDose: number | null;
    unitTHCContentDose: number | null;
    oilVolume: number | null;
    ingredientList: string | null;
    expirationDays: number | null;
    abbreviation: string | null;
    isTestProduct: boolean;
    isFinished: boolean;
    allowAutomaticDiscounts: boolean;
    servingSize: string | null;
    servingSizePerUnit: number | null;
    isNutrient: boolean;
    approvalDateUTC: string | null;
    ecomCategory: string | null;
    ecomSubcategory: string | null;
    customMetadata: string | null;
};

/**
 * Extended inventory item model for financial reporting with cost and allocation data.
 */
export type ReportingInventoryItemWritable = {
    /**
     * Unit of measurement for unit weight, always "g" (grams).
     */
    unitWeightUnit: string | null;
    /**
     * Unit cost of the inventory item for cost of goods sold calculations (in USD).
     */
    unitCost: number | null;
    /**
     * Quantity of inventory allocated to orders or transfers but not yet fulfilled.
     */
    allocatedQuantity: number | null;
    /**
     * Unique inventory record identifier for this specific inventory item.
     */
    inventoryId: number;
    /**
     * Product identifier linking this inventory to the product catalog.
     */
    productId: number;
    /**
     * Stock Keeping Unit (SKU) code for inventory tracking and identification.
     */
    sku: string | null;
    /**
     * Display name of the product for customer-facing applications.
     */
    productName: string | null;
    /**
     * Detailed product description including effects, characteristics, and usage information.
     */
    description: string | null;
    /**
     * Category identifier for product classification (optional).
     */
    categoryId: number | null;
    /**
     * Category name for product classification and filtering.
     */
    category: string | null;
    /**
     * URL path to product image for display purposes.
     */
    imageUrl: string | null;
    /**
     * Current available quantity for sale or transfer.
     */
    quantityAvailable: number;
    /**
     * Unit of measurement for the available quantity (e.g., "g", "mg", "ea").
     */
    quantityUnits: string | null;
    /**
     * Weight per unit in grams for dosing and compliance calculations.
     */
    unitWeight: number;
    /**
     * Flower equivalent amount in grams for compliance tracking.
     */
    flowerEquivalent: number;
    /**
     * Recreational flower equivalent amount in grams (optional).
     */
    recFlowerEquivalent: number | null;
    /**
     * Batch identifier for lot tracking and quality control.
     */
    batchId: number;
    /**
     * Human-readable batch name or lot number for tracking.
     */
    batchName: string | null;
    /**
     * Package identifier for compliance tracking and traceability.
     */
    packageId: string | null;
    /**
     * Current status of the package (e.g., "Active", "Testing", "Quarantine").
     */
    packageStatus: string | null;
    /**
     * Base unit price for retail sales.
     */
    unitPrice: number;
    /**
     * Medical program pricing (optional, different from retail).
     */
    medUnitPrice: number | null;
    /**
     * Recreational program pricing (optional, different from medical).
     */
    recUnitPrice: number | null;
    /**
     * Strain identifier for cannabis products (optional).
     */
    strainId: number | null;
    /**
     * Strain name for cannabis products.
     */
    strain: string | null;
    /**
     * Cannabis strain classification (Hybrid, Indica, Sativa, CBD).
     */
    strainType: string | null;
    /**
     * Product size designation for packaging and dosing information.
     */
    size: string | null;
    /**
     * Collection of laboratory test results for this batch (included when includeLabResults=true).
     */
    labResults: Array<LabResultWritable> | null;
    /**
     * Date when laboratory testing was completed (optional).
     */
    testedDate: string | null;
    /**
     * Date when sample was collected for laboratory testing (optional).
     */
    sampleDate: string | null;
    /**
     * Date when product was packaged for distribution (optional).
     */
    packagedDate: string | null;
    /**
     * Date when product was manufactured or produced (optional).
     */
    manufacturingDate: string | null;
    /**
     * Last modification timestamp in UTC for data synchronization.
     */
    lastModifiedDateUtc: string | null;
    /**
     * Current status of laboratory testing (e.g., "Passed", "Failed", "Pending").
     */
    labTestStatus: string | null;
    /**
     * Vendor identifier for the supplier of this inventory (optional).
     */
    vendorId: number | null;
    /**
     * Vendor name for the supplier of this inventory.
     */
    vendor: string | null;
    /**
     * Product expiration date for compliance and quality control (optional).
     */
    expirationDate: string | null;
    /**
     * Quantity breakdown by storage room/location (included when includeRoomQuantities=true).
     */
    roomQuantities: Array<InventoryRoomQuantity> | null;
    /**
     * Pricing tier classification for bulk pricing strategies.
     */
    pricingTierName: string | null;
    /**
     * Alternative product name for display purposes.
     */
    alternateName: string | null;
    /**
     * Collection of compliance tags associated with this inventory package.
     */
    tags: Array<InventoryTag> | null;
    /**
     * Brand identifier for branded products (optional).
     */
    brandId: number | null;
    /**
     * Brand name for branded products.
     */
    brandName: string | null;
    /**
     * Indicates if product is restricted to medical program only.
     */
    medicalOnly: boolean;
    /**
     * External compliance system ID (METRC or BioTrack) for regulatory tracking.
     */
    externalPackageId: string | null;
    /**
     * Producer name for cultivation and manufacturing tracking.
     */
    producer: string | null;
    /**
     * Producer identifier for cultivation and manufacturing tracking (optional).
     */
    producerId: number | null;
    /**
     * Package lineage information for traceability and compliance tracking.
     */
    lineage: Array<PackageLineage> | null;
    /**
     * Potency classification indicator for dosing guidance.
     */
    potencyIndicator: string | null;
    /**
     * Master category classification for product grouping.
     */
    masterCategory: string | null;
    /**
     * Effective potency in milligrams for dosing calculations (optional).
     */
    effectivePotencyMg: number | null;
    /**
     * Indicates if product contains cannabis or is cannabis-related.
     */
    isCannabis: boolean;
    /**
     * National Drug Code for pharmaceutical tracking (optional).
     */
    packageNDC: string | null;
    /**
     * URL to certificate of analysis or lab testing document.
     */
    labResultUrl: string | null;
};

/**
 * Request model for setting a product image through the product image management API.
 */
export type SetImageRequestWritable = {
    /**
     * The unique identifier of the product to associate the image with.
     */
    productId: number;
    /**
     * Base64-encoded string representation of the image file data.
     */
    base64Image: string;
    /**
     * Original filename of the image including file extension for proper handling.
     */
    fileName: string;
    fileType?: UploadFileType;
};

/**
 * Complete cannabis retail transaction model representing all aspects of cannabis sales operations.
 */
export type TransactionWritable = {
    transactionId: number;
    customerId: number;
    employeeId: number;
    transactionDate: string;
    voidDate: string | null;
    isVoid: boolean;
    subtotal: number;
    totalDiscount: number;
    tax: number;
    tipAmount: number | null;
    total: number;
    paid: number;
    changeDue: number;
    totalItems: number;
    terminalName: string | null;
    checkInDate: string | null;
    invoiceNumber: string | null;
    isTaxInclusive: boolean;
    /**
     * Will have one of the following values: Retail, Transfer, WholesaleOrder
     */
    transactionType: string | null;
    /**
     * Loyalty points earned on this transaction (can be negative if it's a return)
     */
    loyaltyEarned: number | null;
    /**
     * Loyalty points spent on this transaction (can be negative if it's a return)
     */
    loyaltySpent: number | null;
    items: Array<TransactionItemWritable> | null;
    lastModifiedDateUTC: string;
    cashPaid: number | null;
    debitPaid: number | null;
    electronicPaid: number | null;
    electronicPaymentMethod: string | null;
    checkPaid: number | null;
    creditPaid: number | null;
    giftPaid: number | null;
    mmapPaid: number | null;
    prePaymentAmount: number | null;
    revenueFeesAndDonations: number | null;
    nonRevenueFeesAndDonations: number | null;
    feesAndDonations: Array<FeeDonationInfo> | null;
    returnOnTransactionId: number | null;
    adjustmentForTransactionId: number | null;
    orderType: string | null;
    wasPreOrdered: boolean;
    orderSource: string | null;
    orderMethod: string | null;
    invoiceName: string | null;
    authCode: string | null;
    customerTypeId: number;
    isMedical: boolean;
    orderIds: Array<number> | null;
    totalCredit: number;
    completedByUser: string | null;
    responsibleForSaleUserId: number;
    transactionDateLocalTime: string;
    estTimeArrivalLocal: string | null;
    referenceId: string | null;
    manualPayments: Array<ManualPayment> | null;
    manualPaid: number | null;
    integratedPayments: Array<IntegratedPayment> | null;
    integratedPaid: number | null;
};

/**
 * Individual line item within a cannabis retail transaction containing product, pricing, and compliance information.
 */
export type TransactionItemWritable = {
    /**
     * Parent transaction identifier linking this item to the overall transaction.
     */
    transactionId: number;
    /**
     * Product identifier for the purchased cannabis product.
     */
    productId: number;
    /**
     * Total price for this line item including all taxes and discounts (in USD).
     */
    totalPrice: number;
    /**
     * Quantity of the product purchased (units based on product type - grams, pieces, etc.).
     */
    quantity: number;
    /**
     * Unit price per individual item before taxes and discounts (in USD).
     */
    unitPrice: number;
    /**
     * Cost basis of the product for internal accounting and margin calculations (in USD).
     */
    unitCost: number | null;
    /**
     * State tracking system package identifier for regulatory compliance (seed-to-sale tracking).
     */
    packageId: string | null;
    /**
     * Original source package identifier for product lineage tracking in state systems.
     */
    sourcePackageId: string | null;
    /**
     * Total discount amount applied to this line item (in USD).
     */
    totalDiscount: number;
    /**
     * Inventory record identifier for the specific product inventory being sold.
     */
    inventoryId: number;
    /**
     * Unit type identifier defining how the product is measured and sold.
     */
    unitId: number;
    /**
     * Flower equivalent weight for concentrate products in grams (for regulatory compliance).
     */
    flowerEquivalent: number | null;
    /**
     * Collection of discounts applied to this transaction item.
     */
    discounts: Array<AppliedDiscountWritable> | null;
    /**
     * Collection of taxes applied to this transaction item.
     */
    taxes: Array<LineItemTaxInfoWritable> | null;
    /**
     * Date when this item was returned (null if not returned).
     */
    returnDate: string | null;
    /**
     * Transaction identifier of the return transaction that processed this item's return.
     */
    returnedByTransactionId: number | null;
    /**
     * Reason provided for returning this item (e.g., "Defective", "Customer Dissatisfaction").
     */
    returnReason: string | null;
    /**
     * Cultivation batch name for product traceability and regulatory compliance.
     */
    batchName: string | null;
    /**
     * Vendor or supplier name for the product.
     */
    vendor: string | null;
    /**
     * Indicates whether this item represents a coupon or promotional discount rather than a physical product.
     */
    isCoupon: boolean;
};

export type ValidationResultWritable = {
    errors: Array<ValidationFailure> | null;
    ruleSetsExecuted: Array<string> | null;
};

export type BatchLabResultsPostData = {
    /**
     * Batch lab results update request with batch name and lab data - UpdateBatchLabResultsRequest object
     */
    body?: UpdateBatchLabResultsRequest;
    path?: never;
    query?: never;
    url: '/batch/lab-results';
};

export type BatchLabResultsPostErrors = {
    /**
     * Bad Request - String error message (parse response body as plain text) OR `ValidationResult` object with `isValid` boolean, `errors` array, and `ruleSetsExecuted` array
     */
    400: ValidationResult;
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Not Found - Batch with specified name does not exist
     */
    404: string;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type BatchLabResultsPostError = BatchLabResultsPostErrors[keyof BatchLabResultsPostErrors];

export type BatchLabResultsPostResponses = {
    /**
     * Success - Lab results successfully created or updated
     */
    200: unknown;
};

export type BrandGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/brand';
};

export type BrandGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for brand access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type BrandGetResponses = {
    /**
     * Success - Returns array of brand objects: `[{ Brand }, ...]`
     */
    200: Array<Brand>;
};

export type BrandGetResponse = BrandGetResponses[keyof BrandGetResponses];

export type BrandPostData = {
    /**
     * Brand information to create or update - BrandEditRequest object with brand details
     */
    body?: BrandEditRequest;
    path?: never;
    query?: never;
    url: '/brand';
};

export type BrandPostErrors = {
    /**
     * Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors)
     */
    400: BadRequestResponse;
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type BrandPostError = BrandPostErrors[keyof BrandPostErrors];

export type BrandPostResponses = {
    /**
     * Success - Returns brand object: `{ Brand }`
     */
    200: Brand;
};

export type BrandPostResponse = BrandPostResponses[keyof BrandPostResponses];

export type CustomerCustomersGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Optional date filter to return customers modified after this timestamp - Used for incremental sync
         */
        fromLastModifiedDateUTC?: string;
        /**
         * Optional date filter to return customers modified before this timestamp - Used for date range filtering
         */
        toLastModifiedDateUTC?: string;
        /**
         * Optional customer ID to return a specific customer by internal ID
         */
        customerID?: number;
        /**
         * Include/exclude anonymous customers in results - Default: true
         */
        includeAnonymous?: boolean;
        /**
         * Optional unique ID to return a specific customer by unique identifier - Must be valid long integer when provided
         */
        uniqueId?: string;
    };
    url: '/customer/customers';
};

export type CustomerCustomersGetErrors = {
    /**
     * Bad Request - Invalid date range or uniqueId format
     */
    400: BadRequestResponse;
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for customer data operations
     */
    403: unknown;
    /**
     * Not Found - Customer not found when searching by customerID or uniqueId
     */
    404: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type CustomerCustomersGetError = CustomerCustomersGetErrors[keyof CustomerCustomersGetErrors];

export type CustomerCustomersGetResponses = {
    /**
     * Success - Returns array of customer objects: `[{ Customer }, ...]`
     */
    200: Array<Customer>;
};

export type CustomerCustomersGetResponse = CustomerCustomersGetResponses[keyof CustomerCustomersGetResponses];

export type CustomerCustomersPaginatedGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Optional date filter to return customers modified after this timestamp
         */
        fromLastModifiedDateUTC?: string;
        /**
         * Optional date filter to return customers modified before this timestamp
         */
        toLastModifiedDateUTC?: string;
        /**
         * Page number for sequential pagination (integer, starts at 0) - Default: 0
         */
        PageNumber?: number;
        /**
         * Number of items per page (integer) - Default: 1000, Maximum: 10000
         */
        PageSize?: number;
        /**
         * Include/exclude anonymous customers in results - Default: true
         */
        includeAnonymous?: boolean;
    };
    url: '/customer/customers-paginated';
};

export type CustomerCustomersPaginatedGetErrors = {
    /**
     * Bad Request - PageSize exceeds maximum limit of 10,000
     */
    400: BadRequestResponse;
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type CustomerCustomersPaginatedGetError = CustomerCustomersPaginatedGetErrors[keyof CustomerCustomersPaginatedGetErrors];

export type CustomerCustomersPaginatedGetResponses = {
    /**
     * Success
     */
    200: Array<Customer>;
};

export type CustomerCustomersPaginatedGetResponse = CustomerCustomersPaginatedGetResponses[keyof CustomerCustomersPaginatedGetResponses];

export type CustomerCustomerTypesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/customer/customer-types';
};

export type CustomerCustomerTypesGetErrors = {
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type CustomerCustomerTypesGetResponses = {
    /**
     * Success
     */
    200: Array<CustomerType>;
};

export type CustomerCustomerTypesGetResponse = CustomerCustomerTypesGetResponses[keyof CustomerCustomerTypesGetResponses];

export type CustomerReferralSourcesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/customer/referral-sources';
};

export type CustomerReferralSourcesGetErrors = {
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type CustomerReferralSourcesGetResponses = {
    /**
     * Success
     */
    200: Array<string>;
};

export type CustomerReferralSourcesGetResponse = CustomerReferralSourcesGetResponses[keyof CustomerReferralSourcesGetResponses];

export type CustomerCustomerPostData = {
    /**
     * Customer information to create or update - EcomCustomerEdit object with customer details
     */
    body?: EcomCustomerEdit;
    headers?: {
        /**
         * Optional GUID for idempotency checks. When provided with IdempotencyKey in request body, prevents duplicate customer creation
         */
        ConsumerKey?: string;
    };
    path?: never;
    query?: {
        /**
         * Skip duplicate detection and force creation of new customer record - Default: false
         */
        bypassDeduplication?: boolean;
    };
    url: '/customer/customer';
};

export type CustomerCustomerPostErrors = {
    /**
     * Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors)
     */
    400: BadRequestResponse;
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for customer management
     */
    403: unknown;
    /**
     * Not Found - Customer ID provided for update but customer does not exist
     */
    404: string;
    /**
     * Internal Server Error - Server error occurred during customer processing
     */
    500: unknown;
};

export type CustomerCustomerPostError = CustomerCustomerPostErrors[keyof CustomerCustomerPostErrors];

export type CustomerCustomerPostResponses = {
    /**
     * Success - Returns complete Customer object with assigned ID and loyalty status
     */
    200: Customer;
};

export type CustomerCustomerPostResponse = CustomerCustomerPostResponses[keyof CustomerCustomerPostResponses];

export type CustomerCustomerLookupPostData = {
    body?: EcomCustomerEdit;
    path?: never;
    query?: never;
    url: '/customer/customerLookup';
};

export type CustomerCustomerLookupPostErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type CustomerCustomerLookupPostError = CustomerCustomerLookupPostErrors[keyof CustomerCustomerLookupPostErrors];

export type CustomerCustomerLookupPostResponses = {
    /**
     * OK
     */
    200: Customer;
};

export type CustomerCustomerLookupPostResponse = CustomerCustomerLookupPostResponses[keyof CustomerCustomerLookupPostResponses];

export type CustomerSearchPostData = {
    /**
     * Customer search request with search criteria - CustomerSearchRequest object
     */
    body?: CustomerSearchRequest;
    path?: never;
    query?: never;
    url: '/customer/search';
};

export type CustomerSearchPostErrors = {
    /**
     * Bad Request - Validation errors or no search criteria provided
     */
    400: BadRequestResponse;
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type CustomerSearchPostError = CustomerSearchPostErrors[keyof CustomerSearchPostErrors];

export type CustomerSearchPostResponses = {
    /**
     * Success
     */
    200: Array<CustomerSearchResult>;
};

export type CustomerSearchPostResponse = CustomerSearchPostResponses[keyof CustomerSearchPostResponses];

export type CustomerByExternalIdGetData = {
    body?: never;
    path?: never;
    query?: {
        externalId?: string;
    };
    url: '/customer/by-external-id';
};

export type CustomerByExternalIdGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type CustomerByExternalIdGetError = CustomerByExternalIdGetErrors[keyof CustomerByExternalIdGetErrors];

export type CustomerByExternalIdGetResponses = {
    /**
     * OK
     */
    200: Array<CustomerSearchResult>;
};

export type CustomerByExternalIdGetResponse = CustomerByExternalIdGetResponses[keyof CustomerByExternalIdGetResponses];

export type CustomerJournalGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Internal customer ID to retrieve journal entries for - Must exist and be accessible to your location
         */
        customerId?: number;
    };
    url: '/customer-journal';
};

export type CustomerJournalGetErrors = {
    /**
     * Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors)
     */
    400: BadRequestResponse;
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for customer access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type CustomerJournalGetError = CustomerJournalGetErrors[keyof CustomerJournalGetErrors];

export type CustomerJournalGetResponses = {
    /**
     * Success - Returns array of journal entry objects: `[{ JournalEntry }, ...]`
     */
    200: Array<JournalEntry>;
};

export type CustomerJournalGetResponse = CustomerJournalGetResponses[keyof CustomerJournalGetResponses];

export type CustomerJournalUpdatePostData = {
    /**
     * Journal entry update request with required fields to update - UpdateJournalEntryRequest object
     */
    body?: UpdateJournalEntryRequest;
    path?: never;
    query?: never;
    url: '/customer-journal/update';
};

export type CustomerJournalUpdatePostErrors = {
    /**
     * Bad Request - Validation errors or invalid journal entry ID
     */
    400: BadRequestResponse;
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for customer access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type CustomerJournalUpdatePostError = CustomerJournalUpdatePostErrors[keyof CustomerJournalUpdatePostErrors];

export type CustomerJournalUpdatePostResponses = {
    /**
     * Success - Returns journal entry object: `{ JournalEntry }`
     */
    200: JournalEntry;
};

export type CustomerJournalUpdatePostResponse = CustomerJournalUpdatePostResponses[keyof CustomerJournalUpdatePostResponses];

export type CustomerJournalCreatePostData = {
    /**
     * Journal entry creation request with customer ID and entry details - CreateJournalEntryRequest object
     */
    body?: CreateJournalEntryRequest;
    path?: never;
    query?: never;
    url: '/customer-journal/create';
};

export type CustomerJournalCreatePostErrors = {
    /**
     * Bad Request - Validation errors or invalid customer ID
     */
    400: BadRequestResponse;
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for customer access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type CustomerJournalCreatePostError = CustomerJournalCreatePostErrors[keyof CustomerJournalCreatePostErrors];

export type CustomerJournalCreatePostResponses = {
    /**
     * Success - Returns journal entry object: `{ JournalEntry }`
     */
    200: JournalEntry;
};

export type CustomerJournalCreatePostResponse = CustomerJournalCreatePostResponses[keyof CustomerJournalCreatePostResponses];

export type DeliveriesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Pre-order ID to get delivery status for - Optional, mutually exclusive with other filters
         */
        PreOrderId?: number;
        /**
         * Transaction ID to get delivery status for - Optional, mutually exclusive with other filters
         */
        TransactionId?: number;
        /**
         * Array of transaction IDs to get delivery status for - Optional, mutually exclusive with other filters
         */
        transactionIds?: Array<number>;
        /**
         * Include detailed line item data in response - Default: false
         */
        includeLineItems?: boolean;
        /**
         * Filter deliveries by status - Optional, mutually exclusive with other filters
         */
        deliveryStatus?: string;
    };
    url: '/Deliveries';
};

export type DeliveriesGetErrors = {
    /**
     * Bad Request - `ValidationResult` object with `isValid` boolean, `errors` array, and `ruleSetsExecuted` array
     */
    400: ValidationResult;
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for delivery access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type DeliveriesGetError = DeliveriesGetErrors[keyof DeliveriesGetErrors];

export type DeliveriesGetResponses = {
    /**
     * Success - Returns array of delivery objects: `[{ DeliveryOrderStatus }, ...]`
     */
    200: Array<DeliveryOrderStatus>;
};

export type DeliveriesGetResponse = DeliveriesGetResponses[keyof DeliveriesGetResponses];

export type DeliveriesSetRouteDetailPostData = {
    /**
     * Delivery route detail update request with transaction ID and delivery information - UpdateDeliveryRouteDetailRequest object
     */
    body?: UpdateDeliveryRouteDetailRequest;
    path?: never;
    query?: never;
    url: '/Deliveries/set-route-detail';
};

export type DeliveriesSetRouteDetailPostErrors = {
    /**
     * Bad Request - `ValidationResult` object with `isValid` boolean, `errors` array, and `ruleSetsExecuted` array
     */
    400: ValidationResult;
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for delivery access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type DeliveriesSetRouteDetailPostError = DeliveriesSetRouteDetailPostErrors[keyof DeliveriesSetRouteDetailPostErrors];

export type DeliveriesSetRouteDetailPostResponses = {
    /**
     * Success - Route details successfully updated
     */
    200: unknown;
};

export type DiscountsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Include deleted or inactive discounts in results - Default: false
         */
        includeInactive?: boolean;
        /**
         * Include detailed product/category restriction data - Default: false
         */
        includeInclusionExclusionData?: boolean;
    };
    url: '/discounts';
};

export type DiscountsGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type DiscountsGetResponses = {
    /**
     * Success - Returns array of basic discount information
     */
    200: Array<PublishedDiscount>;
};

export type DiscountsGetResponse = DiscountsGetResponses[keyof DiscountsGetResponses];

export type DiscountsV2ListGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Include deleted or inactive discounts in results - Default: false
         */
        includeInactive?: boolean;
        /**
         * Include detailed product/category restriction data - Default: false
         */
        includeInclusionExclusionData?: boolean;
        /**
         * Include credit card and payment method restrictions - Default: false
         */
        includePaymentRestrictions?: boolean;
    };
    url: '/discounts/v2/list';
};

export type DiscountsV2ListGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type DiscountsV2ListGetResponses = {
    /**
     * Success - Returns array of comprehensive discount configuration objects
     */
    200: Array<DiscountApiResponse>;
};

export type DiscountsV2ListGetResponse = DiscountsV2ListGetResponses[keyof DiscountsV2ListGetResponses];

export type DriversGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/drivers';
};

export type DriversGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for driver access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type DriversGetResponses = {
    /**
     * Success - Returns array of driver objects: `[{ DriverDetail }, ...]`
     */
    200: Array<DriverDetail>;
};

export type DriversGetResponse = DriversGetResponses[keyof DriversGetResponses];

export type DriversPostData = {
    /**
     * Driver information to create or update - DriverDetail object with driver details
     */
    body?: DriverDetail;
    path?: never;
    query?: never;
    url: '/drivers';
};

export type DriversPostErrors = {
    /**
     * Bad Request - `ValidationResult` object with `isValid` boolean, `errors` array, and `ruleSetsExecuted` array
     */
    400: ValidationResult;
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for driver access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type DriversPostError = DriversPostErrors[keyof DriversPostErrors];

export type DriversPostResponses = {
    /**
     * Success - Driver successfully created or updated
     */
    200: unknown;
};

export type EmployeesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/employees';
};

export type EmployeesGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for employee access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type EmployeesGetResponses = {
    /**
     * Success - Returns array of Employee objects: `[{ Employee }, ...]`
     */
    200: Array<Employee>;
};

export type EmployeesGetResponse = EmployeesGetResponses[keyof EmployeesGetResponses];

export type GuestlistGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/guestlist';
};

export type GuestlistGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for customer access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type GuestlistGetResponses = {
    /**
     * Success - Returns array of guest objects: `[{ GuestListEntry }, ...]`
     */
    200: Array<GuestListEntry>;
};

export type GuestlistGetResponse = GuestlistGetResponses[keyof GuestlistGetResponses];

export type HarvestGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter harvests modified after this date for incremental sync - Optional
         */
        fromLastModifiedDateUTC?: string;
        /**
         * Filter harvests modified before this date for date range filtering - Optional
         */
        toLastModifiedDateUTC?: string;
        /**
         * Filter by harvest status: true=active, false=completed, null=completed only - Default: null (completed only)
         */
        activeHarvests?: boolean;
    };
    url: '/harvest';
};

export type HarvestGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for cultivation or inventory access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type HarvestGetResponses = {
    /**
     * Success - Returns array of harvest objects: `[{ Harvest }, ...]`
     */
    200: Array<Harvest>;
};

export type HarvestGetResponse = HarvestGetResponses[keyof HarvestGetResponses];

export type HarvestPostData = {
    /**
     * Harvest information to create or update - CreateOrUpdateHarvest object with harvest details
     */
    body?: CreateOrUpdateHarvest;
    path?: never;
    query?: never;
    url: '/harvest';
};

export type HarvestPostErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for cultivation write access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type HarvestPostResponses = {
    /**
     * Success - Returns harvest ID for created or updated harvest: `integer`
     */
    200: number;
};

export type HarvestPostResponse = HarvestPostResponses[keyof HarvestPostResponses];

export type HarvestBulkPostData = {
    /**
     * Bulk harvest request with array of harvest operations - BulkCreateOrUpdateHarvest object
     */
    body?: BulkCreateOrUpdateHarvest;
    path?: never;
    query?: never;
    url: '/harvest/bulk';
};

export type HarvestBulkPostErrors = {
    /**
     * Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors)
     */
    400: BadRequestResponse;
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for cultivation write access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type HarvestBulkPostError = HarvestBulkPostErrors[keyof HarvestBulkPostErrors];

export type HarvestBulkPostResponses = {
    /**
     * Success - Returns bulk harvest response object: `{ BulkCreateOrUpdateHarvestResponse }`
     */
    200: BulkCreateOrUpdateHarvestResponse;
};

export type HarvestBulkPostResponse = HarvestBulkPostResponses[keyof HarvestBulkPostResponses];

export type OkcomputerGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/okcomputer';
};

export type OkcomputerGetErrors = {
    /**
     * Internal Server Error - Service is experiencing issues
     */
    500: unknown;
};

export type OkcomputerGetResponses = {
    /**
     * Success - Service is healthy and responsive
     */
    200: SuccessResult;
};

export type OkcomputerGetResponse = OkcomputerGetResponses[keyof OkcomputerGetResponses];

export type IntegrationIntegrationReconGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/integration/integration-recon';
};

export type IntegrationIntegrationReconGetErrors = {
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type IntegrationIntegrationReconGetResponses = {
    /**
     * Success
     */
    200: InventoryIntegrationReconResponse;
};

export type IntegrationIntegrationReconGetResponse = IntegrationIntegrationReconGetResponses[keyof IntegrationIntegrationReconGetResponses];

export type InventoryGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Include detailed lab testing data and cannabinoid profiles - Default: false
         */
        includeLabResults?: boolean;
        /**
         * Include quantity breakdown by storage room/location - Default: false
         */
        includeRoomQuantities?: boolean;
    };
    url: '/inventory';
};

export type InventoryGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for inventory access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type InventoryGetResponses = {
    /**
     * Success - Returns array of inventory items with product and stock details
     */
    200: Array<InventoryItem>;
};

export type InventoryGetResponse = InventoryGetResponses[keyof InventoryGetResponses];

export type InventoryLabresultsGetData = {
    body?: never;
    path?: never;
    query?: {
        BatchName?: string;
    };
    url: '/inventory/labresults';
};

export type InventoryLabresultsGetErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type InventoryLabresultsGetResponses = {
    /**
     * OK
     */
    200: Array<LabResult>;
};

export type InventoryLabresultsGetResponse = InventoryLabresultsGetResponses[keyof InventoryLabresultsGetResponses];

export type InventorySnapshotGetData = {
    body?: never;
    path?: never;
    query?: {
        fromDate?: string;
    };
    url: '/inventory/snapshot';
};

export type InventorySnapshotGetErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type InventorySnapshotGetResponses = {
    /**
     * OK
     */
    200: Array<InventorySnapshot>;
};

export type InventorySnapshotGetResponse = InventorySnapshotGetResponses[keyof InventorySnapshotGetResponses];

export type InventoryReceivedinventoryGetData = {
    body?: never;
    path?: never;
    query?: {
        receiveInventoryHistoryId?: number;
        startDate?: string;
        endDate?: string;
    };
    url: '/inventory/receivedinventory';
};

export type InventoryReceivedinventoryGetErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type InventoryReceivedinventoryGetResponses = {
    /**
     * OK
     */
    200: Array<ReceivedInventory>;
};

export type InventoryReceivedinventoryGetResponse = InventoryReceivedinventoryGetResponses[keyof InventoryReceivedinventoryGetResponses];

export type InventoryInventorytransactionGetData = {
    body?: never;
    path?: never;
    query?: {
        startDate?: string;
        endDate?: string;
        transactionType?: string;
    };
    url: '/inventory/inventorytransaction';
};

export type InventoryInventorytransactionGetErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type InventoryInventorytransactionGetResponses = {
    /**
     * OK
     */
    200: Array<InventoryTransaction>;
};

export type InventoryInventorytransactionGetResponse = InventoryInventorytransactionGetResponses[keyof InventoryInventorytransactionGetResponses];

export type InventoryReceiveinventoryPostData = {
    /**
     * Receive inventory order details including vendor, delivery, and item information
     */
    body?: ReceiveInventorySave;
    path?: never;
    query?: never;
    url: '/inventory/receiveinventory';
};

export type InventoryReceiveinventoryPostErrors = {
    /**
     * Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors) OR String error message (parse response body as plain text)
     */
    400: string;
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for inventory access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type InventoryReceiveinventoryPostError = InventoryReceiveinventoryPostErrors[keyof InventoryReceiveinventoryPostErrors];

export type InventoryReceiveinventoryPostResponses = {
    /**
     * Success - Returns SavedReceive object with transaction details
     */
    200: SavedReceive;
};

export type InventoryReceiveinventoryPostResponse = InventoryReceiveinventoryPostResponses[keyof InventoryReceiveinventoryPostResponses];

export type LineagesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/lineages';
};

export type LineagesGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type LineagesGetResponses = {
    /**
     * Success - Returns array of lineage objects: `[{ Lineage }, ...]`
     */
    200: Array<Lineage>;
};

export type LineagesGetResponse = LineagesGetResponses[keyof LineagesGetResponses];

export type PackageSetTagsPostData = {
    /**
     * Package tag update request with package identifiers and replacement tags - UpdatePackageTagsRequest object
     */
    body?: UpdatePackageTagsRequest;
    path?: never;
    query?: never;
    url: '/package/set-tags';
};

export type PackageSetTagsPostErrors = {
    /**
     * Bad Request - `ValidationResult` object with `isValid` boolean, `errors` array, and `ruleSetsExecuted` array
     */
    400: ValidationResult;
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type PackageSetTagsPostError = PackageSetTagsPostErrors[keyof PackageSetTagsPostErrors];

export type PackageSetTagsPostResponses = {
    /**
     * Success - Tags successfully set on specified packages
     */
    200: unknown;
};

export type PackageAddTagsPostData = {
    /**
     * Package tag update request with package identifiers and additional tags - UpdatePackageTagsRequest object
     */
    body?: UpdatePackageTagsRequest;
    path?: never;
    query?: never;
    url: '/package/add-tags';
};

export type PackageAddTagsPostErrors = {
    /**
     * Bad Request - `ValidationResult` object with `isValid` boolean, `errors` array, and `ruleSetsExecuted` array
     */
    400: unknown;
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type PackageAddTagsPostResponses = {
    /**
     * Success - Tags successfully added to specified packages
     */
    200: unknown;
};

export type PackageRemoveTagsPostData = {
    /**
     * Package tag update request with package identifiers and tags to remove - UpdatePackageTagsRequest object
     */
    body?: UpdatePackageTagsRequest;
    path?: never;
    query?: never;
    url: '/package/remove-tags';
};

export type PackageRemoveTagsPostErrors = {
    /**
     * Bad Request - `ValidationResult` object with `isValid` boolean, `errors` array, and `ruleSetsExecuted` array
     */
    400: unknown;
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type PackageRemoveTagsPostResponses = {
    /**
     * Success - Tags successfully removed from specified packages
     */
    200: unknown;
};

export type PlantGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Dutchie internal plant ID for specific plant lookup - Optional
         */
        plantId?: number;
        /**
         * Plant serial number for tracking system integration - Optional
         */
        serialNumber?: string;
        /**
         * Plant status filter: Active, Harvesting, Harvested, Retired - Optional
         */
        status?: string;
        /**
         * Filter plants modified after this date for incremental sync - Optional
         */
        lastModifiedDateStart?: string;
        /**
         * Filter plants modified before this date for date range filtering - Optional
         */
        lastModifiedDateEnd?: string;
    };
    url: '/plant';
};

export type PlantGetErrors = {
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type PlantGetResponses = {
    /**
     * Success
     */
    200: Array<Plant>;
};

export type PlantGetResponse = PlantGetResponses[keyof PlantGetResponses];

export type PlantPostData = {
    /**
     * Plant creation request with identification and group details - see `CreatePlantRequest` model for complete field documentation
     */
    body?: CreatePlantRequest;
    path?: never;
    query?: never;
    url: '/plant';
};

export type PlantPostErrors = {
    /**
     * Bad Request - Validation errors or duplicate serial number
     */
    400: {
        [key: string]: unknown;
    };
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type PlantPostError = PlantPostErrors[keyof PlantPostErrors];

export type PlantPostResponses = {
    /**
     * Success - Returns newly created plant ID as integer
     */
    200: number;
};

export type PlantPostResponse = PlantPostResponses[keyof PlantPostResponses];

export type PlantHarvestPostData = {
    /**
     * Plant harvest request with plant identifiers and optional weight data - HarvestPlantRequest object
     */
    body?: HarvestPlantRequest;
    path?: never;
    query?: never;
    url: '/plant/harvest';
};

export type PlantHarvestPostErrors = {
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type PlantHarvestPostResponses = {
    /**
     * Success - Plants successfully moved to harvest status
     */
    200: unknown;
};

export type PlantMovePostData = {
    /**
     * Plant movement request with plant IDs and target room information - see `MovePlantRequest` model for complete field documentation
     */
    body?: MovePlantRequest;
    path?: never;
    query?: never;
    url: '/plant/move';
};

export type PlantMovePostErrors = {
    /**
     * Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors)
     */
    400: unknown;
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type PlantMovePostResponses = {
    /**
     * Success - Plants successfully moved to target room
     */
    200: unknown;
};

export type PlantChangePhasePostData = {
    /**
     * Growth phase change request with plant IDs and target phase information - see `ChangeGrowthPhaseRequest` model for complete field documentation
     */
    body?: ChangeGrowthPhaseRequest;
    path?: never;
    query?: never;
    url: '/plant/change-phase';
};

export type PlantChangePhasePostErrors = {
    /**
     * Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors)
     */
    400: unknown;
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type PlantChangePhasePostResponses = {
    /**
     * Success - Plants successfully updated to new growth phase
     */
    200: unknown;
};

export type PlantRetirePostData = {
    /**
     * Plant retirement request with plant IDs, reason codes, and waste tracking details - see `RetirePlantRequest` model for complete field documentation
     */
    body?: RetirePlantRequest;
    path?: never;
    query?: never;
    url: '/plant/retire';
};

export type PlantRetirePostErrors = {
    /**
     * Bad Request - Invalid reason ID/code or validation errors
     */
    400: BadRequestResponse;
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type PlantRetirePostError = PlantRetirePostErrors[keyof PlantRetirePostErrors];

export type PlantRetirePostResponses = {
    /**
     * Success - Plants successfully retired from cultivation
     */
    200: unknown;
};

export type PlantGetReasonCodesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/plant/get-reason-codes';
};

export type PlantGetReasonCodesGetErrors = {
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type PlantGetReasonCodesGetResponses = {
    /**
     * Success - Returns array of reason code strings: `[string, ...]`
     */
    200: Array<string>;
};

export type PlantGetReasonCodesGetResponse = PlantGetReasonCodesGetResponses[keyof PlantGetReasonCodesGetResponses];

export type PlantAssignPlantsToGroupPostData = {
    /**
     * Plant group assignment request with group name and plant serial numbers - see `AssignPlantsToGroupRequest` model for complete field documentation
     */
    body?: AssignPlantsToGroupRequest;
    path?: never;
    query?: never;
    url: '/plant/assign-plants-to-group';
};

export type PlantAssignPlantsToGroupPostErrors = {
    /**
     * Bad Request - Validation errors or invalid plant serial numbers
     */
    400: BadRequestResponse;
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type PlantAssignPlantsToGroupPostError = PlantAssignPlantsToGroupPostErrors[keyof PlantAssignPlantsToGroupPostErrors];

export type PlantAssignPlantsToGroupPostResponses = {
    /**
     * Success - Plants successfully assigned to target group
     */
    200: unknown;
};

export type PlantNonstsUpdatePostData = {
    /**
     * Plant update request with PlantId and field updates - UpdatePlantsRequest object
     */
    body?: UpdatePlantsRequest;
    path?: never;
    query?: never;
    url: '/plant/nonsts/update';
};

export type PlantNonstsUpdatePostErrors = {
    /**
     * Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors)
     */
    400: BadRequestResponse;
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type PlantNonstsUpdatePostError = PlantNonstsUpdatePostErrors[keyof PlantNonstsUpdatePostErrors];

export type PlantNonstsUpdatePostResponses = {
    /**
     * Success
     */
    200: SuccessResult;
};

export type PlantNonstsUpdatePostResponse = PlantNonstsUpdatePostResponses[keyof PlantNonstsUpdatePostResponses];

export type PlantNonstsBatchImmatureplantsPostData = {
    /**
     * Immature plant batch request with plant details - PostImmatureBatchRequest object
     */
    body?: PostImmatureBatchRequest;
    path?: never;
    query?: never;
    url: '/plant/nonsts/batch/immatureplants';
};

export type PlantNonstsBatchImmatureplantsPostErrors = {
    /**
     * Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors)
     */
    400: BadRequestResponse;
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type PlantNonstsBatchImmatureplantsPostError = PlantNonstsBatchImmatureplantsPostErrors[keyof PlantNonstsBatchImmatureplantsPostErrors];

export type PlantNonstsBatchImmatureplantsPostResponses = {
    /**
     * Success
     */
    200: CreateImmaturePlantBatchResponseApiResult;
};

export type PlantNonstsBatchImmatureplantsPostResponse = PlantNonstsBatchImmatureplantsPostResponses[keyof PlantNonstsBatchImmatureplantsPostResponses];

export type PlantNonstsBatchConvertImmatureplantsPostData = {
    /**
     * Immature batch conversion request with conversion details - ConvertImmatureBatchRequest object
     */
    body?: ConvertImmatureBatchRequest;
    path?: never;
    query?: never;
    url: '/plant/nonsts/batch/convert/immatureplants';
};

export type PlantNonstsBatchConvertImmatureplantsPostErrors = {
    /**
     * Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors)
     */
    400: BadRequestResponse;
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type PlantNonstsBatchConvertImmatureplantsPostError = PlantNonstsBatchConvertImmatureplantsPostErrors[keyof PlantNonstsBatchConvertImmatureplantsPostErrors];

export type PlantNonstsBatchConvertImmatureplantsPostResponses = {
    /**
     * Success
     */
    200: ConvertImmaturePlantResponseApiResult;
};

export type PlantNonstsBatchConvertImmatureplantsPostResponse = PlantNonstsBatchConvertImmatureplantsPostResponses[keyof PlantNonstsBatchConvertImmatureplantsPostResponses];

export type PlantNonstsBatchMatureplantsPostData = {
    /**
     * Mature plant batch request with plant details - CreateMatureBatchRequest object
     */
    body?: CreateMatureBatchRequest;
    path?: never;
    query?: never;
    url: '/plant/nonsts/batch/matureplants';
};

export type PlantNonstsBatchMatureplantsPostErrors = {
    /**
     * Bad Request - Validation failed or invalid request data
     */
    400: BadRequestResponse;
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for mature plant creation or feature flag disabled
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type PlantNonstsBatchMatureplantsPostError = PlantNonstsBatchMatureplantsPostErrors[keyof PlantNonstsBatchMatureplantsPostErrors];

export type PlantNonstsBatchMatureplantsPostResponses = {
    /**
     * Success - Returns ApiResult<CreateMaturePlantsResponse> with created plant IDs: `{ "data": { "createdPlants": [plantId1, plantId2, ...] }, "message": "Successfully created mature plants from batches.", "success": true }`
     */
    200: CreateMaturePlantsResponseApiResult;
};

export type PlantNonstsBatchMatureplantsPostResponse = PlantNonstsBatchMatureplantsPostResponses[keyof PlantNonstsBatchMatureplantsPostResponses];

export type PlantNonstsRetagPostData = {
    /**
     * Plant retagging request with plant and new tag details - RetagPlantRequest object
     */
    body?: RetagPlantRequest;
    path?: never;
    query?: never;
    url: '/plant/nonsts/retag';
};

export type PlantNonstsRetagPostErrors = {
    /**
     * Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors)
     */
    400: BadRequestResponse;
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type PlantNonstsRetagPostError = PlantNonstsRetagPostErrors[keyof PlantNonstsRetagPostErrors];

export type PlantNonstsRetagPostResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type PlantNonstsBatchRetirePostData = {
    /**
     * Immature plant retirement request with plant details - RetireImmaturePlantsRequest object
     */
    body?: RetireImmaturePlantsRequest;
    path?: never;
    query?: never;
    url: '/plant/nonsts/batch/retire';
};

export type PlantNonstsBatchRetirePostErrors = {
    /**
     * Bad Request - Validation failed or invalid plant data
     */
    400: BadRequestResponse;
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for plant retirement
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type PlantNonstsBatchRetirePostError = PlantNonstsBatchRetirePostErrors[keyof PlantNonstsBatchRetirePostErrors];

export type PlantNonstsBatchRetirePostResponses = {
    /**
     * Success - No response body, operation completed successfully
     */
    200: unknown;
};

export type PlantNonstsBatchFinishHarvestPostData = {
    /**
     * Harvest batch finish/unfinish request with batch details - FinishHarvestBatchRequest object
     */
    body?: Array<FinishOrUnfinishBatchDetails>;
    path?: never;
    query?: never;
    url: '/plant/nonsts/batch/finish-harvest';
};

export type PlantNonstsBatchFinishHarvestPostErrors = {
    /**
     * Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors)
     */
    400: BadRequestResponse;
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type PlantNonstsBatchFinishHarvestPostError = PlantNonstsBatchFinishHarvestPostErrors[keyof PlantNonstsBatchFinishHarvestPostErrors];

export type PlantNonstsBatchFinishHarvestPostResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type PlantNonstsSplitPostData = {
    /**
     * Immature plant batch split request with batch and split details - SplitImmaturePlantsRequest object
     */
    body?: SplitImmaturePlantsRequest;
    path?: never;
    query?: never;
    url: '/plant/nonsts/split';
};

export type PlantNonstsSplitPostErrors = {
    /**
     * Bad Request - Validation failed or invalid batch data
     */
    400: BadRequestResponse;
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for batch splitting
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type PlantNonstsSplitPostError = PlantNonstsSplitPostErrors[keyof PlantNonstsSplitPostErrors];

export type PlantNonstsSplitPostResponses = {
    /**
     * Success - Returns ApiResult<SplitImmaturePlantResult> with split batch details: `{ "data": { "originalBatch": {...}, "newBatch": {...} }, "message": "Successfully split immature batches of plants.", "success": true }`
     */
    200: SplitImmaturePlantResultApiResult;
};

export type PlantNonstsSplitPostResponse = PlantNonstsSplitPostResponses[keyof PlantNonstsSplitPostResponses];

export type PlantNonstsBatchPostData = {
    /**
     * Batch update request with batch identification and field updates - UpdateBatchRequest object
     */
    body?: UpdateBatchRequest;
    path?: never;
    query?: never;
    url: '/plant/nonsts/batch';
};

export type PlantNonstsBatchPostErrors = {
    /**
     * Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors)
     */
    400: BadRequestResponse;
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type PlantNonstsBatchPostError = PlantNonstsBatchPostErrors[keyof PlantNonstsBatchPostErrors];

export type PlantNonstsBatchPostResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type PreorderSubmitPostData = {
    /**
     * Pre-order details including customer, cart items, and fulfillment information - CreatePreOrderRequest object
     */
    body?: CreatePreOrderRequest;
    path?: never;
    query?: never;
    url: '/preorder/submit';
};

export type PreorderSubmitPostErrors = {
    /**
     * Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors)
     */
    400: BadRequestResponse;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type PreorderSubmitPostError = PreorderSubmitPostErrors[keyof PreorderSubmitPostErrors];

export type PreorderSubmitPostResponses = {
    /**
     * Success - Returns orderId and transactionId for the created pre-order
     */
    200: number;
};

export type PreorderSubmitPostResponse = PreorderSubmitPostResponses[keyof PreorderSubmitPostResponses];

export type PreorderUpdatePostData = {
    /**
     * Update details including OrderId and fields to be modified
     */
    body?: UpdatePreOrderRequest;
    path?: never;
    query?: never;
    url: '/preorder/update';
};

export type PreorderUpdatePostErrors = {
    /**
     * Bad Request - Empty response body (handle via HTTP status code only)
     */
    400: unknown;
    /**
     * Not Found - Order ID does not exist
     */
    404: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type PreorderUpdatePostResponses = {
    /**
     * Success - Order updated successfully
     */
    200: unknown;
};

export type PreorderCancelPostData = {
    /**
     * Cancellation request containing the OrderId to cancel
     */
    body?: CancelPreorderRequest;
    path?: never;
    query?: never;
    url: '/preorder/cancel';
};

export type PreorderCancelPostErrors = {
    /**
     * Bad Request - Empty response body (handle via HTTP status code only)
     */
    400: unknown;
    /**
     * Not Found - Order ID does not exist
     */
    404: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: string;
};

export type PreorderCancelPostError = PreorderCancelPostErrors[keyof PreorderCancelPostErrors];

export type PreorderCancelPostResponses = {
    /**
     * Success - Order cancelled successfully
     */
    200: number;
};

export type PreorderCancelPostResponse = PreorderCancelPostResponses[keyof PreorderCancelPostResponses];

export type PreorderStatusGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Specific order ID to retrieve status for (optional - omit for all open orders)
         */
        PreOrderId?: number;
        /**
         * Include detailed product line item information (requires PreOrderId)
         */
        includeLineItems?: boolean;
    };
    url: '/preorder/Status';
};

export type PreorderStatusGetErrors = {
    /**
     * Bad Request - Empty response body (handle via HTTP status code only)
     */
    400: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type PreorderStatusGetResponses = {
    /**
     * Success - Returns PreOrderStatus object(s) with current order information
     */
    200: PreOrderStatus;
};

export type PreorderStatusGetResponse = PreorderStatusGetResponses[keyof PreorderStatusGetResponses];

export type PreorderPriceCartPostData = {
    /**
     * Pricing request containing customer information, cart items, and delivery preferences
     */
    body?: PriceCartRequest;
    path?: never;
    query?: never;
    url: '/preorder/price-cart';
};

export type PreorderPriceCartPostErrors = {
    /**
     * Bad Request - String error message (parse response body as plain text)
     */
    400: string;
    /**
     * Internal Server Error - Server error occurred during pricing calculation
     */
    500: unknown;
};

export type PreorderPriceCartPostError = PreorderPriceCartPostErrors[keyof PreorderPriceCartPostErrors];

export type PreorderPriceCartPostResponses = {
    /**
     * Success - Returns detailed pricing breakdown for the cart
     */
    200: CartPrice;
};

export type PreorderPriceCartPostResponse = PreorderPriceCartPostResponses[keyof PreorderPriceCartPostResponses];

export type PricingTiersGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/pricing-tiers';
};

export type PricingTiersGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type PricingTiersGetResponses = {
    /**
     * Success - Returns array of pricing tier objects: `[{ PricingTier }, ...]`
     */
    200: Array<PricingTier>;
};

export type PricingTiersGetResponse = PricingTiersGetResponses[keyof PricingTiersGetResponses];

export type ProducersGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/producers';
};

export type ProducersGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type ProducersGetResponses = {
    /**
     * Success - Returns array of producer objects: `[{ Producer }, ...]`
     */
    200: Array<Producer>;
};

export type ProducersGetResponse = ProducersGetResponses[keyof ProducersGetResponses];

export type ProductsLocationOverridesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/products/location-overrides';
};

export type ProductsLocationOverridesGetErrors = {
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type ProductsLocationOverridesGetResponses = {
    /**
     * Success
     */
    200: Array<LocationProductOverride>;
};

export type ProductsLocationOverridesGetResponse = ProductsLocationOverridesGetResponses[keyof ProductsLocationOverridesGetResponses];

export type ProductsLocationOverridesPostData = {
    /**
     * Array of location product override requests with ProductId and override values - LocationProductOverrideRequest objects
     */
    body?: Array<LocationProductOverrideRequest>;
    path?: never;
    query?: never;
    url: '/products/location-overrides';
};

export type ProductsLocationOverridesPostErrors = {
    /**
     * Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors)
     */
    400: unknown;
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong. One or more overrides may have been saved
     */
    500: unknown;
};

export type ProductsLocationOverridesPostResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type ProductsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Optional date filter to return only products modified after this timestamp - Used for incremental sync
         */
        fromLastModifiedDateUTC?: string;
        /**
         * Optional status filter - true for active products only, false for inactive only, null for all products
         */
        isActive?: boolean;
    };
    url: '/products';
};

export type ProductsGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for inventory access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type ProductsGetResponses = {
    /**
     * Success - Returns array of product objects: `[{ ProductDetail }, ...]`
     */
    200: Array<ProductDetail>;
};

export type ProductsGetResponse = ProductsGetResponses[keyof ProductsGetResponses];

export type ProductsProductPostData = {
    /**
     * Product information to create or update - ProductDetailUpload object with product details
     */
    body?: ProductDetailUpload;
    path?: never;
    query?: never;
    url: '/products/product';
};

export type ProductsProductPostErrors = {
    /**
     * Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors)
     */
    400: BadRequestResponse;
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type ProductsProductPostError = ProductsProductPostErrors[keyof ProductsProductPostErrors];

export type ProductsProductPostResponses = {
    /**
     * Success
     */
    200: ProductDetail;
};

export type ProductsProductPostResponse = ProductsProductPostResponses[keyof ProductsProductPostResponses];

export type ProductsProductsPostData = {
    /**
     * Array of product information to create or update - IEnumerable<ProductDetailUpload> objects
     */
    body?: Array<ProductDetailUpload>;
    path?: never;
    query?: never;
    url: '/products/products';
};

export type ProductsProductsPostErrors = {
    /**
     * Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors) OR `ValidationResult` object with `isValid` boolean, `errors` array, and `ruleSetsExecuted` array
     */
    400: ValidationResult;
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type ProductsProductsPostError = ProductsProductsPostErrors[keyof ProductsProductsPostErrors];

export type ProductsProductsPostResponses = {
    /**
     * Success - Products processed with individual success/error results
     */
    200: Array<{
        [key: string]: unknown;
    }>;
};

export type ProductsProductsPostResponse = ProductsProductsPostResponses[keyof ProductsProductsPostResponses];

export type ProductsSetImagePostData = {
    /**
     * Image upload request with ProductId and base64 image data - SetImageRequest object
     */
    body?: SetImageRequestWritable;
    path?: never;
    query?: never;
    url: '/products/set-image';
};

export type ProductsSetImagePostErrors = {
    /**
     * Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors)
     */
    400: BadRequestResponse;
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type ProductsSetImagePostError = ProductsSetImagePostErrors[keyof ProductsSetImagePostErrors];

export type ProductsSetImagePostResponses = {
    /**
     * Success
     */
    200: SetImageResponse;
};

export type ProductsSetImagePostResponse = ProductsSetImagePostResponses[keyof ProductsSetImagePostResponses];

export type ProductsRemoveImagePostData = {
    /**
     * Image deletion request with ProductId and ImageId - DeleteImageRequest object
     */
    body?: DeleteImageRequest;
    path?: never;
    query?: never;
    url: '/products/remove-image';
};

export type ProductsRemoveImagePostErrors = {
    /**
     * Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors)
     */
    400: BadRequestResponse;
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type ProductsRemoveImagePostError = ProductsRemoveImagePostErrors[keyof ProductsRemoveImagePostErrors];

export type ProductsRemoveImagePostResponses = {
    /**
     * Success
     */
    200: SuccessResult;
};

export type ProductsRemoveImagePostResponse = ProductsRemoveImagePostResponses[keyof ProductsRemoveImagePostResponses];

export type ProductsStrainsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/products/strains';
};

export type ProductsStrainsGetErrors = {
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type ProductsStrainsGetResponses = {
    /**
     * Success
     */
    200: Array<StrainDetail>;
};

export type ProductsStrainsGetResponse = ProductsStrainsGetResponses[keyof ProductsStrainsGetResponses];

export type ProductsExternalCategoriesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * User ID for traceability system access context (highly recommended) - Optional but prevents system failures
         */
        userId?: number;
    };
    url: '/products/external-categories';
};

export type ProductsExternalCategoriesGetErrors = {
    /**
     * Bad Request - String error message (parse response body as plain text)
     */
    400: BadRequestResponse;
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type ProductsExternalCategoriesGetError = ProductsExternalCategoriesGetErrors[keyof ProductsExternalCategoriesGetErrors];

export type ProductsExternalCategoriesGetResponses = {
    /**
     * Success
     */
    200: Array<string>;
};

export type ProductsExternalCategoriesGetResponse = ProductsExternalCategoriesGetResponses[keyof ProductsExternalCategoriesGetResponses];

export type ProductCategoryGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/product-category';
};

export type ProductCategoryGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type ProductCategoryGetResponses = {
    /**
     * Success - Returns array of product category objects: `[{ ProductCategory }, ...]`
     */
    200: Array<ProductCategory>;
};

export type ProductCategoryGetResponse = ProductCategoryGetResponses[keyof ProductCategoryGetResponses];

export type PurchaseOrderGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Start date filter for purchase orders created after this date (optional).
         */
        FromDateCreated?: string;
        /**
         * End date filter for purchase orders created before this date (optional).
         */
        ToDateCreated?: string;
        /**
         * Specific purchase order identifier for single order retrieval (optional).
         */
        PurchaseOrderId?: number;
        /**
         * Whether to include detailed line item information in the response (default: false).
         */
        IncludeItemDetails?: boolean;
        /**
         * Page number for pagination control (default: 0).
         */
        PageNumber?: number;
        /**
         * Number of results per page for pagination (default: 1000).
         */
        PageSize?: number;
    };
    url: '/purchase-order';
};

export type PurchaseOrderGetErrors = {
    /**
     * Bad Request - `ValidationResult` object with `isValid` boolean, `errors` array, and `ruleSetsExecuted` array
     */
    400: BadRequestResponse;
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type PurchaseOrderGetError = PurchaseOrderGetErrors[keyof PurchaseOrderGetErrors];

export type PurchaseOrderGetResponses = {
    /**
     * Success
     */
    200: Array<PurchaseOrderData>;
};

export type PurchaseOrderGetResponse = PurchaseOrderGetResponses[keyof PurchaseOrderGetResponses];

export type PurchaseOrderPostData = {
    /**
     * Purchase order creation/update request with order details - CreateUpdatePurchaseOrdersRequest object
     */
    body?: CreateUpdatePurchaseOrdersRequest;
    path?: never;
    query?: never;
    url: '/purchase-order';
};

export type PurchaseOrderPostErrors = {
    /**
     * Bad Request - `ValidationResult` object with `isValid` boolean, `errors` array, and `ruleSetsExecuted` array
     */
    400: BadRequestResponse;
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type PurchaseOrderPostError = PurchaseOrderPostErrors[keyof PurchaseOrderPostErrors];

export type PurchaseOrderPostResponses = {
    /**
     * Success
     */
    200: CreateUpdatePurchaseOrderResponse;
};

export type PurchaseOrderPostResponse = PurchaseOrderPostResponses[keyof PurchaseOrderPostResponses];

export type ReferenceUnitsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/reference/units';
};

export type ReferenceUnitsGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type ReferenceUnitsGetResponses = {
    /**
     * Success - Returns array of unit objects: `[{ Unit }, ...]`
     */
    200: Array<Unit>;
};

export type ReferenceUnitsGetResponse = ReferenceUnitsGetResponses[keyof ReferenceUnitsGetResponses];

export type ReferenceUnitTypesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/reference/unit-types';
};

export type ReferenceUnitTypesGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type ReferenceUnitTypesGetResponses = {
    /**
     * Success - Returns array of unit type objects: `[{ UnitType }, ...]`
     */
    200: Array<UnitType>;
};

export type ReferenceUnitTypesGetResponse = ReferenceUnitTypesGetResponses[keyof ReferenceUnitTypesGetResponses];

export type ReferenceLabResultUnitsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/reference/lab-result-units';
};

export type ReferenceLabResultUnitsGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type ReferenceLabResultUnitsGetResponses = {
    /**
     * Success - Returns array of lab result unit objects: `[{ LabResultUnitData }, ...]`
     */
    200: Array<LabResultUnitData>;
};

export type ReferenceLabResultUnitsGetResponse = ReferenceLabResultUnitsGetResponses[keyof ReferenceLabResultUnitsGetResponses];

export type ReferenceLabResultsNamesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/reference/lab-results-names';
};

export type ReferenceLabResultsNamesGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type ReferenceLabResultsNamesGetResponses = {
    /**
     * Success - Returns array of strings with lab result names: `["string", ...]`
     */
    200: Array<string>;
};

export type ReferenceLabResultsNamesGetResponse = ReferenceLabResultsNamesGetResponses[keyof ReferenceLabResultsNamesGetResponses];

export type RegulatoryCategoryGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/regulatory-category';
};

export type RegulatoryCategoryGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type RegulatoryCategoryGetResponses = {
    /**
     * Success - Returns array of regulatory category objects: `[{ RegulatoryCategory }, ...]`
     */
    200: Array<RegulatoryCategory>;
};

export type RegulatoryCategoryGetResponse = RegulatoryCategoryGetResponses[keyof RegulatoryCategoryGetResponses];

export type ReportingInventoryGetData = {
    body?: never;
    path?: never;
    query?: {
        includeLabResults?: boolean;
        includeRoomQuantities?: boolean;
        includeAllocated?: boolean;
        includeLineage?: boolean;
    };
    url: '/reporting/inventory';
};

export type ReportingInventoryGetErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type ReportingInventoryGetResponses = {
    /**
     * OK
     */
    200: Array<ReportingInventoryItem>;
};

export type ReportingInventoryGetResponse = ReportingInventoryGetResponses[keyof ReportingInventoryGetResponses];

export type ReportingTransactionsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Specific transaction identifier for single transaction lookup.
         */
        TransactionId?: number;
        /**
         * Start date for filtering transactions by last modified date (UTC) for incremental sync.
         */
        FromLastModifiedDateUTC?: string;
        /**
         * End date for filtering transactions by last modified date (UTC) for incremental sync.
         */
        ToLastModifiedDateUTC?: string;
        /**
         * Start date for filtering transactions by transaction date (UTC) for periodic reports.
         */
        FromDateUTC?: string;
        /**
         * End date for filtering transactions by transaction date (UTC) for periodic reports.
         */
        ToDateUTC?: string;
        /**
         * Flag to include detailed transaction item information for comprehensive reporting.
         */
        IncludeDetail?: boolean;
        /**
         * Flag to include tax information for financial compliance reporting.
         */
        IncludeTaxes?: boolean;
        /**
         * Flag to include order identifiers for order fulfillment tracking.
         */
        IncludeOrderIds?: boolean;
        /**
         * Flag to include fees and donations for complete financial analysis.
         */
        IncludeFeesAndDonations?: boolean;
    };
    url: '/reporting/transactions';
};

export type ReportingTransactionsGetErrors = {
    /**
     * Bad Request - `ValidationResult` object with `isValid` boolean, `errors` array, and `ruleSetsExecuted` array
     */
    400: ValidationResult;
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
    /**
     * Temporarily disabled (kill switch).
     */
    503: unknown;
};

export type ReportingTransactionsGetError = ReportingTransactionsGetErrors[keyof ReportingTransactionsGetErrors];

export type ReportingTransactionsGetResponses = {
    /**
     * Success
     */
    200: Array<Transaction>;
};

export type ReportingTransactionsGetResponse = ReportingTransactionsGetResponses[keyof ReportingTransactionsGetResponses];

export type ReportingCustomersGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter customers modified after this UTC date - Used for incremental sync
         */
        fromLastModifiedDateUTC?: string;
        /**
         * Filter customers modified before this UTC date - Used for date range filtering
         */
        toLastModifiedDateUTC?: string;
        /**
         * Include anonymous customers in results - Default: true
         */
        includeAnonymous?: boolean;
    };
    url: '/reporting/customers';
};

export type ReportingCustomersGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for reporting access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type ReportingCustomersGetResponses = {
    /**
     * Success - Returns array of customer objects
     */
    200: Array<Customer>;
};

export type ReportingCustomersGetResponse = ReportingCustomersGetResponses[keyof ReportingCustomersGetResponses];

export type ReportingCustomersPaginatedGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter customers modified after this UTC date for incremental sync - Optional
         */
        fromLastModifiedDateUTC?: string;
        /**
         * Filter customers modified before this UTC date for date range filtering - Optional
         */
        toLastModifiedDateUTC?: string;
        /**
         * Page number for sequential pagination (integer, starts at 0) - Default: 0
         */
        PageNumber?: number;
        /**
         * Number of items per page (integer) - Default: 1000, Maximum: 10000
         */
        PageSize?: number;
        /**
         * Include anonymous customers in results - Default: true
         */
        includeAnonymous?: boolean;
    };
    url: '/reporting/customers-paginated';
};

export type ReportingCustomersPaginatedGetErrors = {
    /**
     * Bad Request - `BadRequestResponse` object with `message` string field (check `propertyErrors`: null for simple message, array for field-specific errors)
     */
    400: BadRequestResponse;
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for reporting access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type ReportingCustomersPaginatedGetError = ReportingCustomersPaginatedGetErrors[keyof ReportingCustomersPaginatedGetErrors];

export type ReportingCustomersPaginatedGetResponses = {
    /**
     * Success - Returns array of customer objects for the requested page
     */
    200: Array<Customer>;
};

export type ReportingCustomersPaginatedGetResponse = ReportingCustomersPaginatedGetResponses[keyof ReportingCustomersPaginatedGetResponses];

export type ReportingRegisterAdjustmentsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter adjustments modified after this date for incremental sync - Optional
         */
        fromLastModifiedDateUTC?: string;
        /**
         * Filter adjustments modified before this date for date range filtering - Optional
         */
        toLastModifiedDateUTC?: string;
    };
    url: '/reporting/register-adjustments';
};

export type ReportingRegisterAdjustmentsGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for reporting access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type ReportingRegisterAdjustmentsGetResponses = {
    /**
     * Success - Returns array of register adjustment objects
     */
    200: Array<RegisterAdjustment>;
};

export type ReportingRegisterAdjustmentsGetResponse = ReportingRegisterAdjustmentsGetResponses[keyof ReportingRegisterAdjustmentsGetResponses];

export type ReportingRegisterTransactionsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter transactions modified after this date for incremental sync - Optional
         */
        fromLastModifiedDateUTC?: string;
        /**
         * Filter transactions modified before this date for date range filtering - Optional
         */
        toLastModifiedDateUTC?: string;
    };
    url: '/reporting/register-transactions';
};

export type ReportingRegisterTransactionsGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for reporting access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type ReportingRegisterTransactionsGetResponses = {
    /**
     * Success - Returns array of RegisterTransaction objects with comprehensive transaction data
     */
    200: Array<RegisterTransaction>;
};

export type ReportingRegisterTransactionsGetResponse = ReportingRegisterTransactionsGetResponses[keyof ReportingRegisterTransactionsGetResponses];

export type ReportingCashSummaryGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter activity after this date (must be within last 7 days) - Optional
         */
        fromLastModifiedDateUTC?: string;
        /**
         * Filter activity before this date for date range filtering - Optional
         */
        toLastModifiedDateUTC?: string;
    };
    url: '/reporting/cash-summary';
};

export type ReportingCashSummaryGetErrors = {
    /**
     * Bad Request - String error message (parse response body as plain text)
     */
    400: string;
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for reporting access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type ReportingCashSummaryGetError = ReportingCashSummaryGetErrors[keyof ReportingCashSummaryGetErrors];

export type ReportingCashSummaryGetResponses = {
    /**
     * Success - Returns array of register cash summary objects
     */
    200: Array<RegisterCashSummary>;
};

export type ReportingCashSummaryGetResponse = ReportingCashSummaryGetResponses[keyof ReportingCashSummaryGetResponses];

export type ReportingLoyaltySnapshotGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/reporting/loyalty-snapshot';
};

export type ReportingLoyaltySnapshotGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for reporting access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type ReportingLoyaltySnapshotGetResponses = {
    /**
     * Success - Returns array of loyalty balance snapshot objects
     */
    200: Array<LoyaltySnapshot>;
};

export type ReportingLoyaltySnapshotGetResponse = ReportingLoyaltySnapshotGetResponses[keyof ReportingLoyaltySnapshotGetResponses];

export type ReportingProductsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter products modified after this date for incremental sync - Optional
         */
        fromLastModifiedDateUTC?: string;
    };
    url: '/reporting/products';
};

export type ReportingProductsGetErrors = {
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type ReportingProductsGetResponses = {
    /**
     * Success
     */
    200: Array<ProductDetail>;
};

export type ReportingProductsGetResponse = ReportingProductsGetResponses[keyof ReportingProductsGetResponses];

export type ReportingClosingReportGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Start date for the report period (required) - Must be UTC datetime
         */
        fromDateUTC?: string;
        /**
         * End date for the report period (required) - Must be UTC datetime
         */
        toDateUTC?: string;
    };
    url: '/reporting/closing-report';
};

export type ReportingClosingReportGetErrors = {
    /**
     * Bad Request - String error message (parse response body as plain text)
     */
    400: string;
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for reporting access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type ReportingClosingReportGetError = ReportingClosingReportGetErrors[keyof ReportingClosingReportGetErrors];

export type ReportingClosingReportGetResponses = {
    /**
     * Success - Returns comprehensive closing report object
     */
    200: ClosingReportV2;
};

export type ReportingClosingReportGetResponse = ReportingClosingReportGetResponses[keyof ReportingClosingReportGetResponses];

export type ReportingDiscountsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Include deleted/archived discounts in results - Default: false
         */
        includeDeleted?: boolean;
    };
    url: '/reporting/discounts';
};

export type ReportingDiscountsGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for reporting access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type ReportingDiscountsGetResponses = {
    /**
     * Success - Returns array of comprehensive discount configuration objects
     */
    200: Array<ReportingDiscountDetail>;
};

export type ReportingDiscountsGetResponse = ReportingDiscountsGetResponses[keyof ReportingDiscountsGetResponses];

export type RoomRoomsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Optional room ID for specific room lookup - integer
         */
        roomId?: number;
        /**
         * Optional room name for searching rooms by name - string
         */
        roomName?: string;
    };
    url: '/room/rooms';
};

export type RoomRoomsGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for room access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type RoomRoomsGetResponses = {
    /**
     * Success - Returns array of room objects: `[{ Room }, ...]`
     */
    200: Array<Room>;
};

export type RoomRoomsGetResponse = RoomRoomsGetResponses[keyof RoomRoomsGetResponses];

export type RoomPostData = {
    /**
     * Room information to create or update - Room object with RoomId, RoomName, and room type flags
     */
    body?: Room;
    path?: never;
    query?: never;
    url: '/room';
};

export type RoomPostErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for room modification
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type RoomPostResponses = {
    /**
     * Success - Returns single room object: `{ Room }`
     */
    200: Room;
};

export type RoomPostResponse = RoomPostResponses[keyof RoomPostResponses];

export type SizesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/sizes';
};

export type SizesGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type SizesGetResponses = {
    /**
     * Success - Returns array of size objects: `[{ Size }, ...]`
     */
    200: Array<Size>;
};

export type SizesGetResponse = SizesGetResponses[keyof SizesGetResponses];

export type StrainsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/strains';
};

export type StrainsGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for inventory access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type StrainsGetResponses = {
    /**
     * Success - Returns array of strain objects: `[{ StrainDetail }, ...]`
     */
    200: Array<StrainDetail>;
};

export type StrainsGetResponse = StrainsGetResponses[keyof StrainsGetResponses];

export type StrainsPostData = {
    body?: UpdateStrain;
    path?: never;
    query?: never;
    url: '/strains';
};

export type StrainsPostErrors = {
    /**
     * Bad Request
     */
    400: string;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type StrainsPostError = StrainsPostErrors[keyof StrainsPostErrors];

export type StrainsPostResponses = {
    /**
     * OK
     */
    200: StrainDetail;
};

export type StrainsPostResponse = StrainsPostResponses[keyof StrainsPostResponses];

export type StrainsTypesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/strains/types';
};

export type StrainsTypesGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for inventory access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type StrainsTypesGetResponses = {
    /**
     * Success - Returns array of strings with strain type names: `["Indica", "Sativa", "Hybrid", "CBD"]`
     */
    200: Array<string>;
};

export type StrainsTypesGetResponse = StrainsTypesGetResponses[keyof StrainsTypesGetResponses];

export type TableTablesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Optional table ID for specific table lookup - integer
         */
        tableId?: number;
        /**
         * Optional table name for searching tables by name - string
         */
        tableName?: string;
    };
    url: '/table/tables';
};

export type TableTablesGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for table access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type TableTablesGetResponses = {
    /**
     * Success - Returns array of table objects: `[{ Table }, ...]`
     */
    200: Array<Table>;
};

export type TableTablesGetResponse = TableTablesGetResponses[keyof TableTablesGetResponses];

export type TablePostData = {
    /**
     * Table information to create or update - Table object with TableId and TableName fields
     */
    body?: Table;
    path?: never;
    query?: never;
    url: '/table';
};

export type TablePostErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for table modification
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type TablePostResponses = {
    /**
     * Success - Returns single table object: `{ Table }`
     */
    200: Table;
};

export type TablePostResponse = TablePostResponses[keyof TablePostResponses];

export type TagGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/tag';
};

export type TagGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for inventory access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type TagGetResponses = {
    /**
     * Success - Returns array of tag objects: `[{ Tag }, ...]`
     */
    200: Array<Tag>;
};

export type TagGetResponse = TagGetResponses[keyof TagGetResponses];

export type TerminalsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/terminals';
};

export type TerminalsGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type TerminalsGetResponses = {
    /**
     * Success - Returns array of terminal objects: `[{ Terminal }, ...]`
     */
    200: Array<Terminal>;
};

export type TerminalsGetResponse = TerminalsGetResponses[keyof TerminalsGetResponses];

export type TransactionCreateAnonymousPostData = {
    /**
     * Anonymous transaction request with optional transaction reference - CreateAnonymousTransactionRequest object
     */
    body?: CreateAnonymousTransactionRequest;
    path?: never;
    query?: never;
    url: '/transaction/create-anonymous';
};

export type TransactionCreateAnonymousPostErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for transaction creation
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred during transaction creation
     */
    500: unknown;
};

export type TransactionCreateAnonymousPostResponses = {
    /**
     * Success - Returns anonymous transaction object: `{ AnonymousTransaction }`
     */
    200: AnonymousTransaction;
};

export type TransactionCreateAnonymousPostResponse = TransactionCreateAnonymousPostResponses[keyof TransactionCreateAnonymousPostResponses];

export type UtilAuthorizationHeaderByApiKeyGetData = {
    body?: never;
    path: {
        /**
         * API key to convert into authorization header format - string
         */
        apiKey: string;
    };
    query?: never;
    url: '/util/AuthorizationHeader/{apiKey}';
};

export type UtilAuthorizationHeaderByApiKeyGetResponses = {
    /**
     * Success - Returns formatted authorization header string: "Basic {base64-encoded-key}"
     */
    200: string;
};

export type UtilAuthorizationHeaderByApiKeyGetResponse = UtilAuthorizationHeaderByApiKeyGetResponses[keyof UtilAuthorizationHeaderByApiKeyGetResponses];

export type VehiclesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/vehicles';
};

export type VehiclesGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for vehicle access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type VehiclesGetResponses = {
    /**
     * Success - Returns array of vehicle objects: `[{ VehicleDetail }, ...]`
     */
    200: Array<VehicleDetail>;
};

export type VehiclesGetResponse = VehiclesGetResponses[keyof VehiclesGetResponses];

export type VehiclesPostData = {
    /**
     * Vehicle information to create or update - VehicleDetail object with fleet details
     */
    body?: VehicleDetail;
    path?: never;
    query?: never;
    url: '/vehicles';
};

export type VehiclesPostErrors = {
    /**
     * Bad Request - `ValidationResult` object with `isValid` boolean, `errors` array, and `ruleSetsExecuted` array
     */
    400: ValidationResult;
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type VehiclesPostError = VehiclesPostErrors[keyof VehiclesPostErrors];

export type VehiclesPostResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type VendorVendorsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Optional vendor ID to filter by specific vendor - Returns exact match
         */
        vendorId?: number;
        /**
         * Optional vendor name to filter by - Supports partial matching for flexible search
         */
        vendorName?: string;
    };
    url: '/vendor/vendors';
};

export type VendorVendorsGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for vendor access
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type VendorVendorsGetResponses = {
    /**
     * Success - Returns array of vendor objects: `[{ Vendor }, ...]`
     */
    200: Array<Vendor>;
};

export type VendorVendorsGetResponse = VendorVendorsGetResponses[keyof VendorVendorsGetResponses];

export type VendorPostData = {
    /**
     * Vendor information to create or update - Vendor object with supplier details
     */
    body?: Vendor;
    path?: never;
    query?: never;
    url: '/vendor';
};

export type VendorPostErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - Account not authorized for vendor management
     */
    403: unknown;
    /**
     * Internal Server Error - Server error occurred during vendor operation
     */
    500: unknown;
};

export type VendorPostResponses = {
    /**
     * Success - Returns vendor object: `{ Vendor }`
     */
    200: Vendor;
};

export type VendorPostResponse = VendorPostResponses[keyof VendorPostResponses];

export type WasteGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/waste';
};

export type WasteGetErrors = {
    /**
     * Invalid API Key
     */
    401: unknown;
    /**
     * Account not authorized
     */
    403: unknown;
    /**
     * Something went wrong.
     */
    500: unknown;
};

export type WasteGetResponses = {
    /**
     * Success
     */
    200: WasteSummary;
};

export type WasteGetResponse = WasteGetResponses[keyof WasteGetResponses];

export type WasteHarvestWastePostData = {
    body?: HarvestWasteDetailWaste;
    path?: never;
    query?: never;
    url: '/waste/HarvestWaste';
};

export type WasteHarvestWastePostErrors = {
    /**
     * Bad Request
     */
    400: string;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type WasteHarvestWastePostError = WasteHarvestWastePostErrors[keyof WasteHarvestWastePostErrors];

export type WasteHarvestWastePostResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type WasteHarvestWastePostResponse = WasteHarvestWastePostResponses[keyof WasteHarvestWastePostResponses];

export type WastePlantWastePostData = {
    body?: PlantWasteDetailWaste;
    path?: never;
    query?: never;
    url: '/waste/PlantWaste';
};

export type WastePlantWastePostErrors = {
    /**
     * Bad Request
     */
    400: string;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type WastePlantWastePostError = WastePlantWastePostErrors[keyof WastePlantWastePostErrors];

export type WastePlantWastePostResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type WastePlantWastePostResponse = WastePlantWastePostResponses[keyof WastePlantWastePostResponses];

export type WhoamiGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/whoami';
};

export type WhoamiGetErrors = {
    /**
     * Unauthorized - Invalid or missing API key
     */
    401: unknown;
    /**
     * Forbidden - API key doesn't have access to this location
     */
    403: unknown;
    /**
     * Not Found - Location not found for the authenticated API key
     */
    404: unknown;
    /**
     * Internal Server Error - Server error occurred
     */
    500: unknown;
};

export type WhoamiGetResponses = {
    /**
     * Success - Returns location identity object: `{ LocationIdentity }`
     */
    200: LocationIdentity;
};

export type WhoamiGetResponse = WhoamiGetResponses[keyof WhoamiGetResponses];
