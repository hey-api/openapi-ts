// This file is auto-generated by @hey-api/openapi-ts

import * as v from 'valibot';

/**
 * This is Bar schema.
 */
export const vBar: v.GenericSchema = v.object({
    foo: v.optional(v.lazy(() => {
        return vFoo;
    }))
});

/**
 * This is Foo schema.
 */
export const vFoo: v.GenericSchema = v.optional(v.union([
    v.object({
        foo: v.optional(v.pipe(v.string(), v.regex(/^\\d{3}-\\d{2}-\\d{4}$/))),
        bar: v.optional(vBar),
        baz: v.optional(v.array(v.lazy(() => {
            return vFoo;
        }))),
        qux: v.optional(v.pipe(v.number(), v.integer(), v.gtValue(0)), 0)
    }),
    v.null()
]), null);

export const vBaz = v.optional(v.pipe(v.pipe(v.string(), v.regex(/foo\\nbar/)), v.readonly()), 'baz');

export const vQux = v.record(v.string(), v.object({
    qux: v.optional(v.string())
}));

/**
 * This is Foo parameter.
 */
export const vFoo2 = v.string();

export const vFoo3 = v.object({
    foo: v.optional(vBar)
});

export const vPatchFooData = v.object({
    body: v.object({
        foo: v.optional(v.string())
    }),
    path: v.optional(v.never()),
    query: v.optional(v.object({
        foo: v.optional(v.string()),
        bar: v.optional(vBar),
        baz: v.optional(v.object({
            baz: v.optional(v.string())
        })),
        qux: v.optional(v.pipe(v.string(), v.isoDate())),
        quux: v.optional(v.pipe(v.string(), v.isoTimestamp()))
    }))
});

export const vPostFooData = v.object({
    body: vFoo3,
    path: v.optional(v.never()),
    query: v.optional(v.never())
});
