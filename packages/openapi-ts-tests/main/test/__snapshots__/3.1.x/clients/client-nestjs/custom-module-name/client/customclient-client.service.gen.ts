// This file is auto-generated by @hey-api/openapi-ts

import { Injectable, Inject } from '@nestjs/common';

import axios from 'axios';

import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, RawAxiosRequestHeaders } from 'axios';

import type { ClientModuleConfig, RequestOptions } from './types.gen';

@Injectable()
export class CustomClientClient {
    private axiosInstance: AxiosInstance;
    constructor(
    @Inject('CUSTOM_CLIENT_CLIENT_CONFIG')
    private readonly config: ClientModuleConfig) {
        const axiosConfig = {
            baseURL: config.baseUrl,
            headers: config.headers,
            timeout: 5000,
            ...config.axiosConfig
        };
        this.axiosInstance = axios.create(axiosConfig);
    }
    public request<T = true>(options: RequestOptions): Promise<AxiosResponse<T>> {
        const config: AxiosRequestConfig = {
            method: options.method,
            url: options.url,
            headers: options.headers as RawAxiosRequestHeaders,
            params: options.query,
            data: options.body,
            timeout: options.timeout
        };
        return this.axiosInstance(config);
    }
    public get<T = true>(url: string, options: Omit<RequestOptions, 'method' | 'url'>): Promise<AxiosResponse<T>> {
        return this.request<T>({
            method: 'GET',
            url: url,
            ...options
        });
    }
    public post<T = true>(url: string, data: any, options: Omit<RequestOptions, 'method' | 'url' | 'body'>): Promise<AxiosResponse<T>> {
        return this.request<T>({
            method: 'POST',
            url: url,
            body: data,
            ...options
        });
    }
    public put<T = true>(url: string, data: any, options: Omit<RequestOptions, 'method' | 'url' | 'body'>): Promise<AxiosResponse<T>> {
        return this.request<T>({
            method: 'PUT',
            url: url,
            body: data,
            ...options
        });
    }
    public patch<T = true>(url: string, data: any, options: Omit<RequestOptions, 'method' | 'url' | 'body'>): Promise<AxiosResponse<T>> {
        return this.request<T>({
            method: 'PATCH',
            url: url,
            body: data,
            ...options
        });
    }
    public delete<T = true>(url: string, options: Omit<RequestOptions, 'method' | 'url'>): Promise<AxiosResponse<T>> {
        return this.request<T>({
            method: 'DELETE',
            url: url,
            ...options
        });
    }
    public head<T = true>(url: string, options: Omit<RequestOptions, 'method' | 'url'>): Promise<AxiosResponse<T>> {
        return this.request<T>({
            method: 'HEAD',
            url: url,
            ...options
        });
    }
    public options<T = true>(url: string, options: Omit<RequestOptions, 'method' | 'url'>): Promise<AxiosResponse<T>> {
        return this.request<T>({
            method: 'OPTIONS',
            url: url,
            ...options
        });
    }
}

export const CUSTOM_CLIENT_CLIENT_CONFIG = 'CUSTOM_CLIENT_CLIENT_CONFIG';