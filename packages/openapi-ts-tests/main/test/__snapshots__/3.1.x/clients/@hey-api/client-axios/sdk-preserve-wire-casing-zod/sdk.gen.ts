// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type Client, type TDataShape, formDataBodySerializer, urlSearchParamsBodySerializer } from './client';
import type { ExportData, PatchApiVbyApiVersionNoTagData, PatchApiVbyApiVersionNoTagResponses, ImportData, ImportResponses, FooWowData, FooWowResponses, ApiVVersionODataControllerCountData, ApiVVersionODataControllerCountResponses, GetApiVbyApiVersionSimpleOperationData, GetApiVbyApiVersionSimpleOperationResponses, GetApiVbyApiVersionSimpleOperationErrors, DeleteCallWithoutParametersAndResponseData, GetCallWithoutParametersAndResponseData, HeadCallWithoutParametersAndResponseData, OptionsCallWithoutParametersAndResponseData, PatchCallWithoutParametersAndResponseData, PostCallWithoutParametersAndResponseData, PutCallWithoutParametersAndResponseData, DeleteFooData3 as DeleteFooData, CallWithDescriptionsData, DeprecatedCallData, CallWithParametersData, CallWithWeirdParameterNamesData, GetCallWithOptionalParamData, PostCallWithOptionalParamData, PostCallWithOptionalParamResponses, PostApiVbyApiVersionRequestBodyData, PostApiVbyApiVersionFormDataData, CallWithDefaultParametersData, CallWithDefaultOptionalParametersData, CallToTestOrderOfParamsData, DuplicateNameData, DuplicateName2Data, DuplicateName3Data, DuplicateName4Data, CallWithNoContentResponseData, CallWithNoContentResponseResponses, CallWithResponseAndNoContentResponseData, CallWithResponseAndNoContentResponseResponses, DummyAData, DummyAResponses, DummyBData, DummyBResponses, CallWithResponseData, CallWithResponseResponses, CallWithDuplicateResponsesData, CallWithDuplicateResponsesResponses, CallWithDuplicateResponsesErrors, CallWithResponsesData, CallWithResponsesResponses, CallWithResponsesErrors, CollectionFormatData, TypesData, TypesResponses, UploadFileData, UploadFileResponses, FileResponseData, FileResponseResponses, ComplexTypesData, ComplexTypesResponses, ComplexTypesErrors, MultipartResponseData, MultipartResponseResponses, MultipartRequestData, ComplexParamsData, ComplexParamsResponses, CallWithResultFromHeaderData, CallWithResultFromHeaderResponses, CallWithResultFromHeaderErrors, TestErrorCodeData, TestErrorCodeResponses, TestErrorCodeErrors, NonAsciiæøåÆøÅöôêÊ字符串Data, NonAsciiæøåÆøÅöôêÊ字符串Responses, PutWithFormUrlEncodedData } from './types.gen';
import { exportRequestKeyMapper, patchApiVbyApiVersionNoTagRequestKeyMapper, importRequestKeyMapper, fooWowRequestKeyMapper, apiVVersionODataControllerCountRequestKeyMapper, getApiVbyApiVersionSimpleOperationRequestKeyMapper, deleteCallWithoutParametersAndResponseRequestKeyMapper, getCallWithoutParametersAndResponseRequestKeyMapper, headCallWithoutParametersAndResponseRequestKeyMapper, optionsCallWithoutParametersAndResponseRequestKeyMapper, patchCallWithoutParametersAndResponseRequestKeyMapper, postCallWithoutParametersAndResponseRequestKeyMapper, putCallWithoutParametersAndResponseRequestKeyMapper, deleteFooRequestKeyMapper, callWithDescriptionsRequestKeyMapper, deprecatedCallRequestKeyMapper, callWithParametersRequestKeyMapper, callWithWeirdParameterNamesRequestKeyMapper, getCallWithOptionalParamRequestKeyMapper, postCallWithOptionalParamRequestKeyMapper, postApiVbyApiVersionRequestBodyRequestKeyMapper, postApiVbyApiVersionFormDataRequestKeyMapper, callWithDefaultParametersRequestKeyMapper, callWithDefaultOptionalParametersRequestKeyMapper, callToTestOrderOfParamsRequestKeyMapper, duplicateNameRequestKeyMapper, duplicateName2RequestKeyMapper, duplicateName3RequestKeyMapper, duplicateName4RequestKeyMapper, callWithNoContentResponseRequestKeyMapper, callWithResponseAndNoContentResponseRequestKeyMapper, dummyARequestKeyMapper, dummyBRequestKeyMapper, callWithResponseRequestKeyMapper, callWithDuplicateResponsesRequestKeyMapper, callWithResponsesRequestKeyMapper, collectionFormatRequestKeyMapper, typesRequestKeyMapper, uploadFileRequestKeyMapper, fileResponseRequestKeyMapper, complexTypesRequestKeyMapper, multipartResponseRequestKeyMapper, multipartRequestRequestKeyMapper, complexParamsRequestKeyMapper, callWithResultFromHeaderRequestKeyMapper, testErrorCodeRequestKeyMapper, nonAsciiæøåÆøÅöôêÊ字符串RequestKeyMapper, putWithFormUrlEncodedRequestKeyMapper } from './sdkRequestMappers.gen';
import { zExportData, zPatchApiVbyApiVersionNoTagData, zImportData, zImportResponse, zFooWowData, zApiVVersionODataControllerCountData, zApiVVersionODataControllerCountResponse, zGetApiVbyApiVersionSimpleOperationData, zGetApiVbyApiVersionSimpleOperationResponse, zDeleteCallWithoutParametersAndResponseData, zGetCallWithoutParametersAndResponseData, zHeadCallWithoutParametersAndResponseData, zOptionsCallWithoutParametersAndResponseData, zPatchCallWithoutParametersAndResponseData, zPostCallWithoutParametersAndResponseData, zPutCallWithoutParametersAndResponseData, zDeleteFooData3 as zDeleteFooData, zCallWithDescriptionsData, zDeprecatedCallData, zCallWithParametersData, zCallWithWeirdParameterNamesData, zGetCallWithOptionalParamData, zPostCallWithOptionalParamData, zPostCallWithOptionalParamResponse, zPostApiVbyApiVersionRequestBodyData, zPostApiVbyApiVersionFormDataData, zCallWithDefaultParametersData, zCallWithDefaultOptionalParametersData, zCallToTestOrderOfParamsData, zDuplicateNameData, zDuplicateName2Data, zDuplicateName3Data, zDuplicateName4Data, zCallWithNoContentResponseData, zCallWithNoContentResponseResponse, zCallWithResponseAndNoContentResponseData, zCallWithResponseAndNoContentResponseResponse, zDummyAData, zDummyAResponse, zDummyBData, zDummyBResponse, zCallWithResponseData, zCallWithResponseResponse, zCallWithDuplicateResponsesData, zCallWithDuplicateResponsesResponse, zCallWithResponsesData, zCallWithResponsesResponse, zCollectionFormatData, zTypesData, zTypesResponse, zUploadFileData, zUploadFileResponse, zFileResponseData, zFileResponseResponse, zComplexTypesData, zComplexTypesResponse, zMultipartResponseData, zMultipartResponseResponse, zMultipartRequestData, zComplexParamsData, zComplexParamsResponse, zCallWithResultFromHeaderData, zTestErrorCodeData, zNonAsciiæøåÆøÅöôêÊ字符串Data, zNonAsciiæøåÆøÅöôêÊ字符串Response, zPutWithFormUrlEncodedData } from './zod.gen';
import { client } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const export_ = <ThrowOnError extends boolean = false>(options?: Options<ExportData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        requestKeyMapper: exportRequestKeyMapper,
        requestValidator: async (data) => {
            return await zExportData.parseAsync(data);
        },
        url: '/api/v{api-version}/no+tag',
        ...options
    });
};

export const patchApiVbyApiVersionNoTag = <ThrowOnError extends boolean = false>(options?: Options<PatchApiVbyApiVersionNoTagData, ThrowOnError>) => {
    return (options?.client ?? client).patch<PatchApiVbyApiVersionNoTagResponses, unknown, ThrowOnError>({
        requestKeyMapper: patchApiVbyApiVersionNoTagRequestKeyMapper,
        requestValidator: async (data) => {
            return await zPatchApiVbyApiVersionNoTagData.parseAsync(data);
        },
        url: '/api/v{api-version}/no+tag',
        ...options
    });
};

export const import_ = <ThrowOnError extends boolean = false>(options: Options<ImportData, ThrowOnError>) => {
    return (options.client ?? client).post<ImportResponses, unknown, ThrowOnError>({
        requestKeyMapper: importRequestKeyMapper,
        requestValidator: async (data) => {
            return await zImportData.parseAsync(data);
        },
        responseType: 'json',
        responseValidator: async (data) => {
            return await zImportResponse.parseAsync(data);
        },
        url: '/api/v{api-version}/no+tag',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const fooWow = <ThrowOnError extends boolean = false>(options?: Options<FooWowData, ThrowOnError>) => {
    return (options?.client ?? client).put<FooWowResponses, unknown, ThrowOnError>({
        requestKeyMapper: fooWowRequestKeyMapper,
        requestValidator: async (data) => {
            return await zFooWowData.parseAsync(data);
        },
        url: '/api/v{api-version}/no+tag',
        ...options
    });
};

export const apiVVersionODataControllerCount = <ThrowOnError extends boolean = false>(options?: Options<ApiVVersionODataControllerCountData, ThrowOnError>) => {
    return (options?.client ?? client).get<ApiVVersionODataControllerCountResponses, unknown, ThrowOnError>({
        requestKeyMapper: apiVVersionODataControllerCountRequestKeyMapper,
        requestValidator: async (data) => {
            return await zApiVVersionODataControllerCountData.parseAsync(data);
        },
        responseType: 'json',
        responseValidator: async (data) => {
            return await zApiVVersionODataControllerCountResponse.parseAsync(data);
        },
        url: '/api/v{api-version}/simple/$count',
        ...options
    });
};

export const getApiVbyApiVersionSimpleOperation = <ThrowOnError extends boolean = false>(options: Options<GetApiVbyApiVersionSimpleOperationData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiVbyApiVersionSimpleOperationResponses, GetApiVbyApiVersionSimpleOperationErrors, ThrowOnError>({
        requestKeyMapper: getApiVbyApiVersionSimpleOperationRequestKeyMapper,
        requestValidator: async (data) => {
            return await zGetApiVbyApiVersionSimpleOperationData.parseAsync(data);
        },
        responseType: 'json',
        responseValidator: async (data) => {
            return await zGetApiVbyApiVersionSimpleOperationResponse.parseAsync(data);
        },
        url: '/api/v{api-version}/simple:operation',
        ...options
    });
};

export const deleteCallWithoutParametersAndResponse = <ThrowOnError extends boolean = false>(options?: Options<DeleteCallWithoutParametersAndResponseData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        requestKeyMapper: deleteCallWithoutParametersAndResponseRequestKeyMapper,
        requestValidator: async (data) => {
            return await zDeleteCallWithoutParametersAndResponseData.parseAsync(data);
        },
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const getCallWithoutParametersAndResponse = <ThrowOnError extends boolean = false>(options?: Options<GetCallWithoutParametersAndResponseData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        requestKeyMapper: getCallWithoutParametersAndResponseRequestKeyMapper,
        requestValidator: async (data) => {
            return await zGetCallWithoutParametersAndResponseData.parseAsync(data);
        },
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const headCallWithoutParametersAndResponse = <ThrowOnError extends boolean = false>(options?: Options<HeadCallWithoutParametersAndResponseData, ThrowOnError>) => {
    return (options?.client ?? client).head<unknown, unknown, ThrowOnError>({
        requestKeyMapper: headCallWithoutParametersAndResponseRequestKeyMapper,
        requestValidator: async (data) => {
            return await zHeadCallWithoutParametersAndResponseData.parseAsync(data);
        },
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const optionsCallWithoutParametersAndResponse = <ThrowOnError extends boolean = false>(options?: Options<OptionsCallWithoutParametersAndResponseData, ThrowOnError>) => {
    return (options?.client ?? client).options<unknown, unknown, ThrowOnError>({
        requestKeyMapper: optionsCallWithoutParametersAndResponseRequestKeyMapper,
        requestValidator: async (data) => {
            return await zOptionsCallWithoutParametersAndResponseData.parseAsync(data);
        },
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const patchCallWithoutParametersAndResponse = <ThrowOnError extends boolean = false>(options?: Options<PatchCallWithoutParametersAndResponseData, ThrowOnError>) => {
    return (options?.client ?? client).patch<unknown, unknown, ThrowOnError>({
        requestKeyMapper: patchCallWithoutParametersAndResponseRequestKeyMapper,
        requestValidator: async (data) => {
            return await zPatchCallWithoutParametersAndResponseData.parseAsync(data);
        },
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const postCallWithoutParametersAndResponse = <ThrowOnError extends boolean = false>(options?: Options<PostCallWithoutParametersAndResponseData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        requestKeyMapper: postCallWithoutParametersAndResponseRequestKeyMapper,
        requestValidator: async (data) => {
            return await zPostCallWithoutParametersAndResponseData.parseAsync(data);
        },
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const putCallWithoutParametersAndResponse = <ThrowOnError extends boolean = false>(options?: Options<PutCallWithoutParametersAndResponseData, ThrowOnError>) => {
    return (options?.client ?? client).put<unknown, unknown, ThrowOnError>({
        requestKeyMapper: putCallWithoutParametersAndResponseRequestKeyMapper,
        requestValidator: async (data) => {
            return await zPutCallWithoutParametersAndResponseData.parseAsync(data);
        },
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const deleteFoo = <ThrowOnError extends boolean = false>(options: Options<DeleteFooData, ThrowOnError>) => {
    return (options.client ?? client).delete<unknown, unknown, ThrowOnError>({
        requestKeyMapper: deleteFooRequestKeyMapper,
        requestValidator: async (data) => {
            return await zDeleteFooData.parseAsync(data);
        },
        url: '/api/v{api-version}/foo/{foo_param}/bar/{BarParam}',
        ...options
    });
};

export const callWithDescriptions = <ThrowOnError extends boolean = false>(options?: Options<CallWithDescriptionsData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        requestKeyMapper: callWithDescriptionsRequestKeyMapper,
        requestValidator: async (data) => {
            return await zCallWithDescriptionsData.parseAsync(data);
        },
        url: '/api/v{api-version}/descriptions',
        ...options
    });
};

/**
 * @deprecated
 */
export const deprecatedCall = <ThrowOnError extends boolean = false>(options: Options<DeprecatedCallData, ThrowOnError>) => {
    return (options.client ?? client).post<unknown, unknown, ThrowOnError>({
        requestKeyMapper: deprecatedCallRequestKeyMapper,
        requestValidator: async (data) => {
            return await zDeprecatedCallData.parseAsync(data);
        },
        url: '/api/v{api-version}/parameters/deprecated',
        ...options
    });
};

export const callWithParameters = <ThrowOnError extends boolean = false>(options: Options<CallWithParametersData, ThrowOnError>) => {
    return (options.client ?? client).post<unknown, unknown, ThrowOnError>({
        requestKeyMapper: callWithParametersRequestKeyMapper,
        requestValidator: async (data) => {
            return await zCallWithParametersData.parseAsync(data);
        },
        url: '/api/v{api-version}/parameters/{parameterPath}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const callWithWeirdParameterNames = <ThrowOnError extends boolean = false>(options: Options<CallWithWeirdParameterNamesData, ThrowOnError>) => {
    return (options.client ?? client).post<unknown, unknown, ThrowOnError>({
        requestKeyMapper: callWithWeirdParameterNamesRequestKeyMapper,
        requestValidator: async (data) => {
            return await zCallWithWeirdParameterNamesData.parseAsync(data);
        },
        url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getCallWithOptionalParam = <ThrowOnError extends boolean = false>(options: Options<GetCallWithOptionalParamData, ThrowOnError>) => {
    return (options.client ?? client).get<unknown, unknown, ThrowOnError>({
        requestKeyMapper: getCallWithOptionalParamRequestKeyMapper,
        requestValidator: async (data) => {
            return await zGetCallWithOptionalParamData.parseAsync(data);
        },
        url: '/api/v{api-version}/parameters',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postCallWithOptionalParam = <ThrowOnError extends boolean = false>(options: Options<PostCallWithOptionalParamData, ThrowOnError>) => {
    return (options.client ?? client).post<PostCallWithOptionalParamResponses, unknown, ThrowOnError>({
        requestKeyMapper: postCallWithOptionalParamRequestKeyMapper,
        requestValidator: async (data) => {
            return await zPostCallWithOptionalParamData.parseAsync(data);
        },
        responseType: 'json',
        responseValidator: async (data) => {
            return await zPostCallWithOptionalParamResponse.parseAsync(data);
        },
        url: '/api/v{api-version}/parameters',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postApiVbyApiVersionRequestBody = <ThrowOnError extends boolean = false>(options?: Options<PostApiVbyApiVersionRequestBodyData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        requestKeyMapper: postApiVbyApiVersionRequestBodyRequestKeyMapper,
        requestValidator: async (data) => {
            return await zPostApiVbyApiVersionRequestBodyData.parseAsync(data);
        },
        url: '/api/v{api-version}/requestBody',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postApiVbyApiVersionFormData = <ThrowOnError extends boolean = false>(options?: Options<PostApiVbyApiVersionFormDataData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        requestKeyMapper: postApiVbyApiVersionFormDataRequestKeyMapper,
        requestValidator: async (data) => {
            return await zPostApiVbyApiVersionFormDataData.parseAsync(data);
        },
        url: '/api/v{api-version}/formData',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

export const callWithDefaultParameters = <ThrowOnError extends boolean = false>(options?: Options<CallWithDefaultParametersData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        requestKeyMapper: callWithDefaultParametersRequestKeyMapper,
        requestValidator: async (data) => {
            return await zCallWithDefaultParametersData.parseAsync(data);
        },
        url: '/api/v{api-version}/defaults',
        ...options
    });
};

export const callWithDefaultOptionalParameters = <ThrowOnError extends boolean = false>(options?: Options<CallWithDefaultOptionalParametersData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        requestKeyMapper: callWithDefaultOptionalParametersRequestKeyMapper,
        requestValidator: async (data) => {
            return await zCallWithDefaultOptionalParametersData.parseAsync(data);
        },
        url: '/api/v{api-version}/defaults',
        ...options
    });
};

export const callToTestOrderOfParams = <ThrowOnError extends boolean = false>(options: Options<CallToTestOrderOfParamsData, ThrowOnError>) => {
    return (options.client ?? client).put<unknown, unknown, ThrowOnError>({
        requestKeyMapper: callToTestOrderOfParamsRequestKeyMapper,
        requestValidator: async (data) => {
            return await zCallToTestOrderOfParamsData.parseAsync(data);
        },
        url: '/api/v{api-version}/defaults',
        ...options
    });
};

export const duplicateName = <ThrowOnError extends boolean = false>(options?: Options<DuplicateNameData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        requestKeyMapper: duplicateNameRequestKeyMapper,
        requestValidator: async (data) => {
            return await zDuplicateNameData.parseAsync(data);
        },
        url: '/api/v{api-version}/duplicate',
        ...options
    });
};

export const duplicateName2 = <ThrowOnError extends boolean = false>(options?: Options<DuplicateName2Data, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        requestKeyMapper: duplicateName2RequestKeyMapper,
        requestValidator: async (data) => {
            return await zDuplicateName2Data.parseAsync(data);
        },
        url: '/api/v{api-version}/duplicate',
        ...options
    });
};

export const duplicateName3 = <ThrowOnError extends boolean = false>(options?: Options<DuplicateName3Data, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        requestKeyMapper: duplicateName3RequestKeyMapper,
        requestValidator: async (data) => {
            return await zDuplicateName3Data.parseAsync(data);
        },
        url: '/api/v{api-version}/duplicate',
        ...options
    });
};

export const duplicateName4 = <ThrowOnError extends boolean = false>(options?: Options<DuplicateName4Data, ThrowOnError>) => {
    return (options?.client ?? client).put<unknown, unknown, ThrowOnError>({
        requestKeyMapper: duplicateName4RequestKeyMapper,
        requestValidator: async (data) => {
            return await zDuplicateName4Data.parseAsync(data);
        },
        url: '/api/v{api-version}/duplicate',
        ...options
    });
};

export const callWithNoContentResponse = <ThrowOnError extends boolean = false>(options?: Options<CallWithNoContentResponseData, ThrowOnError>) => {
    return (options?.client ?? client).get<CallWithNoContentResponseResponses, unknown, ThrowOnError>({
        requestKeyMapper: callWithNoContentResponseRequestKeyMapper,
        requestValidator: async (data) => {
            return await zCallWithNoContentResponseData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zCallWithNoContentResponseResponse.parseAsync(data);
        },
        url: '/api/v{api-version}/no-content',
        ...options
    });
};

export const callWithResponseAndNoContentResponse = <ThrowOnError extends boolean = false>(options?: Options<CallWithResponseAndNoContentResponseData, ThrowOnError>) => {
    return (options?.client ?? client).get<CallWithResponseAndNoContentResponseResponses, unknown, ThrowOnError>({
        requestKeyMapper: callWithResponseAndNoContentResponseRequestKeyMapper,
        requestValidator: async (data) => {
            return await zCallWithResponseAndNoContentResponseData.parseAsync(data);
        },
        responseType: 'json',
        responseValidator: async (data) => {
            return await zCallWithResponseAndNoContentResponseResponse.parseAsync(data);
        },
        url: '/api/v{api-version}/multiple-tags/response-and-no-content',
        ...options
    });
};

export const dummyA = <ThrowOnError extends boolean = false>(options?: Options<DummyAData, ThrowOnError>) => {
    return (options?.client ?? client).get<DummyAResponses, unknown, ThrowOnError>({
        requestKeyMapper: dummyARequestKeyMapper,
        requestValidator: async (data) => {
            return await zDummyAData.parseAsync(data);
        },
        responseType: 'json',
        responseValidator: async (data) => {
            return await zDummyAResponse.parseAsync(data);
        },
        url: '/api/v{api-version}/multiple-tags/a',
        ...options
    });
};

export const dummyB = <ThrowOnError extends boolean = false>(options?: Options<DummyBData, ThrowOnError>) => {
    return (options?.client ?? client).get<DummyBResponses, unknown, ThrowOnError>({
        requestKeyMapper: dummyBRequestKeyMapper,
        requestValidator: async (data) => {
            return await zDummyBData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zDummyBResponse.parseAsync(data);
        },
        url: '/api/v{api-version}/multiple-tags/b',
        ...options
    });
};

export const callWithResponse = <ThrowOnError extends boolean = false>(options?: Options<CallWithResponseData, ThrowOnError>) => {
    return (options?.client ?? client).get<CallWithResponseResponses, unknown, ThrowOnError>({
        requestKeyMapper: callWithResponseRequestKeyMapper,
        requestValidator: async (data) => {
            return await zCallWithResponseData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zCallWithResponseResponse.parseAsync(data);
        },
        url: '/api/v{api-version}/response',
        ...options
    });
};

export const callWithDuplicateResponses = <ThrowOnError extends boolean = false>(options?: Options<CallWithDuplicateResponsesData, ThrowOnError>) => {
    return (options?.client ?? client).post<CallWithDuplicateResponsesResponses, CallWithDuplicateResponsesErrors, ThrowOnError>({
        requestKeyMapper: callWithDuplicateResponsesRequestKeyMapper,
        requestValidator: async (data) => {
            return await zCallWithDuplicateResponsesData.parseAsync(data);
        },
        responseType: 'json',
        responseValidator: async (data) => {
            return await zCallWithDuplicateResponsesResponse.parseAsync(data);
        },
        url: '/api/v{api-version}/response',
        ...options
    });
};

export const callWithResponses = <ThrowOnError extends boolean = false>(options?: Options<CallWithResponsesData, ThrowOnError>) => {
    return (options?.client ?? client).put<CallWithResponsesResponses, CallWithResponsesErrors, ThrowOnError>({
        requestKeyMapper: callWithResponsesRequestKeyMapper,
        requestValidator: async (data) => {
            return await zCallWithResponsesData.parseAsync(data);
        },
        responseType: 'json',
        responseValidator: async (data) => {
            return await zCallWithResponsesResponse.parseAsync(data);
        },
        url: '/api/v{api-version}/response',
        ...options
    });
};

export const collectionFormat = <ThrowOnError extends boolean = false>(options: Options<CollectionFormatData, ThrowOnError>) => {
    return (options.client ?? client).get<unknown, unknown, ThrowOnError>({
        requestKeyMapper: collectionFormatRequestKeyMapper,
        requestValidator: async (data) => {
            return await zCollectionFormatData.parseAsync(data);
        },
        url: '/api/v{api-version}/collectionFormat',
        ...options
    });
};

export const types = <ThrowOnError extends boolean = false>(options: Options<TypesData, ThrowOnError>) => {
    return (options.client ?? client).get<TypesResponses, unknown, ThrowOnError>({
        requestKeyMapper: typesRequestKeyMapper,
        requestValidator: async (data) => {
            return await zTypesData.parseAsync(data);
        },
        responseType: 'json',
        responseValidator: async (data) => {
            return await zTypesResponse.parseAsync(data);
        },
        url: '/api/v{api-version}/types',
        ...options
    });
};

export const uploadFile = <ThrowOnError extends boolean = false>(options: Options<UploadFileData, ThrowOnError>) => {
    return (options.client ?? client).post<UploadFileResponses, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        requestKeyMapper: uploadFileRequestKeyMapper,
        requestValidator: async (data) => {
            return await zUploadFileData.parseAsync(data);
        },
        responseType: 'json',
        responseValidator: async (data) => {
            return await zUploadFileResponse.parseAsync(data);
        },
        url: '/api/v{api-version}/upload',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

export const fileResponse = <ThrowOnError extends boolean = false>(options: Options<FileResponseData, ThrowOnError>) => {
    return (options.client ?? client).get<FileResponseResponses, unknown, ThrowOnError>({
        requestKeyMapper: fileResponseRequestKeyMapper,
        requestValidator: async (data) => {
            return await zFileResponseData.parseAsync(data);
        },
        responseType: 'blob',
        responseValidator: async (data) => {
            return await zFileResponseResponse.parseAsync(data);
        },
        url: '/api/v{api-version}/file/{id}',
        ...options
    });
};

export const complexTypes = <ThrowOnError extends boolean = false>(options: Options<ComplexTypesData, ThrowOnError>) => {
    return (options.client ?? client).get<ComplexTypesResponses, ComplexTypesErrors, ThrowOnError>({
        requestKeyMapper: complexTypesRequestKeyMapper,
        requestValidator: async (data) => {
            return await zComplexTypesData.parseAsync(data);
        },
        responseType: 'json',
        responseValidator: async (data) => {
            return await zComplexTypesResponse.parseAsync(data);
        },
        url: '/api/v{api-version}/complex',
        ...options
    });
};

export const multipartResponse = <ThrowOnError extends boolean = false>(options?: Options<MultipartResponseData, ThrowOnError>) => {
    return (options?.client ?? client).get<MultipartResponseResponses, unknown, ThrowOnError>({
        requestKeyMapper: multipartResponseRequestKeyMapper,
        requestValidator: async (data) => {
            return await zMultipartResponseData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zMultipartResponseResponse.parseAsync(data);
        },
        url: '/api/v{api-version}/multipart',
        ...options
    });
};

export const multipartRequest = <ThrowOnError extends boolean = false>(options?: Options<MultipartRequestData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        requestKeyMapper: multipartRequestRequestKeyMapper,
        requestValidator: async (data) => {
            return await zMultipartRequestData.parseAsync(data);
        },
        url: '/api/v{api-version}/multipart',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

export const complexParams = <ThrowOnError extends boolean = false>(options: Options<ComplexParamsData, ThrowOnError>) => {
    return (options.client ?? client).put<ComplexParamsResponses, unknown, ThrowOnError>({
        requestKeyMapper: complexParamsRequestKeyMapper,
        requestValidator: async (data) => {
            return await zComplexParamsData.parseAsync(data);
        },
        responseType: 'json',
        responseValidator: async (data) => {
            return await zComplexParamsResponse.parseAsync(data);
        },
        url: '/api/v{api-version}/complex/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options.headers
        }
    });
};

export const callWithResultFromHeader = <ThrowOnError extends boolean = false>(options?: Options<CallWithResultFromHeaderData, ThrowOnError>) => {
    return (options?.client ?? client).post<CallWithResultFromHeaderResponses, CallWithResultFromHeaderErrors, ThrowOnError>({
        requestKeyMapper: callWithResultFromHeaderRequestKeyMapper,
        requestValidator: async (data) => {
            return await zCallWithResultFromHeaderData.parseAsync(data);
        },
        url: '/api/v{api-version}/header',
        ...options
    });
};

export const testErrorCode = <ThrowOnError extends boolean = false>(options: Options<TestErrorCodeData, ThrowOnError>) => {
    return (options.client ?? client).post<TestErrorCodeResponses, TestErrorCodeErrors, ThrowOnError>({
        requestKeyMapper: testErrorCodeRequestKeyMapper,
        requestValidator: async (data) => {
            return await zTestErrorCodeData.parseAsync(data);
        },
        url: '/api/v{api-version}/error',
        ...options
    });
};

export const nonAsciiæøåÆøÅöôêÊ字符串 = <ThrowOnError extends boolean = false>(options: Options<NonAsciiæøåÆøÅöôêÊ字符串Data, ThrowOnError>) => {
    return (options.client ?? client).post<NonAsciiæøåÆøÅöôêÊ字符串Responses, unknown, ThrowOnError>({
        requestKeyMapper: nonAsciiæøåÆøÅöôêÊ字符串RequestKeyMapper,
        requestValidator: async (data) => {
            return await zNonAsciiæøåÆøÅöôêÊ字符串Data.parseAsync(data);
        },
        responseType: 'json',
        responseValidator: async (data) => {
            return await zNonAsciiæøåÆøÅöôêÊ字符串Response.parseAsync(data);
        },
        url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
        ...options
    });
};

/**
 * Login User
 */
export const putWithFormUrlEncoded = <ThrowOnError extends boolean = false>(options: Options<PutWithFormUrlEncodedData, ThrowOnError>) => {
    return (options.client ?? client).put<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        requestKeyMapper: putWithFormUrlEncodedRequestKeyMapper,
        requestValidator: async (data) => {
            return await zPutWithFormUrlEncodedData.parseAsync(data);
        },
        url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};
