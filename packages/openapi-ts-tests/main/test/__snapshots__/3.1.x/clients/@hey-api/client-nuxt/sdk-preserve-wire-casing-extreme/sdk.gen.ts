// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type Composable, type Client, type TDataShape, formDataBodySerializer, urlSearchParamsBodySerializer } from './client';
import type { ExportData, PatchApiVbyApiVersionNoTagData, ImportResponse, ImportData, FooWowData, ApiVVersionODataControllerCountResponse, ApiVVersionODataControllerCountData, GetApiVbyApiVersionSimpleOperationResponse, GetApiVbyApiVersionSimpleOperationData, GetApiVbyApiVersionSimpleOperationError, DeleteCallWithoutParametersAndResponseData, GetCallWithoutParametersAndResponseData, HeadCallWithoutParametersAndResponseData, OptionsCallWithoutParametersAndResponseData, PatchCallWithoutParametersAndResponseData, PostCallWithoutParametersAndResponseData, PutCallWithoutParametersAndResponseData, DeleteFooData3 as DeleteFooData, CallWithDescriptionsData, DeprecatedCallData, CallWithParametersData, CallWithWeirdParameterNamesData, GetCallWithOptionalParamData, PostCallWithOptionalParamResponse, PostCallWithOptionalParamData, PostApiVbyApiVersionRequestBodyData, PostApiVbyApiVersionFormDataData, CallWithDefaultParametersData, CallWithDefaultOptionalParametersData, CallToTestOrderOfParamsData, DuplicateNameData, DuplicateName2Data, DuplicateName3Data, DuplicateName4Data, CallWithNoContentResponseResponse, CallWithNoContentResponseData, CallWithResponseAndNoContentResponseResponse, CallWithResponseAndNoContentResponseData, DummyAResponse, DummyAData, DummyBResponse, DummyBData, CallWithResponseResponse, CallWithResponseData, CallWithDuplicateResponsesResponse, CallWithDuplicateResponsesData, CallWithDuplicateResponsesError, CallWithResponsesResponse, CallWithResponsesData, CallWithResponsesError, CollectionFormatData, TypesResponse, TypesData, UploadFileResponse, UploadFileData, FileResponseResponse, FileResponseData, ComplexTypesResponse, ComplexTypesData, MultipartResponseResponse, MultipartResponseData, MultipartRequestData, ComplexParamsResponse, ComplexParamsData, CallWithResultFromHeaderData, TestErrorCodeData, NonAsciiæøåÆøÅöôêÊ字符串Response, NonAsciiæøåÆøÅöôêÊ字符串Data, PutWithFormUrlEncodedData } from './types.gen';
import { exportRequestKeyMapper, patchApiVbyApiVersionNoTagRequestKeyMapper, importRequestKeyMapper, fooWowRequestKeyMapper, apiVVersionODataControllerCountRequestKeyMapper, getApiVbyApiVersionSimpleOperationRequestKeyMapper, deleteCallWithoutParametersAndResponseRequestKeyMapper, getCallWithoutParametersAndResponseRequestKeyMapper, headCallWithoutParametersAndResponseRequestKeyMapper, optionsCallWithoutParametersAndResponseRequestKeyMapper, patchCallWithoutParametersAndResponseRequestKeyMapper, postCallWithoutParametersAndResponseRequestKeyMapper, putCallWithoutParametersAndResponseRequestKeyMapper, deleteFooRequestKeyMapper, callWithDescriptionsRequestKeyMapper, deprecatedCallRequestKeyMapper, callWithParametersRequestKeyMapper, callWithWeirdParameterNamesRequestKeyMapper, getCallWithOptionalParamRequestKeyMapper, postCallWithOptionalParamRequestKeyMapper, postApiVbyApiVersionRequestBodyRequestKeyMapper, postApiVbyApiVersionFormDataRequestKeyMapper, callWithDefaultParametersRequestKeyMapper, callWithDefaultOptionalParametersRequestKeyMapper, callToTestOrderOfParamsRequestKeyMapper, duplicateNameRequestKeyMapper, duplicateName2RequestKeyMapper, duplicateName3RequestKeyMapper, duplicateName4RequestKeyMapper, callWithNoContentResponseRequestKeyMapper, callWithResponseAndNoContentResponseRequestKeyMapper, dummyARequestKeyMapper, dummyBRequestKeyMapper, callWithResponseRequestKeyMapper, callWithDuplicateResponsesRequestKeyMapper, callWithResponsesRequestKeyMapper, collectionFormatRequestKeyMapper, typesRequestKeyMapper, uploadFileRequestKeyMapper, fileResponseRequestKeyMapper, complexTypesRequestKeyMapper, multipartResponseRequestKeyMapper, multipartRequestRequestKeyMapper, complexParamsRequestKeyMapper, callWithResultFromHeaderRequestKeyMapper, testErrorCodeRequestKeyMapper, nonAsciiæøåÆøÅöôêÊ字符串RequestKeyMapper, putWithFormUrlEncodedRequestKeyMapper } from './sdkRequestMappers.gen';
import { client } from './client.gen';

export type Options<TComposable extends Composable = '$fetch', TData extends TDataShape = TDataShape, ResT = unknown, DefaultT = undefined> = ClientOptions<TComposable, TData, ResT, DefaultT> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const export_ = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, ExportData, unknown, DefaultT>) => {
    return (options.client ?? client).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
        requestKeyMapper: exportRequestKeyMapper,
        url: '/api/v{api-version}/no+tag',
        ...options
    });
};

export const patchApiVbyApiVersionNoTag = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, PatchApiVbyApiVersionNoTagData, unknown, DefaultT>) => {
    return (options.client ?? client).patch<TComposable, unknown | DefaultT, unknown, DefaultT>({
        requestKeyMapper: patchApiVbyApiVersionNoTagRequestKeyMapper,
        url: '/api/v{api-version}/no+tag',
        ...options
    });
};

export const import_ = <TComposable extends Composable = '$fetch', DefaultT extends ImportResponse = ImportResponse>(options: Options<TComposable, ImportData, ImportResponse, DefaultT>) => {
    return (options.client ?? client).post<TComposable, ImportResponse | DefaultT, unknown, DefaultT>({
        requestKeyMapper: importRequestKeyMapper,
        url: '/api/v{api-version}/no+tag',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const fooWow = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, FooWowData, unknown, DefaultT>) => {
    return (options.client ?? client).put<TComposable, unknown | DefaultT, unknown, DefaultT>({
        requestKeyMapper: fooWowRequestKeyMapper,
        url: '/api/v{api-version}/no+tag',
        ...options
    });
};

export const apiVVersionODataControllerCount = <TComposable extends Composable = '$fetch', DefaultT extends ApiVVersionODataControllerCountResponse = ApiVVersionODataControllerCountResponse>(options: Options<TComposable, ApiVVersionODataControllerCountData, ApiVVersionODataControllerCountResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, ApiVVersionODataControllerCountResponse | DefaultT, unknown, DefaultT>({
        requestKeyMapper: apiVVersionODataControllerCountRequestKeyMapper,
        url: '/api/v{api-version}/simple/$count',
        ...options
    });
};

export const getApiVbyApiVersionSimpleOperation = <TComposable extends Composable = '$fetch', DefaultT extends GetApiVbyApiVersionSimpleOperationResponse = GetApiVbyApiVersionSimpleOperationResponse>(options: Options<TComposable, GetApiVbyApiVersionSimpleOperationData, GetApiVbyApiVersionSimpleOperationResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetApiVbyApiVersionSimpleOperationResponse | DefaultT, GetApiVbyApiVersionSimpleOperationError, DefaultT>({
        requestKeyMapper: getApiVbyApiVersionSimpleOperationRequestKeyMapper,
        url: '/api/v{api-version}/simple:operation',
        ...options
    });
};

export const deleteCallWithoutParametersAndResponse = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, DeleteCallWithoutParametersAndResponseData, unknown, DefaultT>) => {
    return (options.client ?? client).delete<TComposable, unknown | DefaultT, unknown, DefaultT>({
        requestKeyMapper: deleteCallWithoutParametersAndResponseRequestKeyMapper,
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const getCallWithoutParametersAndResponse = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, GetCallWithoutParametersAndResponseData, unknown, DefaultT>) => {
    return (options.client ?? client).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
        requestKeyMapper: getCallWithoutParametersAndResponseRequestKeyMapper,
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const headCallWithoutParametersAndResponse = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, HeadCallWithoutParametersAndResponseData, unknown, DefaultT>) => {
    return (options.client ?? client).head<TComposable, unknown | DefaultT, unknown, DefaultT>({
        requestKeyMapper: headCallWithoutParametersAndResponseRequestKeyMapper,
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const optionsCallWithoutParametersAndResponse = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, OptionsCallWithoutParametersAndResponseData, unknown, DefaultT>) => {
    return (options.client ?? client).options<TComposable, unknown | DefaultT, unknown, DefaultT>({
        requestKeyMapper: optionsCallWithoutParametersAndResponseRequestKeyMapper,
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const patchCallWithoutParametersAndResponse = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, PatchCallWithoutParametersAndResponseData, unknown, DefaultT>) => {
    return (options.client ?? client).patch<TComposable, unknown | DefaultT, unknown, DefaultT>({
        requestKeyMapper: patchCallWithoutParametersAndResponseRequestKeyMapper,
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const postCallWithoutParametersAndResponse = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, PostCallWithoutParametersAndResponseData, unknown, DefaultT>) => {
    return (options.client ?? client).post<TComposable, unknown | DefaultT, unknown, DefaultT>({
        requestKeyMapper: postCallWithoutParametersAndResponseRequestKeyMapper,
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const putCallWithoutParametersAndResponse = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, PutCallWithoutParametersAndResponseData, unknown, DefaultT>) => {
    return (options.client ?? client).put<TComposable, unknown | DefaultT, unknown, DefaultT>({
        requestKeyMapper: putCallWithoutParametersAndResponseRequestKeyMapper,
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const deleteFoo = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, DeleteFooData, unknown, DefaultT>) => {
    return (options.client ?? client).delete<TComposable, unknown | DefaultT, unknown, DefaultT>({
        requestKeyMapper: deleteFooRequestKeyMapper,
        url: '/api/v{api-version}/foo/{foo_param}/bar/{BarParam}',
        ...options
    });
};

export const callWithDescriptions = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, CallWithDescriptionsData, unknown, DefaultT>) => {
    return (options.client ?? client).post<TComposable, unknown | DefaultT, unknown, DefaultT>({
        requestKeyMapper: callWithDescriptionsRequestKeyMapper,
        url: '/api/v{api-version}/descriptions',
        ...options
    });
};

/**
 * @deprecated
 */
export const deprecatedCall = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, DeprecatedCallData, unknown, DefaultT>) => {
    return (options.client ?? client).post<TComposable, unknown | DefaultT, unknown, DefaultT>({
        requestKeyMapper: deprecatedCallRequestKeyMapper,
        url: '/api/v{api-version}/parameters/deprecated',
        ...options
    });
};

export const callWithParameters = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, CallWithParametersData, unknown, DefaultT>) => {
    return (options.client ?? client).post<TComposable, unknown | DefaultT, unknown, DefaultT>({
        requestKeyMapper: callWithParametersRequestKeyMapper,
        url: '/api/v{api-version}/parameters/{parameterPath}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const callWithWeirdParameterNames = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, CallWithWeirdParameterNamesData, unknown, DefaultT>) => {
    return (options.client ?? client).post<TComposable, unknown | DefaultT, unknown, DefaultT>({
        requestKeyMapper: callWithWeirdParameterNamesRequestKeyMapper,
        url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getCallWithOptionalParam = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, GetCallWithOptionalParamData, unknown, DefaultT>) => {
    return (options.client ?? client).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
        requestKeyMapper: getCallWithOptionalParamRequestKeyMapper,
        url: '/api/v{api-version}/parameters',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postCallWithOptionalParam = <TComposable extends Composable = '$fetch', DefaultT extends PostCallWithOptionalParamResponse = PostCallWithOptionalParamResponse>(options: Options<TComposable, PostCallWithOptionalParamData, PostCallWithOptionalParamResponse, DefaultT>) => {
    return (options.client ?? client).post<TComposable, PostCallWithOptionalParamResponse | DefaultT, unknown, DefaultT>({
        requestKeyMapper: postCallWithOptionalParamRequestKeyMapper,
        url: '/api/v{api-version}/parameters',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postApiVbyApiVersionRequestBody = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, PostApiVbyApiVersionRequestBodyData, unknown, DefaultT>) => {
    return (options.client ?? client).post<TComposable, unknown | DefaultT, unknown, DefaultT>({
        requestKeyMapper: postApiVbyApiVersionRequestBodyRequestKeyMapper,
        url: '/api/v{api-version}/requestBody',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postApiVbyApiVersionFormData = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, PostApiVbyApiVersionFormDataData, unknown, DefaultT>) => {
    return (options.client ?? client).post<TComposable, unknown | DefaultT, unknown, DefaultT>({
        ...formDataBodySerializer,
        requestKeyMapper: postApiVbyApiVersionFormDataRequestKeyMapper,
        url: '/api/v{api-version}/formData',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

export const callWithDefaultParameters = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, CallWithDefaultParametersData, unknown, DefaultT>) => {
    return (options.client ?? client).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
        requestKeyMapper: callWithDefaultParametersRequestKeyMapper,
        url: '/api/v{api-version}/defaults',
        ...options
    });
};

export const callWithDefaultOptionalParameters = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, CallWithDefaultOptionalParametersData, unknown, DefaultT>) => {
    return (options.client ?? client).post<TComposable, unknown | DefaultT, unknown, DefaultT>({
        requestKeyMapper: callWithDefaultOptionalParametersRequestKeyMapper,
        url: '/api/v{api-version}/defaults',
        ...options
    });
};

export const callToTestOrderOfParams = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, CallToTestOrderOfParamsData, unknown, DefaultT>) => {
    return (options.client ?? client).put<TComposable, unknown | DefaultT, unknown, DefaultT>({
        requestKeyMapper: callToTestOrderOfParamsRequestKeyMapper,
        url: '/api/v{api-version}/defaults',
        ...options
    });
};

export const duplicateName = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, DuplicateNameData, unknown, DefaultT>) => {
    return (options.client ?? client).delete<TComposable, unknown | DefaultT, unknown, DefaultT>({
        requestKeyMapper: duplicateNameRequestKeyMapper,
        url: '/api/v{api-version}/duplicate',
        ...options
    });
};

export const duplicateName2 = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, DuplicateName2Data, unknown, DefaultT>) => {
    return (options.client ?? client).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
        requestKeyMapper: duplicateName2RequestKeyMapper,
        url: '/api/v{api-version}/duplicate',
        ...options
    });
};

export const duplicateName3 = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, DuplicateName3Data, unknown, DefaultT>) => {
    return (options.client ?? client).post<TComposable, unknown | DefaultT, unknown, DefaultT>({
        requestKeyMapper: duplicateName3RequestKeyMapper,
        url: '/api/v{api-version}/duplicate',
        ...options
    });
};

export const duplicateName4 = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, DuplicateName4Data, unknown, DefaultT>) => {
    return (options.client ?? client).put<TComposable, unknown | DefaultT, unknown, DefaultT>({
        requestKeyMapper: duplicateName4RequestKeyMapper,
        url: '/api/v{api-version}/duplicate',
        ...options
    });
};

export const callWithNoContentResponse = <TComposable extends Composable = '$fetch', DefaultT extends CallWithNoContentResponseResponse = CallWithNoContentResponseResponse>(options: Options<TComposable, CallWithNoContentResponseData, CallWithNoContentResponseResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, CallWithNoContentResponseResponse | DefaultT, unknown, DefaultT>({
        requestKeyMapper: callWithNoContentResponseRequestKeyMapper,
        url: '/api/v{api-version}/no-content',
        ...options
    });
};

export const callWithResponseAndNoContentResponse = <TComposable extends Composable = '$fetch', DefaultT extends CallWithResponseAndNoContentResponseResponse = CallWithResponseAndNoContentResponseResponse>(options: Options<TComposable, CallWithResponseAndNoContentResponseData, CallWithResponseAndNoContentResponseResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, CallWithResponseAndNoContentResponseResponse | DefaultT, unknown, DefaultT>({
        requestKeyMapper: callWithResponseAndNoContentResponseRequestKeyMapper,
        url: '/api/v{api-version}/multiple-tags/response-and-no-content',
        ...options
    });
};

export const dummyA = <TComposable extends Composable = '$fetch', DefaultT extends DummyAResponse = DummyAResponse>(options: Options<TComposable, DummyAData, DummyAResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, DummyAResponse | DefaultT, unknown, DefaultT>({
        requestKeyMapper: dummyARequestKeyMapper,
        url: '/api/v{api-version}/multiple-tags/a',
        ...options
    });
};

export const dummyB = <TComposable extends Composable = '$fetch', DefaultT extends DummyBResponse = DummyBResponse>(options: Options<TComposable, DummyBData, DummyBResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, DummyBResponse | DefaultT, unknown, DefaultT>({
        requestKeyMapper: dummyBRequestKeyMapper,
        url: '/api/v{api-version}/multiple-tags/b',
        ...options
    });
};

export const callWithResponse = <TComposable extends Composable = '$fetch', DefaultT extends CallWithResponseResponse = CallWithResponseResponse>(options: Options<TComposable, CallWithResponseData, CallWithResponseResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, CallWithResponseResponse | DefaultT, unknown, DefaultT>({
        requestKeyMapper: callWithResponseRequestKeyMapper,
        url: '/api/v{api-version}/response',
        ...options
    });
};

export const callWithDuplicateResponses = <TComposable extends Composable = '$fetch', DefaultT extends CallWithDuplicateResponsesResponse = CallWithDuplicateResponsesResponse>(options: Options<TComposable, CallWithDuplicateResponsesData, CallWithDuplicateResponsesResponse, DefaultT>) => {
    return (options.client ?? client).post<TComposable, CallWithDuplicateResponsesResponse | DefaultT, CallWithDuplicateResponsesError, DefaultT>({
        requestKeyMapper: callWithDuplicateResponsesRequestKeyMapper,
        url: '/api/v{api-version}/response',
        ...options
    });
};

export const callWithResponses = <TComposable extends Composable = '$fetch', DefaultT extends CallWithResponsesResponse = CallWithResponsesResponse>(options: Options<TComposable, CallWithResponsesData, CallWithResponsesResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, CallWithResponsesResponse | DefaultT, CallWithResponsesError, DefaultT>({
        requestKeyMapper: callWithResponsesRequestKeyMapper,
        url: '/api/v{api-version}/response',
        ...options
    });
};

export const collectionFormat = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, CollectionFormatData, unknown, DefaultT>) => {
    return (options.client ?? client).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
        requestKeyMapper: collectionFormatRequestKeyMapper,
        url: '/api/v{api-version}/collectionFormat',
        ...options
    });
};

export const types = <TComposable extends Composable = '$fetch', DefaultT extends TypesResponse = TypesResponse>(options: Options<TComposable, TypesData, TypesResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, TypesResponse | DefaultT, unknown, DefaultT>({
        requestKeyMapper: typesRequestKeyMapper,
        url: '/api/v{api-version}/types',
        ...options
    });
};

export const uploadFile = <TComposable extends Composable = '$fetch', DefaultT extends UploadFileResponse = UploadFileResponse>(options: Options<TComposable, UploadFileData, UploadFileResponse, DefaultT>) => {
    return (options.client ?? client).post<TComposable, UploadFileResponse | DefaultT, unknown, DefaultT>({
        ...urlSearchParamsBodySerializer,
        requestKeyMapper: uploadFileRequestKeyMapper,
        url: '/api/v{api-version}/upload',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

export const fileResponse = <TComposable extends Composable = '$fetch', DefaultT extends FileResponseResponse = FileResponseResponse>(options: Options<TComposable, FileResponseData, FileResponseResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, FileResponseResponse | DefaultT, unknown, DefaultT>({
        requestKeyMapper: fileResponseRequestKeyMapper,
        url: '/api/v{api-version}/file/{id}',
        ...options
    });
};

export const complexTypes = <TComposable extends Composable = '$fetch', DefaultT extends ComplexTypesResponse = ComplexTypesResponse>(options: Options<TComposable, ComplexTypesData, ComplexTypesResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, ComplexTypesResponse | DefaultT, unknown, DefaultT>({
        requestKeyMapper: complexTypesRequestKeyMapper,
        url: '/api/v{api-version}/complex',
        ...options
    });
};

export const multipartResponse = <TComposable extends Composable = '$fetch', DefaultT extends MultipartResponseResponse = MultipartResponseResponse>(options: Options<TComposable, MultipartResponseData, MultipartResponseResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, MultipartResponseResponse | DefaultT, unknown, DefaultT>({
        requestKeyMapper: multipartResponseRequestKeyMapper,
        url: '/api/v{api-version}/multipart',
        ...options
    });
};

export const multipartRequest = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, MultipartRequestData, unknown, DefaultT>) => {
    return (options.client ?? client).post<TComposable, unknown | DefaultT, unknown, DefaultT>({
        ...formDataBodySerializer,
        requestKeyMapper: multipartRequestRequestKeyMapper,
        url: '/api/v{api-version}/multipart',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

export const complexParams = <TComposable extends Composable = '$fetch', DefaultT extends ComplexParamsResponse = ComplexParamsResponse>(options: Options<TComposable, ComplexParamsData, ComplexParamsResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, ComplexParamsResponse | DefaultT, unknown, DefaultT>({
        requestKeyMapper: complexParamsRequestKeyMapper,
        url: '/api/v{api-version}/complex/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options.headers
        }
    });
};

export const callWithResultFromHeader = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, CallWithResultFromHeaderData, unknown, DefaultT>) => {
    return (options.client ?? client).post<TComposable, unknown | DefaultT, unknown, DefaultT>({
        requestKeyMapper: callWithResultFromHeaderRequestKeyMapper,
        url: '/api/v{api-version}/header',
        ...options
    });
};

export const testErrorCode = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, TestErrorCodeData, unknown, DefaultT>) => {
    return (options.client ?? client).post<TComposable, unknown | DefaultT, unknown, DefaultT>({
        requestKeyMapper: testErrorCodeRequestKeyMapper,
        url: '/api/v{api-version}/error',
        ...options
    });
};

export const nonAsciiæøåÆøÅöôêÊ字符串 = <TComposable extends Composable = '$fetch', DefaultT extends NonAsciiæøåÆøÅöôêÊ字符串Response = NonAsciiæøåÆøÅöôêÊ字符串Response>(options: Options<TComposable, NonAsciiæøåÆøÅöôêÊ字符串Data, NonAsciiæøåÆøÅöôêÊ字符串Response, DefaultT>) => {
    return (options.client ?? client).post<TComposable, NonAsciiæøåÆøÅöôêÊ字符串Response | DefaultT, unknown, DefaultT>({
        requestKeyMapper: nonAsciiæøåÆøÅöôêÊ字符串RequestKeyMapper,
        url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
        ...options
    });
};

/**
 * Login User
 */
export const putWithFormUrlEncoded = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, PutWithFormUrlEncodedData, unknown, DefaultT>) => {
    return (options.client ?? client).put<TComposable, unknown | DefaultT, unknown, DefaultT>({
        ...urlSearchParamsBodySerializer,
        requestKeyMapper: putWithFormUrlEncodedRequestKeyMapper,
        url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};
