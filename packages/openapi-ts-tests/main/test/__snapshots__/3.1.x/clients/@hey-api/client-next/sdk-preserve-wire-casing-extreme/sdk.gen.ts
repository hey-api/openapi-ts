// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type Client, type TDataShape, formDataBodySerializer, urlSearchParamsBodySerializer } from './client';
import type { ExportData, PatchApiVbyApiVersionNoTagData, PatchApiVbyApiVersionNoTagResponses, ImportData, ImportResponses, FooWowData, FooWowResponses, ApiVVersionODataControllerCountData, ApiVVersionODataControllerCountResponses, GetApiVbyApiVersionSimpleOperationData, GetApiVbyApiVersionSimpleOperationResponses, GetApiVbyApiVersionSimpleOperationErrors, DeleteCallWithoutParametersAndResponseData, GetCallWithoutParametersAndResponseData, HeadCallWithoutParametersAndResponseData, OptionsCallWithoutParametersAndResponseData, PatchCallWithoutParametersAndResponseData, PostCallWithoutParametersAndResponseData, PutCallWithoutParametersAndResponseData, DeleteFooData3 as DeleteFooData, CallWithDescriptionsData, DeprecatedCallData, CallWithParametersData, CallWithWeirdParameterNamesData, GetCallWithOptionalParamData, PostCallWithOptionalParamData, PostCallWithOptionalParamResponses, PostApiVbyApiVersionRequestBodyData, PostApiVbyApiVersionFormDataData, CallWithDefaultParametersData, CallWithDefaultOptionalParametersData, CallToTestOrderOfParamsData, DuplicateNameData, DuplicateName2Data, DuplicateName3Data, DuplicateName4Data, CallWithNoContentResponseData, CallWithNoContentResponseResponses, CallWithResponseAndNoContentResponseData, CallWithResponseAndNoContentResponseResponses, DummyAData, DummyAResponses, DummyBData, DummyBResponses, CallWithResponseData, CallWithResponseResponses, CallWithDuplicateResponsesData, CallWithDuplicateResponsesResponses, CallWithDuplicateResponsesErrors, CallWithResponsesData, CallWithResponsesResponses, CallWithResponsesErrors, CollectionFormatData, TypesData, TypesResponses, UploadFileData, UploadFileResponses, FileResponseData, FileResponseResponses, ComplexTypesData, ComplexTypesResponses, ComplexTypesErrors, MultipartResponseData, MultipartResponseResponses, MultipartRequestData, ComplexParamsData, ComplexParamsResponses, CallWithResultFromHeaderData, CallWithResultFromHeaderResponses, CallWithResultFromHeaderErrors, TestErrorCodeData, TestErrorCodeResponses, TestErrorCodeErrors, NonAsciiæøåÆøÅöôêÊ字符串Data, NonAsciiæøåÆøÅöôêÊ字符串Responses, PutWithFormUrlEncodedData } from './types.gen';
import { exportRequestKeyMapper, patchApiVbyApiVersionNoTagRequestKeyMapper, importRequestKeyMapper, fooWowRequestKeyMapper, apiVVersionODataControllerCountRequestKeyMapper, getApiVbyApiVersionSimpleOperationRequestKeyMapper, deleteCallWithoutParametersAndResponseRequestKeyMapper, getCallWithoutParametersAndResponseRequestKeyMapper, headCallWithoutParametersAndResponseRequestKeyMapper, optionsCallWithoutParametersAndResponseRequestKeyMapper, patchCallWithoutParametersAndResponseRequestKeyMapper, postCallWithoutParametersAndResponseRequestKeyMapper, putCallWithoutParametersAndResponseRequestKeyMapper, deleteFooRequestKeyMapper, callWithDescriptionsRequestKeyMapper, deprecatedCallRequestKeyMapper, callWithParametersRequestKeyMapper, callWithWeirdParameterNamesRequestKeyMapper, getCallWithOptionalParamRequestKeyMapper, postCallWithOptionalParamRequestKeyMapper, postApiVbyApiVersionRequestBodyRequestKeyMapper, postApiVbyApiVersionFormDataRequestKeyMapper, callWithDefaultParametersRequestKeyMapper, callWithDefaultOptionalParametersRequestKeyMapper, callToTestOrderOfParamsRequestKeyMapper, duplicateNameRequestKeyMapper, duplicateName2RequestKeyMapper, duplicateName3RequestKeyMapper, duplicateName4RequestKeyMapper, callWithNoContentResponseRequestKeyMapper, callWithResponseAndNoContentResponseRequestKeyMapper, dummyARequestKeyMapper, dummyBRequestKeyMapper, callWithResponseRequestKeyMapper, callWithDuplicateResponsesRequestKeyMapper, callWithResponsesRequestKeyMapper, collectionFormatRequestKeyMapper, typesRequestKeyMapper, uploadFileRequestKeyMapper, fileResponseRequestKeyMapper, complexTypesRequestKeyMapper, multipartResponseRequestKeyMapper, multipartRequestRequestKeyMapper, complexParamsRequestKeyMapper, callWithResultFromHeaderRequestKeyMapper, testErrorCodeRequestKeyMapper, nonAsciiæøåÆøÅöôêÊ字符串RequestKeyMapper, putWithFormUrlEncodedRequestKeyMapper } from './sdkRequestMappers.gen';
import { client } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const export_ = <ThrowOnError extends boolean = false>(options?: Options<ExportData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        requestKeyMapper: exportRequestKeyMapper,
        url: '/api/v{api-version}/no+tag',
        ...options
    });
};

export const patchApiVbyApiVersionNoTag = <ThrowOnError extends boolean = false>(options?: Options<PatchApiVbyApiVersionNoTagData, ThrowOnError>) => {
    return (options?.client ?? client).patch<PatchApiVbyApiVersionNoTagResponses, unknown, ThrowOnError>({
        requestKeyMapper: patchApiVbyApiVersionNoTagRequestKeyMapper,
        url: '/api/v{api-version}/no+tag',
        ...options
    });
};

export const import_ = <ThrowOnError extends boolean = false>(options: Options<ImportData, ThrowOnError>) => {
    return (options.client ?? client).post<ImportResponses, unknown, ThrowOnError>({
        requestKeyMapper: importRequestKeyMapper,
        url: '/api/v{api-version}/no+tag',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const fooWow = <ThrowOnError extends boolean = false>(options?: Options<FooWowData, ThrowOnError>) => {
    return (options?.client ?? client).put<FooWowResponses, unknown, ThrowOnError>({
        requestKeyMapper: fooWowRequestKeyMapper,
        url: '/api/v{api-version}/no+tag',
        ...options
    });
};

export const apiVVersionODataControllerCount = <ThrowOnError extends boolean = false>(options?: Options<ApiVVersionODataControllerCountData, ThrowOnError>) => {
    return (options?.client ?? client).get<ApiVVersionODataControllerCountResponses, unknown, ThrowOnError>({
        requestKeyMapper: apiVVersionODataControllerCountRequestKeyMapper,
        url: '/api/v{api-version}/simple/$count',
        ...options
    });
};

export const getApiVbyApiVersionSimpleOperation = <ThrowOnError extends boolean = false>(options: Options<GetApiVbyApiVersionSimpleOperationData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiVbyApiVersionSimpleOperationResponses, GetApiVbyApiVersionSimpleOperationErrors, ThrowOnError>({
        requestKeyMapper: getApiVbyApiVersionSimpleOperationRequestKeyMapper,
        url: '/api/v{api-version}/simple:operation',
        ...options
    });
};

export const deleteCallWithoutParametersAndResponse = <ThrowOnError extends boolean = false>(options?: Options<DeleteCallWithoutParametersAndResponseData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        requestKeyMapper: deleteCallWithoutParametersAndResponseRequestKeyMapper,
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const getCallWithoutParametersAndResponse = <ThrowOnError extends boolean = false>(options?: Options<GetCallWithoutParametersAndResponseData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        requestKeyMapper: getCallWithoutParametersAndResponseRequestKeyMapper,
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const headCallWithoutParametersAndResponse = <ThrowOnError extends boolean = false>(options?: Options<HeadCallWithoutParametersAndResponseData, ThrowOnError>) => {
    return (options?.client ?? client).head<unknown, unknown, ThrowOnError>({
        requestKeyMapper: headCallWithoutParametersAndResponseRequestKeyMapper,
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const optionsCallWithoutParametersAndResponse = <ThrowOnError extends boolean = false>(options?: Options<OptionsCallWithoutParametersAndResponseData, ThrowOnError>) => {
    return (options?.client ?? client).options<unknown, unknown, ThrowOnError>({
        requestKeyMapper: optionsCallWithoutParametersAndResponseRequestKeyMapper,
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const patchCallWithoutParametersAndResponse = <ThrowOnError extends boolean = false>(options?: Options<PatchCallWithoutParametersAndResponseData, ThrowOnError>) => {
    return (options?.client ?? client).patch<unknown, unknown, ThrowOnError>({
        requestKeyMapper: patchCallWithoutParametersAndResponseRequestKeyMapper,
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const postCallWithoutParametersAndResponse = <ThrowOnError extends boolean = false>(options?: Options<PostCallWithoutParametersAndResponseData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        requestKeyMapper: postCallWithoutParametersAndResponseRequestKeyMapper,
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const putCallWithoutParametersAndResponse = <ThrowOnError extends boolean = false>(options?: Options<PutCallWithoutParametersAndResponseData, ThrowOnError>) => {
    return (options?.client ?? client).put<unknown, unknown, ThrowOnError>({
        requestKeyMapper: putCallWithoutParametersAndResponseRequestKeyMapper,
        url: '/api/v{api-version}/simple',
        ...options
    });
};

export const deleteFoo = <ThrowOnError extends boolean = false>(options: Options<DeleteFooData, ThrowOnError>) => {
    return (options.client ?? client).delete<unknown, unknown, ThrowOnError>({
        requestKeyMapper: deleteFooRequestKeyMapper,
        url: '/api/v{api-version}/foo/{foo_param}/bar/{BarParam}',
        ...options
    });
};

export const callWithDescriptions = <ThrowOnError extends boolean = false>(options?: Options<CallWithDescriptionsData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        requestKeyMapper: callWithDescriptionsRequestKeyMapper,
        url: '/api/v{api-version}/descriptions',
        ...options
    });
};

/**
 * @deprecated
 */
export const deprecatedCall = <ThrowOnError extends boolean = false>(options: Options<DeprecatedCallData, ThrowOnError>) => {
    return (options.client ?? client).post<unknown, unknown, ThrowOnError>({
        requestKeyMapper: deprecatedCallRequestKeyMapper,
        url: '/api/v{api-version}/parameters/deprecated',
        ...options
    });
};

export const callWithParameters = <ThrowOnError extends boolean = false>(options: Options<CallWithParametersData, ThrowOnError>) => {
    return (options.client ?? client).post<unknown, unknown, ThrowOnError>({
        requestKeyMapper: callWithParametersRequestKeyMapper,
        url: '/api/v{api-version}/parameters/{parameterPath}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const callWithWeirdParameterNames = <ThrowOnError extends boolean = false>(options: Options<CallWithWeirdParameterNamesData, ThrowOnError>) => {
    return (options.client ?? client).post<unknown, unknown, ThrowOnError>({
        requestKeyMapper: callWithWeirdParameterNamesRequestKeyMapper,
        url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getCallWithOptionalParam = <ThrowOnError extends boolean = false>(options: Options<GetCallWithOptionalParamData, ThrowOnError>) => {
    return (options.client ?? client).get<unknown, unknown, ThrowOnError>({
        requestKeyMapper: getCallWithOptionalParamRequestKeyMapper,
        url: '/api/v{api-version}/parameters',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postCallWithOptionalParam = <ThrowOnError extends boolean = false>(options: Options<PostCallWithOptionalParamData, ThrowOnError>) => {
    return (options.client ?? client).post<PostCallWithOptionalParamResponses, unknown, ThrowOnError>({
        requestKeyMapper: postCallWithOptionalParamRequestKeyMapper,
        url: '/api/v{api-version}/parameters',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postApiVbyApiVersionRequestBody = <ThrowOnError extends boolean = false>(options?: Options<PostApiVbyApiVersionRequestBodyData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        requestKeyMapper: postApiVbyApiVersionRequestBodyRequestKeyMapper,
        url: '/api/v{api-version}/requestBody',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postApiVbyApiVersionFormData = <ThrowOnError extends boolean = false>(options?: Options<PostApiVbyApiVersionFormDataData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        requestKeyMapper: postApiVbyApiVersionFormDataRequestKeyMapper,
        url: '/api/v{api-version}/formData',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

export const callWithDefaultParameters = <ThrowOnError extends boolean = false>(options?: Options<CallWithDefaultParametersData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        requestKeyMapper: callWithDefaultParametersRequestKeyMapper,
        url: '/api/v{api-version}/defaults',
        ...options
    });
};

export const callWithDefaultOptionalParameters = <ThrowOnError extends boolean = false>(options?: Options<CallWithDefaultOptionalParametersData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        requestKeyMapper: callWithDefaultOptionalParametersRequestKeyMapper,
        url: '/api/v{api-version}/defaults',
        ...options
    });
};

export const callToTestOrderOfParams = <ThrowOnError extends boolean = false>(options: Options<CallToTestOrderOfParamsData, ThrowOnError>) => {
    return (options.client ?? client).put<unknown, unknown, ThrowOnError>({
        requestKeyMapper: callToTestOrderOfParamsRequestKeyMapper,
        url: '/api/v{api-version}/defaults',
        ...options
    });
};

export const duplicateName = <ThrowOnError extends boolean = false>(options?: Options<DuplicateNameData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        requestKeyMapper: duplicateNameRequestKeyMapper,
        url: '/api/v{api-version}/duplicate',
        ...options
    });
};

export const duplicateName2 = <ThrowOnError extends boolean = false>(options?: Options<DuplicateName2Data, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        requestKeyMapper: duplicateName2RequestKeyMapper,
        url: '/api/v{api-version}/duplicate',
        ...options
    });
};

export const duplicateName3 = <ThrowOnError extends boolean = false>(options?: Options<DuplicateName3Data, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        requestKeyMapper: duplicateName3RequestKeyMapper,
        url: '/api/v{api-version}/duplicate',
        ...options
    });
};

export const duplicateName4 = <ThrowOnError extends boolean = false>(options?: Options<DuplicateName4Data, ThrowOnError>) => {
    return (options?.client ?? client).put<unknown, unknown, ThrowOnError>({
        requestKeyMapper: duplicateName4RequestKeyMapper,
        url: '/api/v{api-version}/duplicate',
        ...options
    });
};

export const callWithNoContentResponse = <ThrowOnError extends boolean = false>(options?: Options<CallWithNoContentResponseData, ThrowOnError>) => {
    return (options?.client ?? client).get<CallWithNoContentResponseResponses, unknown, ThrowOnError>({
        requestKeyMapper: callWithNoContentResponseRequestKeyMapper,
        url: '/api/v{api-version}/no-content',
        ...options
    });
};

export const callWithResponseAndNoContentResponse = <ThrowOnError extends boolean = false>(options?: Options<CallWithResponseAndNoContentResponseData, ThrowOnError>) => {
    return (options?.client ?? client).get<CallWithResponseAndNoContentResponseResponses, unknown, ThrowOnError>({
        requestKeyMapper: callWithResponseAndNoContentResponseRequestKeyMapper,
        url: '/api/v{api-version}/multiple-tags/response-and-no-content',
        ...options
    });
};

export const dummyA = <ThrowOnError extends boolean = false>(options?: Options<DummyAData, ThrowOnError>) => {
    return (options?.client ?? client).get<DummyAResponses, unknown, ThrowOnError>({
        requestKeyMapper: dummyARequestKeyMapper,
        url: '/api/v{api-version}/multiple-tags/a',
        ...options
    });
};

export const dummyB = <ThrowOnError extends boolean = false>(options?: Options<DummyBData, ThrowOnError>) => {
    return (options?.client ?? client).get<DummyBResponses, unknown, ThrowOnError>({
        requestKeyMapper: dummyBRequestKeyMapper,
        url: '/api/v{api-version}/multiple-tags/b',
        ...options
    });
};

export const callWithResponse = <ThrowOnError extends boolean = false>(options?: Options<CallWithResponseData, ThrowOnError>) => {
    return (options?.client ?? client).get<CallWithResponseResponses, unknown, ThrowOnError>({
        requestKeyMapper: callWithResponseRequestKeyMapper,
        url: '/api/v{api-version}/response',
        ...options
    });
};

export const callWithDuplicateResponses = <ThrowOnError extends boolean = false>(options?: Options<CallWithDuplicateResponsesData, ThrowOnError>) => {
    return (options?.client ?? client).post<CallWithDuplicateResponsesResponses, CallWithDuplicateResponsesErrors, ThrowOnError>({
        requestKeyMapper: callWithDuplicateResponsesRequestKeyMapper,
        url: '/api/v{api-version}/response',
        ...options
    });
};

export const callWithResponses = <ThrowOnError extends boolean = false>(options?: Options<CallWithResponsesData, ThrowOnError>) => {
    return (options?.client ?? client).put<CallWithResponsesResponses, CallWithResponsesErrors, ThrowOnError>({
        requestKeyMapper: callWithResponsesRequestKeyMapper,
        url: '/api/v{api-version}/response',
        ...options
    });
};

export const collectionFormat = <ThrowOnError extends boolean = false>(options: Options<CollectionFormatData, ThrowOnError>) => {
    return (options.client ?? client).get<unknown, unknown, ThrowOnError>({
        requestKeyMapper: collectionFormatRequestKeyMapper,
        url: '/api/v{api-version}/collectionFormat',
        ...options
    });
};

export const types = <ThrowOnError extends boolean = false>(options: Options<TypesData, ThrowOnError>) => {
    return (options.client ?? client).get<TypesResponses, unknown, ThrowOnError>({
        requestKeyMapper: typesRequestKeyMapper,
        url: '/api/v{api-version}/types',
        ...options
    });
};

export const uploadFile = <ThrowOnError extends boolean = false>(options: Options<UploadFileData, ThrowOnError>) => {
    return (options.client ?? client).post<UploadFileResponses, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        requestKeyMapper: uploadFileRequestKeyMapper,
        url: '/api/v{api-version}/upload',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

export const fileResponse = <ThrowOnError extends boolean = false>(options: Options<FileResponseData, ThrowOnError>) => {
    return (options.client ?? client).get<FileResponseResponses, unknown, ThrowOnError>({
        requestKeyMapper: fileResponseRequestKeyMapper,
        url: '/api/v{api-version}/file/{id}',
        ...options
    });
};

export const complexTypes = <ThrowOnError extends boolean = false>(options: Options<ComplexTypesData, ThrowOnError>) => {
    return (options.client ?? client).get<ComplexTypesResponses, ComplexTypesErrors, ThrowOnError>({
        requestKeyMapper: complexTypesRequestKeyMapper,
        url: '/api/v{api-version}/complex',
        ...options
    });
};

export const multipartResponse = <ThrowOnError extends boolean = false>(options?: Options<MultipartResponseData, ThrowOnError>) => {
    return (options?.client ?? client).get<MultipartResponseResponses, unknown, ThrowOnError>({
        requestKeyMapper: multipartResponseRequestKeyMapper,
        url: '/api/v{api-version}/multipart',
        ...options
    });
};

export const multipartRequest = <ThrowOnError extends boolean = false>(options?: Options<MultipartRequestData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        requestKeyMapper: multipartRequestRequestKeyMapper,
        url: '/api/v{api-version}/multipart',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

export const complexParams = <ThrowOnError extends boolean = false>(options: Options<ComplexParamsData, ThrowOnError>) => {
    return (options.client ?? client).put<ComplexParamsResponses, unknown, ThrowOnError>({
        requestKeyMapper: complexParamsRequestKeyMapper,
        url: '/api/v{api-version}/complex/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options.headers
        }
    });
};

export const callWithResultFromHeader = <ThrowOnError extends boolean = false>(options?: Options<CallWithResultFromHeaderData, ThrowOnError>) => {
    return (options?.client ?? client).post<CallWithResultFromHeaderResponses, CallWithResultFromHeaderErrors, ThrowOnError>({
        requestKeyMapper: callWithResultFromHeaderRequestKeyMapper,
        url: '/api/v{api-version}/header',
        ...options
    });
};

export const testErrorCode = <ThrowOnError extends boolean = false>(options: Options<TestErrorCodeData, ThrowOnError>) => {
    return (options.client ?? client).post<TestErrorCodeResponses, TestErrorCodeErrors, ThrowOnError>({
        requestKeyMapper: testErrorCodeRequestKeyMapper,
        url: '/api/v{api-version}/error',
        ...options
    });
};

export const nonAsciiæøåÆøÅöôêÊ字符串 = <ThrowOnError extends boolean = false>(options: Options<NonAsciiæøåÆøÅöôêÊ字符串Data, ThrowOnError>) => {
    return (options.client ?? client).post<NonAsciiæøåÆøÅöôêÊ字符串Responses, unknown, ThrowOnError>({
        requestKeyMapper: nonAsciiæøåÆøÅöôêÊ字符串RequestKeyMapper,
        url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
        ...options
    });
};

/**
 * Login User
 */
export const putWithFormUrlEncoded = <ThrowOnError extends boolean = false>(options: Options<PutWithFormUrlEncodedData, ThrowOnError>) => {
    return (options.client ?? client).put<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        requestKeyMapper: putWithFormUrlEncodedRequestKeyMapper,
        url: '/api/v{api-version}/non-ascii-æøåÆØÅöôêÊ字符串',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};
