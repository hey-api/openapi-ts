// This file is auto-generated by @hey-api/openapi-ts

export function exportRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function patchApiVbyApiVersionNoTagRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function importRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function fooWowRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function apiVVersionODataControllerCountRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function getApiVbyApiVersionSimpleOperationRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
    if (options.path) {
        if ('fooParam' in options.path) {
            options.path.foo_param = options.path.fooParam;
            delete options.path.fooParam;
        }
    }
}

export function deleteCallWithoutParametersAndResponseRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function getCallWithoutParametersAndResponseRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function headCallWithoutParametersAndResponseRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function optionsCallWithoutParametersAndResponseRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function patchCallWithoutParametersAndResponseRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function postCallWithoutParametersAndResponseRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function putCallWithoutParametersAndResponseRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function deleteFooRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
    if ("Headers" in options) {
        if (typeof options.Headers["xFooBar"] !== "undefined") {
            const _seedSetRet = options.headers.set("xFooBar", options.Headers["xFooBar"] as any);
            if (typeof _seedSetRet !== "undefined") {
                options.headers = _seedSetRet as any;
            }
            delete options.Headers["xFooBar"];
        }
    }
    const _val = options.headers.get("xFooBar");
    if (_val !== null) {
        const _setRet = options.headers.set("x-Foo-Bar", _val as any);
        if (typeof _setRet !== "undefined") {
            options.headers = _setRet as any;
        }
        if ("delete" in options.headers) {
            const _delRet = options.headers.delete("xFooBar");
            if (typeof _delRet !== "undefined") {
                options.headers = _delRet as any;
            }
        }
    }
    if (options.path) {
        if ('fooParam' in options.path) {
            options.path.foo_param = options.path.fooParam;
            delete options.path.fooParam;
        }
        if ('barParam' in options.path) {
            options.path.BarParam = options.path.barParam;
            delete options.path.barParam;
        }
    }
}

export function callWithDescriptionsRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function deprecatedCallRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function callWithParametersRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
    if (options.path) {
        if ('apiVersion' in options.path) {
            options.path['api-version'] = options.path.apiVersion;
            delete options.path.apiVersion;
        }
    }
    if (options.query) {
        if ('fooRefEnum' in options.query) {
            options.query.foo_ref_enum = options.query.fooRefEnum;
            delete options.query.fooRefEnum;
        }
        if ('fooAllOfEnum' in options.query) {
            options.query.foo_all_of_enum = options.query.fooAllOfEnum;
            delete options.query.fooAllOfEnum;
        }
    }
}

export function callWithWeirdParameterNamesRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
    if ("Headers" in options) {
        if (typeof options.Headers["parameterHeader"] !== "undefined") {
            const _seedSetRet = options.headers.set("parameterHeader", options.Headers["parameterHeader"] as any);
            if (typeof _seedSetRet !== "undefined") {
                options.headers = _seedSetRet as any;
            }
            delete options.Headers["parameterHeader"];
        }
    }
    const _val = options.headers.get("parameterHeader");
    if (_val !== null) {
        const _setRet = options.headers.set("parameter.header", _val as any);
        if (typeof _setRet !== "undefined") {
            options.headers = _setRet as any;
        }
        if ("delete" in options.headers) {
            const _delRet = options.headers.delete("parameterHeader");
            if (typeof _delRet !== "undefined") {
                options.headers = _delRet as any;
            }
        }
    }
    if (options.path) {
        if ('parameterPath1' in options.path) {
            options.path['parameter.path.1'] = options.path.parameterPath1;
            delete options.path.parameterPath1;
        }
        if ('parameterPath2' in options.path) {
            options.path['parameter-path-2'] = options.path.parameterPath2;
            delete options.path.parameterPath2;
        }
        if ('parameterPath3' in options.path) {
            options.path['PARAMETER-PATH-3'] = options.path.parameterPath3;
            delete options.path.parameterPath3;
        }
        if ('apiVersion' in options.path) {
            options.path['api-version'] = options.path.apiVersion;
            delete options.path.apiVersion;
        }
    }
    if (options.query) {
        if ('parameterQuery' in options.query) {
            options.query['parameter-query'] = options.query.parameterQuery;
            delete options.query.parameterQuery;
        }
    }
}

export function getCallWithOptionalParamRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function postCallWithOptionalParamRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function postApiVbyApiVersionRequestBodyRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function postApiVbyApiVersionFormDataRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function callWithDefaultParametersRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function callWithDefaultOptionalParametersRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function callToTestOrderOfParamsRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function duplicateNameRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function duplicateName2RequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function duplicateName3RequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function duplicateName4RequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function callWithNoContentResponseRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function callWithResponseAndNoContentResponseRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function dummyARequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function dummyBRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function callWithResponseRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function callWithDuplicateResponsesRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function callWithResponsesRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function collectionFormatRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
    if (options.query) {
        if ('parameterArrayCsv' in options.query) {
            options.query.parameterArrayCSV = options.query.parameterArrayCsv;
            delete options.query.parameterArrayCsv;
        }
        if ('parameterArraySsv' in options.query) {
            options.query.parameterArraySSV = options.query.parameterArraySsv;
            delete options.query.parameterArraySsv;
        }
        if ('parameterArrayTsv' in options.query) {
            options.query.parameterArrayTSV = options.query.parameterArrayTsv;
            delete options.query.parameterArrayTsv;
        }
    }
}

export function typesRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function uploadFileRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
    if (options.path) {
        if ('apiVersion' in options.path) {
            options.path['api-version'] = options.path.apiVersion;
            delete options.path.apiVersion;
        }
    }
}

export function fileResponseRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
    if (options.path) {
        if ('apiVersion' in options.path) {
            options.path['api-version'] = options.path.apiVersion;
            delete options.path.apiVersion;
        }
    }
}

export function complexTypesRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function multipartResponseRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function multipartRequestRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function complexParamsRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
    if (options.path) {
        if ('apiVersion' in options.path) {
            options.path['api-version'] = options.path.apiVersion;
            delete options.path.apiVersion;
        }
    }
    if (options.body) {
        if ('parameters' in options.body && (typeof options.body.parameters === "object" && options.body.parameters !== null))
            if ('foo_bar-enum' in options.body.parameters)
                if ('fooBarEnum' in options.body.parameters['foo_bar-enum']) {
                    options.body.parameters['foo_bar-enum']['foo_bar-enum'] = options.body.parameters['foo_bar-enum'].fooBarEnum;
                    delete options.body.parameters['foo_bar-enum'].fooBarEnum;
                }
    }
}

export function callWithResultFromHeaderRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function testErrorCodeRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}

export function nonAsciiæøåÆøÅöôêÊ字符串RequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
    if (options.query) {
        if ('nonAsciiParamæøåÆøÅöôêÊ' in options.query) {
            options.query.nonAsciiParamæøåÆØÅöôêÊ = options.query.nonAsciiParamæøåÆøÅöôêÊ;
            delete options.query.nonAsciiParamæøåÆøÅöôêÊ;
        }
    }
}

export function putWithFormUrlEncodedRequestKeyMapper(options: any) {
    if ("Path" in options) {
        if (!("path" in options))
            options.path = options.Path as any;
        delete options.Path;
    }
    if ("Query" in options) {
        if (!("query" in options))
            options.query = options.Query as any;
        delete options.Query;
    }
    if ("Headers" in options) {
        if (!("headers" in options))
            options.headers = options.Headers as any;
        delete options.Headers;
    }
    if ("Url" in options) {
        if (!("url" in options))
            options.url = options.Url as any;
        delete options.Url;
    }
    if ("Body" in options) {
        if (!("body" in options))
            options.body = options.Body as any;
        delete options.Body;
    }
}
