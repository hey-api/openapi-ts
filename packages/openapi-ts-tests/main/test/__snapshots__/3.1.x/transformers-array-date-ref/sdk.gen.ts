// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import { getUserResponseTransformer, listDatesResponseTransformer, listUsersResponseTransformer } from './transformers.gen';
import type { GetUserData, GetUserResponses, ListDatesData, ListDatesResponses, ListUsersData, ListUsersResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getUser = <ThrowOnError extends boolean = false>(options: Options<GetUserData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserResponses, unknown, ThrowOnError>({
        responseTransformer: getUserResponseTransformer,
        url: '/users/{id}',
        ...options
    });
};

export const listUsers = <ThrowOnError extends boolean = false>(options?: Options<ListUsersData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListUsersResponses, unknown, ThrowOnError>({
        responseTransformer: listUsersResponseTransformer,
        url: '/users',
        ...options
    });
};

export const listDates = <ThrowOnError extends boolean = false>(options?: Options<ListDatesData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListDatesResponses, unknown, ThrowOnError>({
        responseTransformer: listDatesResponseTransformer,
        url: '/dates',
        ...options
    });
};
