// This file is auto-generated by @hey-api/openapi-ts

import * as v from 'valibot';

/**
 * Testing multiline comments in string: First line
 * Second line
 *
 * Fourth line
 */
export const vCommentWithBreaks = v.pipe(v.number(), v.integer());

/**
 * Testing backticks in string: `backticks` and ```multiple backticks``` should work
 */
export const vCommentWithBackticks = v.pipe(v.number(), v.integer());

/**
 * Testing backticks and quotes in string: `backticks`, 'quotes', "double quotes" and ```multiple backticks``` should work
 */
export const vCommentWithBackticksAndQuotes = v.pipe(v.number(), v.integer());

/**
 * Testing slashes in string: \backwards\\\ and /forwards/// should work
 */
export const vCommentWithSlashes = v.pipe(v.number(), v.integer());

/**
 * Testing expression placeholders in string: ${expression} should work
 */
export const vCommentWithExpressionPlaceholders = v.pipe(v.number(), v.integer());

/**
 * Testing quotes in string: 'single quote''' and "double quotes""" should work
 */
export const vCommentWithQuotes = v.pipe(v.number(), v.integer());

/**
 * Testing reserved characters in string: * inline * and ** inline ** should work
 */
export const vCommentWithReservedCharacters = v.pipe(v.number(), v.integer());

/**
 * This is a simple number
 */
export const vSimpleInteger = v.pipe(v.number(), v.integer());

/**
 * This is a simple boolean
 */
export const vSimpleBoolean = v.boolean();

/**
 * This is a simple string
 */
export const vSimpleString = v.string();

/**
 * A string with non-ascii (unicode) characters valid in typescript identifiers (æøåÆØÅöÔèÈ字符串)
 */
export const vNonAsciiStringæøåÆøÅöôêÊ字符串 = v.string();

/**
 * This is a simple file
 */
export const vSimpleFile = v.string();

/**
 * This is a simple string
 */
export const vSimpleStringWithPattern = v.pipe(v.string(), v.maxLength(64), v.regex(/^[a-zA-Z0-9_]*$/));

/**
 * This is a simple enum with strings
 */
export const vEnumWithStrings = v.picklist([
    'Success',
    'Warning',
    'Error',
    "'Single Quote'",
    '"Double Quotes"',
    'Non-ascii: øæåôöØÆÅÔÖ字符串'
]);

/**
 * This is a simple enum with numbers
 */
export const vEnumWithNumbers = v.unknown();

/**
 * Success=1,Warning=2,Error=3
 */
export const vEnumFromDescription = v.number();

/**
 * This is a simple enum with numbers
 */
export const vEnumWithExtensions = v.unknown();

/**
 * This is a simple array with numbers
 */
export const vArrayWithNumbers = v.array(v.pipe(v.number(), v.integer()));

/**
 * This is a simple array with booleans
 */
export const vArrayWithBooleans = v.array(v.boolean());

/**
 * This is a simple array with strings
 */
export const vArrayWithStrings = v.array(v.string());

/**
 * This is a simple array with properties
 */
export const vArrayWithProperties = v.array(v.object({
    foo: v.optional(v.string()),
    bar: v.optional(v.string())
}));

/**
 * This is a string dictionary
 */
export const vDictionaryWithString = v.record(v.string(), v.string());

/**
 * This is a string dictionary
 */
export const vDictionaryWithDictionary = v.record(v.string(), v.record(v.string(), v.string()));

/**
 * This is a complex dictionary
 */
export const vDictionaryWithProperties = v.record(v.string(), v.object({
    foo: v.optional(v.string()),
    bar: v.optional(v.string())
}));

/**
 * This is a type-only model that defines Date as a string
 */
export const vDate = v.string();

/**
 * This is a model with one number property
 */
export const vModelWithInteger = v.object({
    prop: v.optional(v.pipe(v.number(), v.integer()))
});

/**
 * This is a model with one boolean property
 */
export const vModelWithBoolean = v.object({
    prop: v.optional(v.boolean())
});

/**
 * This is a model with one string property
 */
export const vModelWithString = v.object({
    prop: v.optional(v.string())
});

export const vSimpleReference = vModelWithString;

/**
 * This is a simple array with references
 */
export const vArrayWithReferences = v.array(vModelWithString);

/**
 * This is a simple array containing an array
 */
export const vArrayWithArray = v.array(v.array(vModelWithString));

/**
 * This is a string reference
 */
export const vDictionaryWithReference = v.object({});

/**
 * This is a complex dictionary
 */
export const vDictionaryWithArray = v.record(v.string(), v.array(vModelWithString));

/**
 * This is a model with one string property
 */
export const vModelWithStringError = v.object({
    prop: v.optional(v.string())
});

/**
 * This is a model with one string property
 */
export const vModelWithNullableString = v.object({
    nullableProp: v.optional(v.union([
        v.string(),
        v.null()
    ])),
    nullableRequiredProp: v.union([
        v.string(),
        v.null()
    ])
});

/**
 * This is a model with one enum
 */
export const vModelWithEnum = v.object({
    test: v.optional(v.picklist([
        'Success',
        'Warning',
        'Error',
        'ØÆÅ字符串'
    ])),
    statusCode: v.optional(v.picklist([
        '100',
        '200 FOO',
        '300 FOO_BAR',
        '400 foo-bar',
        '500 foo.bar',
        '600 foo&bar'
    ])),
    bool: v.optional(v.unknown())
});

/**
 * This is a model with one enum
 */
export const vModelWithEnumFromDescription = v.object({
    test: v.optional(v.pipe(v.number(), v.integer()))
});

/**
 * This is a model with nested enums
 */
export const vModelWithNestedEnums = v.object({
    dictionaryWithEnum: v.optional(v.record(v.string(), v.picklist([
        'Success',
        'Warning',
        'Error'
    ]))),
    dictionaryWithEnumFromDescription: v.optional(v.record(v.string(), v.pipe(v.number(), v.integer()))),
    arrayWithEnum: v.optional(v.array(v.picklist([
        'Success',
        'Warning',
        'Error'
    ]))),
    arrayWithDescription: v.optional(v.array(v.pipe(v.number(), v.integer())))
});

/**
 * This is a model with one property containing an array
 */
export const vModelWithArray = v.object({
    prop: v.optional(v.array(vModelWithString)),
    propWithFile: v.optional(v.array(v.string())),
    propWithNumber: v.optional(v.array(v.number()))
});

/**
 * This is a model with one property containing a dictionary
 */
export const vModelWithDictionary = v.object({
    prop: v.optional(v.record(v.string(), v.string()))
});

/**
 * This is a model with one property containing a circular reference
 */
export const vModelWithCircularReference: v.GenericSchema = v.object({
    prop: v.optional(v.lazy(() => {
        return vModelWithCircularReference;
    }))
});

/**
 * This is a model with one nested property
 */
export const vModelWithProperties = v.object({
    required: v.string(),
    requiredAndReadOnly: v.pipe(v.string(), v.readonly()),
    string: v.optional(v.string()),
    number: v.optional(v.number()),
    boolean: v.optional(v.boolean()),
    reference: v.optional(vModelWithString),
    'property with space': v.optional(v.string()),
    default: v.optional(v.string()),
    try: v.optional(v.string()),
    '@namespace.string': v.optional(v.pipe(v.string(), v.readonly())),
    '@namespace.integer': v.optional(v.pipe(v.pipe(v.number(), v.integer()), v.readonly()))
});

/**
 * This is a model with one property containing a reference
 */
export const vModelWithReference = v.object({
    prop: v.optional(vModelWithProperties)
});

/**
 * This is a model with one nested property
 */
export const vModelWithNestedProperties = v.object({
    first: v.pipe(v.object({
        second: v.pipe(v.object({
            third: v.pipe(v.string(), v.readonly())
        }), v.readonly())
    }), v.readonly())
});

/**
 * This is a model with duplicated properties
 */
export const vModelWithDuplicateProperties = v.object({
    prop: v.optional(vModelWithString)
});

/**
 * This is a model with ordered properties
 */
export const vModelWithOrderedProperties = v.object({
    zebra: v.optional(v.string()),
    apple: v.optional(v.string()),
    hawaii: v.optional(v.string())
});

/**
 * This is a model with duplicated imports
 */
export const vModelWithDuplicateImports = v.object({
    propA: v.optional(vModelWithString),
    propB: v.optional(vModelWithString),
    propC: v.optional(vModelWithString)
});

/**
 * This is a model that extends another model
 */
export const vModelThatExtends = v.intersect([
    vModelWithString,
    v.object({
        propExtendsA: v.optional(v.string()),
        propExtendsB: v.optional(vModelWithString)
    })
]);

/**
 * This is a model that extends another model
 */
export const vModelThatExtendsExtends = v.intersect([
    vModelWithString,
    vModelThatExtends,
    v.object({
        propExtendsC: v.optional(v.string()),
        propExtendsD: v.optional(vModelWithString)
    })
]);

export const vDefault = v.object({
    name: v.optional(v.string())
});

/**
 * This is a model that contains a some patterns
 */
export const vModelWithPattern = v.object({
    key: v.pipe(v.string(), v.maxLength(64), v.regex(/^[a-zA-Z0-9_]*$/)),
    name: v.pipe(v.string(), v.maxLength(255)),
    enabled: v.optional(v.pipe(v.boolean(), v.readonly())),
    modified: v.optional(v.pipe(v.pipe(v.string(), v.isoTimestamp()), v.readonly())),
    id: v.optional(v.pipe(v.string(), v.regex(/^\d{2}-\d{3}-\d{4}$/))),
    text: v.optional(v.pipe(v.string(), v.regex(/^\w+$/))),
    patternWithSingleQuotes: v.optional(v.pipe(v.string(), v.regex(/^[a-zA-Z0-9']*$/))),
    patternWithNewline: v.optional(v.pipe(v.string(), v.regex(/aaa\nbbb/))),
    patternWithBacktick: v.optional(v.pipe(v.string(), v.regex(/aaa`bbb/)))
});

export const vParameterActivityParams = v.object({
    description: v.optional(v.string()),
    graduate_id: v.optional(v.pipe(v.number(), v.integer())),
    organization_id: v.optional(v.pipe(v.number(), v.integer())),
    parent_activity: v.optional(v.pipe(v.number(), v.integer())),
    post_id: v.optional(v.pipe(v.number(), v.integer()))
});

export const vResponsePostActivityResponse = v.object({
    description: v.optional(v.string()),
    graduate_id: v.optional(v.pipe(v.number(), v.integer())),
    organization_id: v.optional(v.pipe(v.number(), v.integer())),
    parent_activity_id: v.optional(v.pipe(v.number(), v.integer())),
    post_id: v.optional(v.pipe(v.number(), v.integer()))
});

export const vFailureFailure = v.object({
    error: v.optional(v.string()),
    message: v.optional(v.string()),
    reference_code: v.optional(v.string())
});

export const vExternalSharedExternalSharedModel = v.object({
    id: v.string(),
    name: v.optional(v.string())
});

export const vExternalRefA = vExternalSharedExternalSharedModel;

export const vExternalRefB = vExternalSharedExternalSharedModel;

/**
 * This is a model with one nested property
 */
export const vModelWithPropertiesWritable = v.object({
    required: v.string(),
    string: v.optional(v.string()),
    number: v.optional(v.number()),
    boolean: v.optional(v.boolean()),
    reference: v.optional(vModelWithString),
    'property with space': v.optional(v.string()),
    default: v.optional(v.string()),
    try: v.optional(v.string())
});

/**
 * This is a model with one property containing a reference
 */
export const vModelWithReferenceWritable = v.object({
    prop: v.optional(vModelWithPropertiesWritable)
});

/**
 * This is a model that contains a some patterns
 */
export const vModelWithPatternWritable = v.object({
    key: v.pipe(v.string(), v.maxLength(64), v.regex(/^[a-zA-Z0-9_]*$/)),
    name: v.pipe(v.string(), v.maxLength(255)),
    id: v.optional(v.pipe(v.string(), v.regex(/^\d{2}-\d{3}-\d{4}$/))),
    text: v.optional(v.pipe(v.string(), v.regex(/^\w+$/))),
    patternWithSingleQuotes: v.optional(v.pipe(v.string(), v.regex(/^[a-zA-Z0-9']*$/))),
    patternWithNewline: v.optional(v.pipe(v.string(), v.regex(/aaa\nbbb/))),
    patternWithBacktick: v.optional(v.pipe(v.string(), v.regex(/aaa`bbb/)))
});

export const vServiceWithEmptyTagData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vPatchApiVbyApiVersionNoTagData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vFooWowData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vDeleteCallWithoutParametersAndResponseData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vGetCallWithoutParametersAndResponseData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vHeadCallWithoutParametersAndResponseData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vOptionsCallWithoutParametersAndResponseData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vPatchCallWithoutParametersAndResponseData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vPostCallWithoutParametersAndResponseData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vPutCallWithoutParametersAndResponseData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vCallWithDescriptionsData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.object({
        parameterWithBreaks: v.optional(v.string()),
        parameterWithBackticks: v.optional(v.string()),
        parameterWithSlashes: v.optional(v.string()),
        parameterWithExpressionPlaceholders: v.optional(v.string()),
        parameterWithQuotes: v.optional(v.string()),
        parameterWithReservedCharacters: v.optional(v.string())
    }))
});

export const vCallWithParametersData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        parameterPath: v.string(),
        'api-version': v.string()
    }),
    query: v.object({
        parameterQuery: v.string()
    }),
    headers: v.object({
        parameterHeader: v.string()
    })
});

export const vCallWithWeirdParameterNamesData = v.object({
    body: v.optional(v.never()),
    path: v.object({
        'parameter.path.1': v.optional(v.string()),
        'parameter-path-2': v.optional(v.string()),
        'PARAMETER-PATH-3': v.optional(v.string()),
        'api-version': v.string()
    }),
    query: v.object({
        default: v.optional(v.string()),
        'parameter-query': v.string()
    }),
    headers: v.object({
        'parameter.header': v.string()
    })
});

export const vCallWithDefaultParametersData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.object({
        parameterString: v.optional(v.string(), 'Hello World!'),
        parameterNumber: v.optional(v.number(), 123),
        parameterBoolean: v.optional(v.boolean(), true),
        parameterEnum: v.picklist([
            'Success',
            'Warning',
            'Error'
        ]),
        parameterModel: v.optional(v.object({
            prop: v.optional(v.string())
        }), {
            prop: 'Hello World!'
        })
    })
});

export const vCallWithDefaultOptionalParametersData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.object({
        parameterString: v.optional(v.string(), 'Hello World!'),
        parameterNumber: v.optional(v.number(), 123),
        parameterBoolean: v.optional(v.boolean(), true),
        parameterEnum: v.optional(v.picklist([
            'Success',
            'Warning',
            'Error'
        ]))
    }))
});

export const vCallToTestOrderOfParamsData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.object({
        parameterOptionalStringWithDefault: v.optional(v.string(), 'Hello World!'),
        parameterOptionalStringWithEmptyDefault: v.optional(v.string(), ''),
        parameterOptionalStringWithNoDefault: v.optional(v.string()),
        parameterStringWithDefault: v.optional(v.string(), 'Hello World!'),
        parameterStringWithEmptyDefault: v.optional(v.string(), ''),
        parameterStringWithNoDefault: v.string(),
        parameterStringNullableWithNoDefault: v.optional(v.union([
            v.string(),
            v.null()
        ])),
        parameterStringNullableWithDefault: v.optional(v.union([
            v.string(),
            v.null()
        ]), null)
    })
});

export const vDuplicateNameData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vDuplicateName2Data = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vDuplicateName3Data = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vDuplicateName4Data = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vCallWithNoContentResponseData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vCallWithResponseAndNoContentResponseData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vCallWithResponseAndNoContentResponseResponse = v.union([
    v.number(),
    v.unknown()
]);

export const vDummyAData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vDummyBData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vCallWithResponseData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

/**
 * Message for default response
 */
export const vCallWithResponseResponse = vModelWithString;

export const vCallWithDuplicateResponsesData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

/**
 * Message for 201 response
 */
export const vCallWithDuplicateResponsesResponse = vModelWithString;

export const vCallWithResponsesData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vCallWithResponsesResponse = v.union([
    v.object({
        '@namespace.string': v.optional(v.pipe(v.string(), v.readonly())),
        '@namespace.integer': v.optional(v.pipe(v.pipe(v.number(), v.integer()), v.readonly())),
        value: v.optional(v.pipe(v.array(vModelWithString), v.readonly()))
    }),
    vModelThatExtends,
    vModelThatExtendsExtends
]);

export const vCollectionFormatData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.object({
        parameterArrayCSV: v.array(v.string()),
        parameterArraySSV: v.array(v.string()),
        parameterArrayTSV: v.array(v.string()),
        parameterArrayPipes: v.array(v.string()),
        parameterArrayMulti: v.array(v.string())
    })
});

export const vTypesData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.object({
        id: v.optional(v.pipe(v.number(), v.integer(), v.minValue(-2147483648, 'Invalid value: Expected int32 to be >= -2^31'), v.maxValue(2147483647, 'Invalid value: Expected int32 to be <= 2^31-1')))
    })),
    query: v.object({
        parameterNumber: v.optional(v.number(), 123),
        parameterString: v.optional(v.string(), 'default'),
        parameterBoolean: v.optional(v.boolean(), true),
        parameterArray: v.array(v.string()),
        parameterDictionary: v.record(v.string(), v.unknown()),
        parameterEnum: v.picklist([
            'Success',
            'Warning',
            'Error'
        ])
    })
});

export const vTypesResponse = v.union([
    v.number(),
    v.string(),
    v.boolean(),
    v.record(v.string(), v.unknown())
]);

export const vComplexTypesData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.object({
        parameterObject: v.object({
            first: v.optional(v.object({
                second: v.optional(v.object({
                    third: v.optional(v.string())
                }))
            }))
        }),
        parameterReference: v.object({
            prop: v.optional(v.string())
        })
    })
});

/**
 * Successful response
 */
export const vComplexTypesResponse = v.array(vModelWithString);

export const vCallWithResultFromHeaderData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

export const vTestErrorCodeData = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.object({
        status: v.string()
    })
});

export const vNonAsciiæøåÆøÅöôêÊ字符串Data = v.object({
    body: v.optional(v.never()),
    path: v.optional(v.never()),
    query: v.object({
        'nonAsciiParamæøåÆØÅöôêÊ': v.pipe(v.number(), v.integer())
    })
});

/**
 * Successful response
 */
export const vNonAsciiæøåÆøÅöôêÊ字符串Response = vNonAsciiStringæøåÆøÅöôêÊ字符串;

export const vPostApiVbyApiVersionBodyData = v.object({
    body: vParameterActivityParams,
    path: v.optional(v.never()),
    query: v.optional(v.never())
});

/**
 * OK
 */
export const vPostApiVbyApiVersionBodyResponse = vResponsePostActivityResponse;
