// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { FooBarPostData, FooBarPostResponses, FooBarPutData, FooBarPutResponses, FooPostData, FooPostResponses, FooPutData, FooPutResponses, GetFooBarData, GetFooBarResponses, GetFooData, GetFooResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class BarService {
    public static post<ThrowOnError extends boolean = false>(options?: Options<FooBarPostData, ThrowOnError>) {
        return (options?.client ?? client).post<FooBarPostResponses, unknown, ThrowOnError>({
            url: '/foo/bar',
            ...options
        });
    }
    
    public static put<ThrowOnError extends boolean = false>(options?: Options<FooBarPutData, ThrowOnError>) {
        return (options?.client ?? client).put<FooBarPutResponses, unknown, ThrowOnError>({
            url: '/foo/bar',
            ...options
        });
    }
}

export class FooService {
    public static post<ThrowOnError extends boolean = false>(options?: Options<FooPostData, ThrowOnError>) {
        return (options?.client ?? client).post<FooPostResponses, unknown, ThrowOnError>({
            url: '/foo',
            ...options
        });
    }
    
    public static put<ThrowOnError extends boolean = false>(options?: Options<FooPutData, ThrowOnError>) {
        return (options?.client ?? client).put<FooPutResponses, unknown, ThrowOnError>({
            url: '/foo',
            ...options
        });
    }
    
    static barService = BarService;
}

export class FooBazService {
    public static getFoo<ThrowOnError extends boolean = false>(options?: Options<GetFooData, ThrowOnError>) {
        return (options?.client ?? client).get<GetFooResponses, unknown, ThrowOnError>({
            url: '/foo',
            ...options
        });
    }
    
    static fooService = FooService;
}

export class BarBazService {
    public static getFooBar<ThrowOnError extends boolean = false>(options?: Options<GetFooBarData, ThrowOnError>) {
        return (options?.client ?? client).get<GetFooBarResponses, unknown, ThrowOnError>({
            url: '/foo/bar',
            ...options
        });
    }
    
    static fooService = FooService;
}
